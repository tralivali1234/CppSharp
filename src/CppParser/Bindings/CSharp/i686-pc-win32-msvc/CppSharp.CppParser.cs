//----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace CppSharp
{
    namespace Parser
    {
        namespace AST
        {
            public enum TypeKind
            {
                Tag = 0,
                Array = 1,
                Function = 2,
                Pointer = 3,
                MemberPointer = 4,
                Typedef = 5,
                Attributed = 6,
                Decayed = 7,
                TemplateSpecialization = 8,
                DependentTemplateSpecialization = 9,
                TemplateParameter = 10,
                TemplateParameterSubstitution = 11,
                InjectedClassName = 12,
                DependentName = 13,
                PackExpansion = 14,
                Builtin = 15,
                UnaryTransform = 16,
                Vector = 17
            }

            public enum DeclarationKind
            {
                DeclarationContext = 0,
                Typedef = 1,
                TypeAlias = 2,
                Parameter = 3,
                Function = 4,
                Method = 5,
                Enumeration = 6,
                EnumerationItem = 7,
                Variable = 8,
                Field = 9,
                AccessSpecifier = 10,
                Class = 11,
                Template = 12,
                TypeAliasTemplate = 13,
                ClassTemplate = 14,
                ClassTemplateSpecialization = 15,
                ClassTemplatePartialSpecialization = 16,
                FunctionTemplate = 17,
                Namespace = 18,
                PreprocessedEntity = 19,
                MacroDefinition = 20,
                MacroExpansion = 21,
                TranslationUnit = 22,
                Friend = 23,
                TemplateTemplateParm = 24,
                TemplateTypeParm = 25,
                NonTypeTemplateParm = 26,
                VarTemplate = 27,
                VarTemplateSpecialization = 28,
                VarTemplatePartialSpecialization = 29
            }

            public enum AccessSpecifier
            {
                Private = 0,
                Protected = 1,
                Public = 2
            }

            public enum MacroLocation
            {
                Unknown = 0,
                ClassHead = 1,
                ClassBody = 2,
                FunctionHead = 3,
                FunctionParameters = 4,
                FunctionBody = 5
            }

            public enum RawCommentKind
            {
                Invalid = 0,
                OrdinaryBCPL = 1,
                OrdinaryC = 2,
                BCPLSlash = 3,
                BCPLExcl = 4,
                JavaDoc = 5,
                Qt = 6,
                Merged = 7
            }

            public enum CommentKind
            {
                FullComment = 0,
                BlockContentComment = 1,
                BlockCommandComment = 2,
                ParamCommandComment = 3,
                TParamCommandComment = 4,
                VerbatimBlockComment = 5,
                VerbatimLineComment = 6,
                ParagraphComment = 7,
                HTMLTagComment = 8,
                HTMLStartTagComment = 9,
                HTMLEndTagComment = 10,
                TextComment = 11,
                InlineContentComment = 12,
                InlineCommandComment = 13,
                VerbatimBlockLineComment = 14
            }

            public enum CXXOperatorKind
            {
                None = 0,
                New = 1,
                Delete = 2,
                Array_New = 3,
                Array_Delete = 4,
                Plus = 5,
                Minus = 6,
                Star = 7,
                Slash = 8,
                Percent = 9,
                Caret = 10,
                Amp = 11,
                Pipe = 12,
                Tilde = 13,
                Exclaim = 14,
                Equal = 15,
                Less = 16,
                Greater = 17,
                PlusEqual = 18,
                MinusEqual = 19,
                StarEqual = 20,
                SlashEqual = 21,
                PercentEqual = 22,
                CaretEqual = 23,
                AmpEqual = 24,
                PipeEqual = 25,
                LessLess = 26,
                GreaterGreater = 27,
                LessLessEqual = 28,
                GreaterGreaterEqual = 29,
                EqualEqual = 30,
                ExclaimEqual = 31,
                LessEqual = 32,
                GreaterEqual = 33,
                AmpAmp = 34,
                PipePipe = 35,
                PlusPlus = 36,
                MinusMinus = 37,
                Comma = 38,
                ArrowStar = 39,
                Arrow = 40,
                Call = 41,
                Subscript = 42,
                Conditional = 43,
                Coawait = 44
            }

            public enum CallingConvention
            {
                Default = 0,
                C = 1,
                StdCall = 2,
                ThisCall = 3,
                FastCall = 4,
                Unknown = 5
            }

            public enum StatementClass
            {
                Any = 0,
                BinaryOperator = 1,
                CallExprClass = 2,
                DeclRefExprClass = 3,
                CXXConstructExprClass = 4,
                CXXOperatorCallExpr = 5,
                ImplicitCastExpr = 6,
                ExplicitCastExpr = 7
            }

            public enum TemplateSpecializationKind
            {
                Undeclared = 0,
                ImplicitInstantiation = 1,
                ExplicitSpecialization = 2,
                ExplicitInstantiationDeclaration = 3,
                ExplicitInstantiationDefinition = 4
            }

            public enum CXXMethodKind
            {
                Normal = 0,
                Constructor = 1,
                Destructor = 2,
                Conversion = 3,
                Operator = 4,
                UsingDirective = 5
            }

            public enum RefQualifierKind
            {
                None = 0,
                LValue = 1,
                RValue = 2
            }

            public enum CppAbi
            {
                Itanium = 0,
                Microsoft = 1,
                ARM = 2,
                iOS = 3,
                iOS64 = 4
            }

            public enum VTableComponentKind
            {
                VCallOffset = 0,
                VBaseOffset = 1,
                OffsetToTop = 2,
                RTTI = 3,
                FunctionPointer = 4,
                CompleteDtorPointer = 5,
                DeletingDtorPointer = 6,
                UnusedFunctionPointer = 7
            }

            public enum PrimitiveType
            {
                Null = 0,
                Void = 1,
                Bool = 2,
                WideChar = 3,
                Char = 4,
                UChar = 5,
                Char16 = 6,
                Char32 = 7,
                Short = 8,
                UShort = 9,
                Int = 10,
                UInt = 11,
                Long = 12,
                ULong = 13,
                LongLong = 14,
                ULongLong = 15,
                Int128 = 16,
                UInt128 = 17,
                Half = 18,
                Float = 19,
                Double = 20,
                LongDouble = 21,
                Float128 = 22,
                IntPtr = 23
            }

            public enum ArchType
            {
                UnknownArch = 0,
                x86 = 1,
                x86_64 = 2
            }

            public unsafe partial class Type : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 8)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.TypeKind Kind;

                    [FieldOffset(4)]
                    public byte IsDependent;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Type@AST@CppParser@CppSharp@@QAE@W4TypeKind@123@@Z")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance, global::CppSharp.Parser.AST.TypeKind kind);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Type@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                protected int __PointerAdjustment;
                public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Type> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Type>();
                protected void*[] __OriginalVTables;

                protected bool __ownsNativeInstance;

                public static Type __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new Type(native.ToPointer(), skipVTables);
                }

                public static Type __CreateInstance(Type.__Internal native, bool skipVTables = false)
                {
                    return new Type(native, skipVTables);
                }

                private static void* __CopyValue(Type.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(8);
                    global::CppSharp.Parser.AST.Type.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private Type(Type.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected Type(void* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public Type(global::CppSharp.Parser.AST.TypeKind kind)
                {
                    __Instance = Marshal.AllocHGlobal(8);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var __arg0 = kind;
                    __Internal.ctor_0((__Instance + __PointerAdjustment), __arg0);
                }

                public Type(global::CppSharp.Parser.AST.Type _0)
                {
                    __Instance = Marshal.AllocHGlobal(8);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                public virtual void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Type __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public static implicit operator global::CppSharp.Parser.AST.Type(global::CppSharp.Parser.AST.TypeKind kind)
                {
                    return new global::CppSharp.Parser.AST.Type(kind);
                }

                public global::CppSharp.Parser.AST.TypeKind Kind
                {
                    get
                    {
                        return ((__Internal*) __Instance)->Kind;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Kind = value;
                    }
                }

                public bool IsDependent
                {
                    get
                    {
                        return ((__Internal*) __Instance)->IsDependent != 0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->IsDependent = (byte) (value ? 1 : 0);
                    }
                }
            }

            public unsafe partial class TypeQualifiers : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 3)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    public byte IsConst;

                    [FieldOffset(1)]
                    public byte IsVolatile;

                    [FieldOffset(2)]
                    public byte IsRestrict;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TypeQualifiers@AST@CppParser@CppSharp@@QAE@ABU0123@@Z")]
                    internal static extern global::System.IntPtr cctor_0(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                protected int __PointerAdjustment;
                public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, TypeQualifiers> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, TypeQualifiers>();
                protected void*[] __OriginalVTables;

                protected bool __ownsNativeInstance;

                public static TypeQualifiers __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new TypeQualifiers(native.ToPointer(), skipVTables);
                }

                public static TypeQualifiers __CreateInstance(TypeQualifiers.__Internal native, bool skipVTables = false)
                {
                    return new TypeQualifiers(native, skipVTables);
                }

                private static void* __CopyValue(TypeQualifiers.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(3);
                    *(TypeQualifiers.__Internal*) ret = native;
                    return ret.ToPointer();
                }

                private TypeQualifiers(TypeQualifiers.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected TypeQualifiers(void* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public TypeQualifiers(global::CppSharp.Parser.AST.TypeQualifiers _0)
                {
                    __Instance = Marshal.AllocHGlobal(3);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    *((TypeQualifiers.__Internal*) __Instance) = *((TypeQualifiers.__Internal*) _0.__Instance);
                }

                public TypeQualifiers()
                {
                    __Instance = Marshal.AllocHGlobal(3);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                public virtual void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.TypeQualifiers __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public bool IsConst
                {
                    get
                    {
                        return ((__Internal*) __Instance)->IsConst != 0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->IsConst = (byte) (value ? 1 : 0);
                    }
                }

                public bool IsVolatile
                {
                    get
                    {
                        return ((__Internal*) __Instance)->IsVolatile != 0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->IsVolatile = (byte) (value ? 1 : 0);
                    }
                }

                public bool IsRestrict
                {
                    get
                    {
                        return ((__Internal*) __Instance)->IsRestrict != 0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->IsRestrict = (byte) (value ? 1 : 0);
                    }
                }
            }

            public unsafe partial class QualifiedType : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 8)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::System.IntPtr Type;

                    [FieldOffset(4)]
                    public global::CppSharp.Parser.AST.TypeQualifiers.__Internal Qualifiers;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0QualifiedType@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0QualifiedType@AST@CppParser@CppSharp@@QAE@ABU0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                protected int __PointerAdjustment;
                public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, QualifiedType> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, QualifiedType>();
                protected void*[] __OriginalVTables;

                protected bool __ownsNativeInstance;

                public static QualifiedType __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new QualifiedType(native.ToPointer(), skipVTables);
                }

                public static QualifiedType __CreateInstance(QualifiedType.__Internal native, bool skipVTables = false)
                {
                    return new QualifiedType(native, skipVTables);
                }

                private static void* __CopyValue(QualifiedType.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(8);
                    *(QualifiedType.__Internal*) ret = native;
                    return ret.ToPointer();
                }

                private QualifiedType(QualifiedType.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected QualifiedType(void* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public QualifiedType()
                {
                    __Instance = Marshal.AllocHGlobal(8);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public QualifiedType(global::CppSharp.Parser.AST.QualifiedType _0)
                {
                    __Instance = Marshal.AllocHGlobal(8);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    *((QualifiedType.__Internal*) __Instance) = *((QualifiedType.__Internal*) _0.__Instance);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                public virtual void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.QualifiedType __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public global::CppSharp.Parser.AST.Type Type
                {
                    get
                    {
                        global::CppSharp.Parser.AST.Type __result0;
                        if (((__Internal*) __Instance)->Type == IntPtr.Zero) __result0 = null;
                        else if (global::CppSharp.Parser.AST.Type.NativeToManagedMap.ContainsKey(((__Internal*) __Instance)->Type))
                            __result0 = (global::CppSharp.Parser.AST.Type) global::CppSharp.Parser.AST.Type.NativeToManagedMap[((__Internal*) __Instance)->Type];
                        else __result0 = global::CppSharp.Parser.AST.Type.__CreateInstance(((__Internal*) __Instance)->Type);
                        return __result0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Type = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public global::CppSharp.Parser.AST.TypeQualifiers Qualifiers
                {
                    get
                    {
                        return global::CppSharp.Parser.AST.TypeQualifiers.__CreateInstance(((__Internal*) __Instance)->Qualifiers);
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Qualifiers = ReferenceEquals(value, null) ? new global::CppSharp.Parser.AST.TypeQualifiers.__Internal() : *(global::CppSharp.Parser.AST.TypeQualifiers.__Internal*) value.__Instance;
                    }
                }
            }

            public unsafe partial class TagType : global::CppSharp.Parser.AST.Type, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 12)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.TypeKind Kind;

                    [FieldOffset(4)]
                    public byte IsDependent;

                    [FieldOffset(8)]
                    public global::System.IntPtr Declaration;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TagType@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TagType@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public static new TagType __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new TagType(native.ToPointer(), skipVTables);
                }

                public static TagType __CreateInstance(TagType.__Internal native, bool skipVTables = false)
                {
                    return new TagType(native, skipVTables);
                }

                private static void* __CopyValue(TagType.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(12);
                    global::CppSharp.Parser.AST.TagType.__Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private TagType(TagType.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected TagType(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public TagType()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(12);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public TagType(global::CppSharp.Parser.AST.TagType _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(12);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_2((__Instance + __PointerAdjustment), __arg0);
                }

                public global::CppSharp.Parser.AST.Declaration Declaration
                {
                    get
                    {
                        global::CppSharp.Parser.AST.Declaration __result0;
                        if (((__Internal*) __Instance)->Declaration == IntPtr.Zero) __result0 = null;
                        else if (global::CppSharp.Parser.AST.Declaration.NativeToManagedMap.ContainsKey(((__Internal*) __Instance)->Declaration))
                            __result0 = (global::CppSharp.Parser.AST.Declaration) global::CppSharp.Parser.AST.Declaration.NativeToManagedMap[((__Internal*) __Instance)->Declaration];
                        else __result0 = global::CppSharp.Parser.AST.Declaration.__CreateInstance(((__Internal*) __Instance)->Declaration);
                        return __result0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Declaration = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }
            }

            public unsafe partial class ArrayType : global::CppSharp.Parser.AST.Type, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 28)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.TypeKind Kind;

                    [FieldOffset(4)]
                    public byte IsDependent;

                    [FieldOffset(8)]
                    public global::CppSharp.Parser.AST.QualifiedType.__Internal QualifiedType;

                    [FieldOffset(16)]
                    public global::CppSharp.Parser.AST.ArrayType.ArraySize SizeType;

                    [FieldOffset(20)]
                    public int Size;

                    [FieldOffset(24)]
                    public int ElementSize;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0ArrayType@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0ArrayType@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public enum ArraySize
                {
                    Constant = 0,
                    Variable = 1,
                    Dependent = 2,
                    Incomplete = 3
                }

                public static new ArrayType __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new ArrayType(native.ToPointer(), skipVTables);
                }

                public static ArrayType __CreateInstance(ArrayType.__Internal native, bool skipVTables = false)
                {
                    return new ArrayType(native, skipVTables);
                }

                private static void* __CopyValue(ArrayType.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(28);
                    global::CppSharp.Parser.AST.ArrayType.__Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private ArrayType(ArrayType.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected ArrayType(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public ArrayType()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(28);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public ArrayType(global::CppSharp.Parser.AST.ArrayType _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(28);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_2((__Instance + __PointerAdjustment), __arg0);
                }

                public global::CppSharp.Parser.AST.QualifiedType QualifiedType
                {
                    get
                    {
                        return global::CppSharp.Parser.AST.QualifiedType.__CreateInstance(((__Internal*) __Instance)->QualifiedType);
                    }

                    set
                    {
                        ((__Internal*) __Instance)->QualifiedType = ReferenceEquals(value, null) ? new global::CppSharp.Parser.AST.QualifiedType.__Internal() : *(global::CppSharp.Parser.AST.QualifiedType.__Internal*) value.__Instance;
                    }
                }

                public global::CppSharp.Parser.AST.ArrayType.ArraySize SizeType
                {
                    get
                    {
                        return ((__Internal*) __Instance)->SizeType;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->SizeType = value;
                    }
                }

                public int Size
                {
                    get
                    {
                        return ((__Internal*) __Instance)->Size;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Size = value;
                    }
                }

                public int ElementSize
                {
                    get
                    {
                        return ((__Internal*) __Instance)->ElementSize;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->ElementSize = value;
                    }
                }
            }

            public unsafe partial class FunctionType : global::CppSharp.Parser.AST.Type, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 32)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.TypeKind Kind;

                    [FieldOffset(4)]
                    public byte IsDependent;

                    [FieldOffset(8)]
                    public global::CppSharp.Parser.AST.QualifiedType.__Internal ReturnType;

                    [FieldOffset(16)]
                    public global::CppSharp.Parser.AST.CallingConvention CallingConvention;

                    [FieldOffset(20)]
                    internal global::Std.Vector.__Internal Parameters;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0FunctionType@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0FunctionType@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1FunctionType@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getParameters@FunctionType@AST@CppParser@CppSharp@@QAEPAVParameter@234@I@Z")]
                    internal static extern global::System.IntPtr GetParameters_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addParameters@FunctionType@AST@CppParser@CppSharp@@QAEXAAPAVParameter@234@@Z")]
                    internal static extern void AddParameters_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearParameters@FunctionType@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void ClearParameters_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getParametersCount@FunctionType@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint GetParametersCount_0(global::System.IntPtr instance);
                }

                public static new FunctionType __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new FunctionType(native.ToPointer(), skipVTables);
                }

                public static FunctionType __CreateInstance(FunctionType.__Internal native, bool skipVTables = false)
                {
                    return new FunctionType(native, skipVTables);
                }

                private static void* __CopyValue(FunctionType.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(32);
                    global::CppSharp.Parser.AST.FunctionType.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private FunctionType(FunctionType.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected FunctionType(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public FunctionType()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(32);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public FunctionType(global::CppSharp.Parser.AST.FunctionType _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(32);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public override void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Type __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public global::CppSharp.Parser.AST.Parameter GetParameters(uint i)
                {
                    var __ret = __Internal.GetParameters_0((__Instance + __PointerAdjustment), i);
                    global::CppSharp.Parser.AST.Parameter __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (global::CppSharp.Parser.AST.Parameter.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (global::CppSharp.Parser.AST.Parameter) global::CppSharp.Parser.AST.Parameter.NativeToManagedMap[__ret];
                    else __result0 = global::CppSharp.Parser.AST.Parameter.__CreateInstance(__ret);
                    return __result0;
                }

                public void AddParameters(global::CppSharp.Parser.AST.Parameter s)
                {
                    if (ReferenceEquals(s, null))
                        throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = s.__Instance;
                    __Internal.AddParameters_0((__Instance + __PointerAdjustment), __arg0);
                }

                public void ClearParameters()
                {
                    __Internal.ClearParameters_0((__Instance + __PointerAdjustment));
                }

                public global::CppSharp.Parser.AST.QualifiedType ReturnType
                {
                    get
                    {
                        return global::CppSharp.Parser.AST.QualifiedType.__CreateInstance(((__Internal*) __Instance)->ReturnType);
                    }

                    set
                    {
                        ((__Internal*) __Instance)->ReturnType = ReferenceEquals(value, null) ? new global::CppSharp.Parser.AST.QualifiedType.__Internal() : *(global::CppSharp.Parser.AST.QualifiedType.__Internal*) value.__Instance;
                    }
                }

                public global::CppSharp.Parser.AST.CallingConvention CallingConvention
                {
                    get
                    {
                        return ((__Internal*) __Instance)->CallingConvention;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->CallingConvention = value;
                    }
                }

                public uint ParametersCount
                {
                    get
                    {
                        var __ret = __Internal.GetParametersCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }
            }

            public unsafe partial class PointerType : global::CppSharp.Parser.AST.Type, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 20)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.TypeKind Kind;

                    [FieldOffset(4)]
                    public byte IsDependent;

                    [FieldOffset(8)]
                    public global::CppSharp.Parser.AST.QualifiedType.__Internal QualifiedPointee;

                    [FieldOffset(16)]
                    public global::CppSharp.Parser.AST.PointerType.TypeModifier Modifier;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0PointerType@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0PointerType@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public enum TypeModifier
                {
                    Value = 0,
                    Pointer = 1,
                    LVReference = 2,
                    RVReference = 3
                }

                public static new PointerType __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new PointerType(native.ToPointer(), skipVTables);
                }

                public static PointerType __CreateInstance(PointerType.__Internal native, bool skipVTables = false)
                {
                    return new PointerType(native, skipVTables);
                }

                private static void* __CopyValue(PointerType.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(20);
                    global::CppSharp.Parser.AST.PointerType.__Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private PointerType(PointerType.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected PointerType(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public PointerType()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(20);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public PointerType(global::CppSharp.Parser.AST.PointerType _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(20);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_2((__Instance + __PointerAdjustment), __arg0);
                }

                public global::CppSharp.Parser.AST.QualifiedType QualifiedPointee
                {
                    get
                    {
                        return global::CppSharp.Parser.AST.QualifiedType.__CreateInstance(((__Internal*) __Instance)->QualifiedPointee);
                    }

                    set
                    {
                        ((__Internal*) __Instance)->QualifiedPointee = ReferenceEquals(value, null) ? new global::CppSharp.Parser.AST.QualifiedType.__Internal() : *(global::CppSharp.Parser.AST.QualifiedType.__Internal*) value.__Instance;
                    }
                }

                public global::CppSharp.Parser.AST.PointerType.TypeModifier Modifier
                {
                    get
                    {
                        return ((__Internal*) __Instance)->Modifier;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Modifier = value;
                    }
                }
            }

            public unsafe partial class MemberPointerType : global::CppSharp.Parser.AST.Type, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 16)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.TypeKind Kind;

                    [FieldOffset(4)]
                    public byte IsDependent;

                    [FieldOffset(8)]
                    public global::CppSharp.Parser.AST.QualifiedType.__Internal Pointee;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0MemberPointerType@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0MemberPointerType@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public static new MemberPointerType __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new MemberPointerType(native.ToPointer(), skipVTables);
                }

                public static MemberPointerType __CreateInstance(MemberPointerType.__Internal native, bool skipVTables = false)
                {
                    return new MemberPointerType(native, skipVTables);
                }

                private static void* __CopyValue(MemberPointerType.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(16);
                    global::CppSharp.Parser.AST.MemberPointerType.__Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private MemberPointerType(MemberPointerType.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected MemberPointerType(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public MemberPointerType()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(16);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public MemberPointerType(global::CppSharp.Parser.AST.MemberPointerType _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(16);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_2((__Instance + __PointerAdjustment), __arg0);
                }

                public global::CppSharp.Parser.AST.QualifiedType Pointee
                {
                    get
                    {
                        return global::CppSharp.Parser.AST.QualifiedType.__CreateInstance(((__Internal*) __Instance)->Pointee);
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Pointee = ReferenceEquals(value, null) ? new global::CppSharp.Parser.AST.QualifiedType.__Internal() : *(global::CppSharp.Parser.AST.QualifiedType.__Internal*) value.__Instance;
                    }
                }
            }

            public unsafe partial class TypedefType : global::CppSharp.Parser.AST.Type, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 12)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.TypeKind Kind;

                    [FieldOffset(4)]
                    public byte IsDependent;

                    [FieldOffset(8)]
                    public global::System.IntPtr Declaration;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TypedefType@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TypedefType@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public static new TypedefType __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new TypedefType(native.ToPointer(), skipVTables);
                }

                public static TypedefType __CreateInstance(TypedefType.__Internal native, bool skipVTables = false)
                {
                    return new TypedefType(native, skipVTables);
                }

                private static void* __CopyValue(TypedefType.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(12);
                    global::CppSharp.Parser.AST.TypedefType.__Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private TypedefType(TypedefType.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected TypedefType(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public TypedefType()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(12);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public TypedefType(global::CppSharp.Parser.AST.TypedefType _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(12);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_2((__Instance + __PointerAdjustment), __arg0);
                }

                public global::CppSharp.Parser.AST.TypedefNameDecl Declaration
                {
                    get
                    {
                        global::CppSharp.Parser.AST.TypedefNameDecl __result0;
                        if (((__Internal*) __Instance)->Declaration == IntPtr.Zero) __result0 = null;
                        else if (global::CppSharp.Parser.AST.TypedefNameDecl.NativeToManagedMap.ContainsKey(((__Internal*) __Instance)->Declaration))
                            __result0 = (global::CppSharp.Parser.AST.TypedefNameDecl) global::CppSharp.Parser.AST.TypedefNameDecl.NativeToManagedMap[((__Internal*) __Instance)->Declaration];
                        else __result0 = global::CppSharp.Parser.AST.TypedefNameDecl.__CreateInstance(((__Internal*) __Instance)->Declaration);
                        return __result0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Declaration = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }
            }

            public unsafe partial class AttributedType : global::CppSharp.Parser.AST.Type, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 24)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.TypeKind Kind;

                    [FieldOffset(4)]
                    public byte IsDependent;

                    [FieldOffset(8)]
                    public global::CppSharp.Parser.AST.QualifiedType.__Internal Modified;

                    [FieldOffset(16)]
                    public global::CppSharp.Parser.AST.QualifiedType.__Internal Equivalent;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0AttributedType@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0AttributedType@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public static new AttributedType __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new AttributedType(native.ToPointer(), skipVTables);
                }

                public static AttributedType __CreateInstance(AttributedType.__Internal native, bool skipVTables = false)
                {
                    return new AttributedType(native, skipVTables);
                }

                private static void* __CopyValue(AttributedType.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(24);
                    global::CppSharp.Parser.AST.AttributedType.__Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private AttributedType(AttributedType.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected AttributedType(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public AttributedType()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(24);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public AttributedType(global::CppSharp.Parser.AST.AttributedType _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(24);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_2((__Instance + __PointerAdjustment), __arg0);
                }

                public global::CppSharp.Parser.AST.QualifiedType Modified
                {
                    get
                    {
                        return global::CppSharp.Parser.AST.QualifiedType.__CreateInstance(((__Internal*) __Instance)->Modified);
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Modified = ReferenceEquals(value, null) ? new global::CppSharp.Parser.AST.QualifiedType.__Internal() : *(global::CppSharp.Parser.AST.QualifiedType.__Internal*) value.__Instance;
                    }
                }

                public global::CppSharp.Parser.AST.QualifiedType Equivalent
                {
                    get
                    {
                        return global::CppSharp.Parser.AST.QualifiedType.__CreateInstance(((__Internal*) __Instance)->Equivalent);
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Equivalent = ReferenceEquals(value, null) ? new global::CppSharp.Parser.AST.QualifiedType.__Internal() : *(global::CppSharp.Parser.AST.QualifiedType.__Internal*) value.__Instance;
                    }
                }
            }

            public unsafe partial class DecayedType : global::CppSharp.Parser.AST.Type, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 32)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.TypeKind Kind;

                    [FieldOffset(4)]
                    public byte IsDependent;

                    [FieldOffset(8)]
                    public global::CppSharp.Parser.AST.QualifiedType.__Internal Decayed;

                    [FieldOffset(16)]
                    public global::CppSharp.Parser.AST.QualifiedType.__Internal Original;

                    [FieldOffset(24)]
                    public global::CppSharp.Parser.AST.QualifiedType.__Internal Pointee;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0DecayedType@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0DecayedType@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public static new DecayedType __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new DecayedType(native.ToPointer(), skipVTables);
                }

                public static DecayedType __CreateInstance(DecayedType.__Internal native, bool skipVTables = false)
                {
                    return new DecayedType(native, skipVTables);
                }

                private static void* __CopyValue(DecayedType.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(32);
                    global::CppSharp.Parser.AST.DecayedType.__Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private DecayedType(DecayedType.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected DecayedType(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public DecayedType()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(32);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public DecayedType(global::CppSharp.Parser.AST.DecayedType _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(32);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_2((__Instance + __PointerAdjustment), __arg0);
                }

                public global::CppSharp.Parser.AST.QualifiedType Decayed
                {
                    get
                    {
                        return global::CppSharp.Parser.AST.QualifiedType.__CreateInstance(((__Internal*) __Instance)->Decayed);
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Decayed = ReferenceEquals(value, null) ? new global::CppSharp.Parser.AST.QualifiedType.__Internal() : *(global::CppSharp.Parser.AST.QualifiedType.__Internal*) value.__Instance;
                    }
                }

                public global::CppSharp.Parser.AST.QualifiedType Original
                {
                    get
                    {
                        return global::CppSharp.Parser.AST.QualifiedType.__CreateInstance(((__Internal*) __Instance)->Original);
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Original = ReferenceEquals(value, null) ? new global::CppSharp.Parser.AST.QualifiedType.__Internal() : *(global::CppSharp.Parser.AST.QualifiedType.__Internal*) value.__Instance;
                    }
                }

                public global::CppSharp.Parser.AST.QualifiedType Pointee
                {
                    get
                    {
                        return global::CppSharp.Parser.AST.QualifiedType.__CreateInstance(((__Internal*) __Instance)->Pointee);
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Pointee = ReferenceEquals(value, null) ? new global::CppSharp.Parser.AST.QualifiedType.__Internal() : *(global::CppSharp.Parser.AST.QualifiedType.__Internal*) value.__Instance;
                    }
                }
            }

            public unsafe partial class TemplateArgument : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 20)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.TemplateArgument.ArgumentKind Kind;

                    [FieldOffset(4)]
                    public global::CppSharp.Parser.AST.QualifiedType.__Internal Type;

                    [FieldOffset(12)]
                    public global::System.IntPtr Declaration;

                    [FieldOffset(16)]
                    public int Integral;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TemplateArgument@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TemplateArgument@AST@CppParser@CppSharp@@QAE@ABU0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public enum ArgumentKind
                {
                    Type = 0,
                    Declaration = 1,
                    NullPtr = 2,
                    Integral = 3,
                    Template = 4,
                    TemplateExpansion = 5,
                    Expression = 6,
                    Pack = 7
                }

                public global::System.IntPtr __Instance { get; protected set; }

                protected int __PointerAdjustment;
                public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, TemplateArgument> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, TemplateArgument>();
                protected void*[] __OriginalVTables;

                protected bool __ownsNativeInstance;

                public static TemplateArgument __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new TemplateArgument(native.ToPointer(), skipVTables);
                }

                public static TemplateArgument __CreateInstance(TemplateArgument.__Internal native, bool skipVTables = false)
                {
                    return new TemplateArgument(native, skipVTables);
                }

                private static void* __CopyValue(TemplateArgument.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(20);
                    *(TemplateArgument.__Internal*) ret = native;
                    return ret.ToPointer();
                }

                private TemplateArgument(TemplateArgument.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected TemplateArgument(void* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public TemplateArgument()
                {
                    __Instance = Marshal.AllocHGlobal(20);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public TemplateArgument(global::CppSharp.Parser.AST.TemplateArgument _0)
                {
                    __Instance = Marshal.AllocHGlobal(20);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    *((TemplateArgument.__Internal*) __Instance) = *((TemplateArgument.__Internal*) _0.__Instance);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                public virtual void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.TemplateArgument __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public global::CppSharp.Parser.AST.TemplateArgument.ArgumentKind Kind
                {
                    get
                    {
                        return ((__Internal*) __Instance)->Kind;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Kind = value;
                    }
                }

                public global::CppSharp.Parser.AST.QualifiedType Type
                {
                    get
                    {
                        return global::CppSharp.Parser.AST.QualifiedType.__CreateInstance(((__Internal*) __Instance)->Type);
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Type = ReferenceEquals(value, null) ? new global::CppSharp.Parser.AST.QualifiedType.__Internal() : *(global::CppSharp.Parser.AST.QualifiedType.__Internal*) value.__Instance;
                    }
                }

                public global::CppSharp.Parser.AST.Declaration Declaration
                {
                    get
                    {
                        global::CppSharp.Parser.AST.Declaration __result0;
                        if (((__Internal*) __Instance)->Declaration == IntPtr.Zero) __result0 = null;
                        else if (global::CppSharp.Parser.AST.Declaration.NativeToManagedMap.ContainsKey(((__Internal*) __Instance)->Declaration))
                            __result0 = (global::CppSharp.Parser.AST.Declaration) global::CppSharp.Parser.AST.Declaration.NativeToManagedMap[((__Internal*) __Instance)->Declaration];
                        else __result0 = global::CppSharp.Parser.AST.Declaration.__CreateInstance(((__Internal*) __Instance)->Declaration);
                        return __result0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Declaration = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public int Integral
                {
                    get
                    {
                        return ((__Internal*) __Instance)->Integral;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Integral = value;
                    }
                }
            }

            public unsafe partial class TemplateSpecializationType : global::CppSharp.Parser.AST.Type, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 32)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.TypeKind Kind;

                    [FieldOffset(4)]
                    public byte IsDependent;

                    [FieldOffset(8)]
                    internal global::Std.Vector.__Internal Arguments;

                    [FieldOffset(20)]
                    public global::System.IntPtr Template;

                    [FieldOffset(24)]
                    public global::CppSharp.Parser.AST.QualifiedType.__Internal Desugared;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TemplateSpecializationType@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TemplateSpecializationType@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1TemplateSpecializationType@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getArguments@TemplateSpecializationType@AST@CppParser@CppSharp@@QAE?AUTemplateArgument@234@I@Z")]
                    internal static extern void GetArguments_0(global::System.IntPtr instance, global::System.IntPtr @return, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addArguments@TemplateSpecializationType@AST@CppParser@CppSharp@@QAEXAAUTemplateArgument@234@@Z")]
                    internal static extern void AddArguments_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearArguments@TemplateSpecializationType@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void ClearArguments_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getArgumentsCount@TemplateSpecializationType@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint GetArgumentsCount_0(global::System.IntPtr instance);
                }

                public static new TemplateSpecializationType __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new TemplateSpecializationType(native.ToPointer(), skipVTables);
                }

                public static TemplateSpecializationType __CreateInstance(TemplateSpecializationType.__Internal native, bool skipVTables = false)
                {
                    return new TemplateSpecializationType(native, skipVTables);
                }

                private static void* __CopyValue(TemplateSpecializationType.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(32);
                    global::CppSharp.Parser.AST.TemplateSpecializationType.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private TemplateSpecializationType(TemplateSpecializationType.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected TemplateSpecializationType(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public TemplateSpecializationType()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(32);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public TemplateSpecializationType(global::CppSharp.Parser.AST.TemplateSpecializationType _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(32);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public override void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Type __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public global::CppSharp.Parser.AST.TemplateArgument GetArguments(uint i)
                {
                    var __ret = new global::CppSharp.Parser.AST.TemplateArgument.__Internal();
                    __Internal.GetArguments_0((__Instance + __PointerAdjustment), new IntPtr(&__ret), i);
                    return global::CppSharp.Parser.AST.TemplateArgument.__CreateInstance(__ret);
                }

                public void AddArguments(global::CppSharp.Parser.AST.TemplateArgument s)
                {
                    if (ReferenceEquals(s, null))
                        throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = s.__Instance;
                    __Internal.AddArguments_0((__Instance + __PointerAdjustment), __arg0);
                }

                public void ClearArguments()
                {
                    __Internal.ClearArguments_0((__Instance + __PointerAdjustment));
                }

                public global::CppSharp.Parser.AST.Template Template
                {
                    get
                    {
                        global::CppSharp.Parser.AST.Template __result0;
                        if (((__Internal*) __Instance)->Template == IntPtr.Zero) __result0 = null;
                        else if (global::CppSharp.Parser.AST.Template.NativeToManagedMap.ContainsKey(((__Internal*) __Instance)->Template))
                            __result0 = (global::CppSharp.Parser.AST.Template) global::CppSharp.Parser.AST.Template.NativeToManagedMap[((__Internal*) __Instance)->Template];
                        else __result0 = global::CppSharp.Parser.AST.Template.__CreateInstance(((__Internal*) __Instance)->Template);
                        return __result0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Template = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public global::CppSharp.Parser.AST.QualifiedType Desugared
                {
                    get
                    {
                        return global::CppSharp.Parser.AST.QualifiedType.__CreateInstance(((__Internal*) __Instance)->Desugared);
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Desugared = ReferenceEquals(value, null) ? new global::CppSharp.Parser.AST.QualifiedType.__Internal() : *(global::CppSharp.Parser.AST.QualifiedType.__Internal*) value.__Instance;
                    }
                }

                public uint ArgumentsCount
                {
                    get
                    {
                        var __ret = __Internal.GetArgumentsCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }
            }

            public unsafe partial class DependentTemplateSpecializationType : global::CppSharp.Parser.AST.Type, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 28)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.TypeKind Kind;

                    [FieldOffset(4)]
                    public byte IsDependent;

                    [FieldOffset(8)]
                    internal global::Std.Vector.__Internal Arguments;

                    [FieldOffset(20)]
                    public global::CppSharp.Parser.AST.QualifiedType.__Internal Desugared;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0DependentTemplateSpecializationType@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0DependentTemplateSpecializationType@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1DependentTemplateSpecializationType@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getArguments@DependentTemplateSpecializationType@AST@CppParser@CppSharp@@QAE?AUTemplateArgument@234@I@Z")]
                    internal static extern void GetArguments_0(global::System.IntPtr instance, global::System.IntPtr @return, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addArguments@DependentTemplateSpecializationType@AST@CppParser@CppSharp@@QAEXAAUTemplateArgument@234@@Z")]
                    internal static extern void AddArguments_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearArguments@DependentTemplateSpecializationType@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void ClearArguments_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getArgumentsCount@DependentTemplateSpecializationType@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint GetArgumentsCount_0(global::System.IntPtr instance);
                }

                public static new DependentTemplateSpecializationType __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new DependentTemplateSpecializationType(native.ToPointer(), skipVTables);
                }

                public static DependentTemplateSpecializationType __CreateInstance(DependentTemplateSpecializationType.__Internal native, bool skipVTables = false)
                {
                    return new DependentTemplateSpecializationType(native, skipVTables);
                }

                private static void* __CopyValue(DependentTemplateSpecializationType.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(28);
                    global::CppSharp.Parser.AST.DependentTemplateSpecializationType.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private DependentTemplateSpecializationType(DependentTemplateSpecializationType.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected DependentTemplateSpecializationType(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public DependentTemplateSpecializationType()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(28);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public DependentTemplateSpecializationType(global::CppSharp.Parser.AST.DependentTemplateSpecializationType _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(28);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public override void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Type __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public global::CppSharp.Parser.AST.TemplateArgument GetArguments(uint i)
                {
                    var __ret = new global::CppSharp.Parser.AST.TemplateArgument.__Internal();
                    __Internal.GetArguments_0((__Instance + __PointerAdjustment), new IntPtr(&__ret), i);
                    return global::CppSharp.Parser.AST.TemplateArgument.__CreateInstance(__ret);
                }

                public void AddArguments(global::CppSharp.Parser.AST.TemplateArgument s)
                {
                    if (ReferenceEquals(s, null))
                        throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = s.__Instance;
                    __Internal.AddArguments_0((__Instance + __PointerAdjustment), __arg0);
                }

                public void ClearArguments()
                {
                    __Internal.ClearArguments_0((__Instance + __PointerAdjustment));
                }

                public global::CppSharp.Parser.AST.QualifiedType Desugared
                {
                    get
                    {
                        return global::CppSharp.Parser.AST.QualifiedType.__CreateInstance(((__Internal*) __Instance)->Desugared);
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Desugared = ReferenceEquals(value, null) ? new global::CppSharp.Parser.AST.QualifiedType.__Internal() : *(global::CppSharp.Parser.AST.QualifiedType.__Internal*) value.__Instance;
                    }
                }

                public uint ArgumentsCount
                {
                    get
                    {
                        var __ret = __Internal.GetArgumentsCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }
            }

            public unsafe partial class TemplateParameterType : global::CppSharp.Parser.AST.Type, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 24)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.TypeKind Kind;

                    [FieldOffset(4)]
                    public byte IsDependent;

                    [FieldOffset(8)]
                    public global::System.IntPtr Parameter;

                    [FieldOffset(12)]
                    public uint Depth;

                    [FieldOffset(16)]
                    public uint Index;

                    [FieldOffset(20)]
                    public byte IsParameterPack;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TemplateParameterType@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TemplateParameterType@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1TemplateParameterType@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);
                }

                public static new TemplateParameterType __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new TemplateParameterType(native.ToPointer(), skipVTables);
                }

                public static TemplateParameterType __CreateInstance(TemplateParameterType.__Internal native, bool skipVTables = false)
                {
                    return new TemplateParameterType(native, skipVTables);
                }

                private static void* __CopyValue(TemplateParameterType.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(24);
                    global::CppSharp.Parser.AST.TemplateParameterType.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private TemplateParameterType(TemplateParameterType.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected TemplateParameterType(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public TemplateParameterType()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(24);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public TemplateParameterType(global::CppSharp.Parser.AST.TemplateParameterType _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(24);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public override void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Type __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public global::CppSharp.Parser.AST.TypeTemplateParameter Parameter
                {
                    get
                    {
                        global::CppSharp.Parser.AST.TypeTemplateParameter __result0;
                        if (((__Internal*) __Instance)->Parameter == IntPtr.Zero) __result0 = null;
                        else if (global::CppSharp.Parser.AST.TypeTemplateParameter.NativeToManagedMap.ContainsKey(((__Internal*) __Instance)->Parameter))
                            __result0 = (global::CppSharp.Parser.AST.TypeTemplateParameter) global::CppSharp.Parser.AST.TypeTemplateParameter.NativeToManagedMap[((__Internal*) __Instance)->Parameter];
                        else __result0 = global::CppSharp.Parser.AST.TypeTemplateParameter.__CreateInstance(((__Internal*) __Instance)->Parameter);
                        return __result0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Parameter = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public uint Depth
                {
                    get
                    {
                        return ((__Internal*) __Instance)->Depth;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Depth = value;
                    }
                }

                public uint Index
                {
                    get
                    {
                        return ((__Internal*) __Instance)->Index;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Index = value;
                    }
                }

                public bool IsParameterPack
                {
                    get
                    {
                        return ((__Internal*) __Instance)->IsParameterPack != 0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->IsParameterPack = (byte) (value ? 1 : 0);
                    }
                }
            }

            public unsafe partial class TemplateParameterSubstitutionType : global::CppSharp.Parser.AST.Type, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 16)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.TypeKind Kind;

                    [FieldOffset(4)]
                    public byte IsDependent;

                    [FieldOffset(8)]
                    public global::CppSharp.Parser.AST.QualifiedType.__Internal Replacement;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TemplateParameterSubstitutionType@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TemplateParameterSubstitutionType@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public static new TemplateParameterSubstitutionType __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new TemplateParameterSubstitutionType(native.ToPointer(), skipVTables);
                }

                public static TemplateParameterSubstitutionType __CreateInstance(TemplateParameterSubstitutionType.__Internal native, bool skipVTables = false)
                {
                    return new TemplateParameterSubstitutionType(native, skipVTables);
                }

                private static void* __CopyValue(TemplateParameterSubstitutionType.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(16);
                    global::CppSharp.Parser.AST.TemplateParameterSubstitutionType.__Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private TemplateParameterSubstitutionType(TemplateParameterSubstitutionType.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected TemplateParameterSubstitutionType(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public TemplateParameterSubstitutionType()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(16);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public TemplateParameterSubstitutionType(global::CppSharp.Parser.AST.TemplateParameterSubstitutionType _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(16);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_2((__Instance + __PointerAdjustment), __arg0);
                }

                public global::CppSharp.Parser.AST.QualifiedType Replacement
                {
                    get
                    {
                        return global::CppSharp.Parser.AST.QualifiedType.__CreateInstance(((__Internal*) __Instance)->Replacement);
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Replacement = ReferenceEquals(value, null) ? new global::CppSharp.Parser.AST.QualifiedType.__Internal() : *(global::CppSharp.Parser.AST.QualifiedType.__Internal*) value.__Instance;
                    }
                }
            }

            public unsafe partial class InjectedClassNameType : global::CppSharp.Parser.AST.Type, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 20)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.TypeKind Kind;

                    [FieldOffset(4)]
                    public byte IsDependent;

                    [FieldOffset(8)]
                    public global::CppSharp.Parser.AST.QualifiedType.__Internal InjectedSpecializationType;

                    [FieldOffset(16)]
                    public global::System.IntPtr Class;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0InjectedClassNameType@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0InjectedClassNameType@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public static new InjectedClassNameType __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new InjectedClassNameType(native.ToPointer(), skipVTables);
                }

                public static InjectedClassNameType __CreateInstance(InjectedClassNameType.__Internal native, bool skipVTables = false)
                {
                    return new InjectedClassNameType(native, skipVTables);
                }

                private static void* __CopyValue(InjectedClassNameType.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(20);
                    global::CppSharp.Parser.AST.InjectedClassNameType.__Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private InjectedClassNameType(InjectedClassNameType.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected InjectedClassNameType(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public InjectedClassNameType()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(20);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public InjectedClassNameType(global::CppSharp.Parser.AST.InjectedClassNameType _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(20);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_2((__Instance + __PointerAdjustment), __arg0);
                }

                public global::CppSharp.Parser.AST.QualifiedType InjectedSpecializationType
                {
                    get
                    {
                        return global::CppSharp.Parser.AST.QualifiedType.__CreateInstance(((__Internal*) __Instance)->InjectedSpecializationType);
                    }

                    set
                    {
                        ((__Internal*) __Instance)->InjectedSpecializationType = ReferenceEquals(value, null) ? new global::CppSharp.Parser.AST.QualifiedType.__Internal() : *(global::CppSharp.Parser.AST.QualifiedType.__Internal*) value.__Instance;
                    }
                }

                public global::CppSharp.Parser.AST.Class Class
                {
                    get
                    {
                        global::CppSharp.Parser.AST.Class __result0;
                        if (((__Internal*) __Instance)->Class == IntPtr.Zero) __result0 = null;
                        else if (global::CppSharp.Parser.AST.Class.NativeToManagedMap.ContainsKey(((__Internal*) __Instance)->Class))
                            __result0 = (global::CppSharp.Parser.AST.Class) global::CppSharp.Parser.AST.Class.NativeToManagedMap[((__Internal*) __Instance)->Class];
                        else __result0 = global::CppSharp.Parser.AST.Class.__CreateInstance(((__Internal*) __Instance)->Class);
                        return __result0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Class = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }
            }

            public unsafe partial class DependentNameType : global::CppSharp.Parser.AST.Type, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 16)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.TypeKind Kind;

                    [FieldOffset(4)]
                    public byte IsDependent;

                    [FieldOffset(8)]
                    public global::CppSharp.Parser.AST.QualifiedType.__Internal Desugared;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0DependentNameType@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0DependentNameType@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public static new DependentNameType __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new DependentNameType(native.ToPointer(), skipVTables);
                }

                public static DependentNameType __CreateInstance(DependentNameType.__Internal native, bool skipVTables = false)
                {
                    return new DependentNameType(native, skipVTables);
                }

                private static void* __CopyValue(DependentNameType.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(16);
                    global::CppSharp.Parser.AST.DependentNameType.__Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private DependentNameType(DependentNameType.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected DependentNameType(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public DependentNameType()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(16);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public DependentNameType(global::CppSharp.Parser.AST.DependentNameType _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(16);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_2((__Instance + __PointerAdjustment), __arg0);
                }

                public global::CppSharp.Parser.AST.QualifiedType Desugared
                {
                    get
                    {
                        return global::CppSharp.Parser.AST.QualifiedType.__CreateInstance(((__Internal*) __Instance)->Desugared);
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Desugared = ReferenceEquals(value, null) ? new global::CppSharp.Parser.AST.QualifiedType.__Internal() : *(global::CppSharp.Parser.AST.QualifiedType.__Internal*) value.__Instance;
                    }
                }
            }

            public unsafe partial class PackExpansionType : global::CppSharp.Parser.AST.Type, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 8)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.TypeKind Kind;

                    [FieldOffset(4)]
                    public byte IsDependent;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0PackExpansionType@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0PackExpansionType@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public static new PackExpansionType __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new PackExpansionType(native.ToPointer(), skipVTables);
                }

                public static PackExpansionType __CreateInstance(PackExpansionType.__Internal native, bool skipVTables = false)
                {
                    return new PackExpansionType(native, skipVTables);
                }

                private static void* __CopyValue(PackExpansionType.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(8);
                    global::CppSharp.Parser.AST.PackExpansionType.__Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private PackExpansionType(PackExpansionType.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected PackExpansionType(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public PackExpansionType()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(8);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public PackExpansionType(global::CppSharp.Parser.AST.PackExpansionType _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(8);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_2((__Instance + __PointerAdjustment), __arg0);
                }
            }

            public unsafe partial class UnaryTransformType : global::CppSharp.Parser.AST.Type, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 24)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.TypeKind Kind;

                    [FieldOffset(4)]
                    public byte IsDependent;

                    [FieldOffset(8)]
                    public global::CppSharp.Parser.AST.QualifiedType.__Internal Desugared;

                    [FieldOffset(16)]
                    public global::CppSharp.Parser.AST.QualifiedType.__Internal BaseType;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0UnaryTransformType@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0UnaryTransformType@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public static new UnaryTransformType __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new UnaryTransformType(native.ToPointer(), skipVTables);
                }

                public static UnaryTransformType __CreateInstance(UnaryTransformType.__Internal native, bool skipVTables = false)
                {
                    return new UnaryTransformType(native, skipVTables);
                }

                private static void* __CopyValue(UnaryTransformType.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(24);
                    global::CppSharp.Parser.AST.UnaryTransformType.__Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private UnaryTransformType(UnaryTransformType.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected UnaryTransformType(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public UnaryTransformType()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(24);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public UnaryTransformType(global::CppSharp.Parser.AST.UnaryTransformType _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(24);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_2((__Instance + __PointerAdjustment), __arg0);
                }

                public global::CppSharp.Parser.AST.QualifiedType Desugared
                {
                    get
                    {
                        return global::CppSharp.Parser.AST.QualifiedType.__CreateInstance(((__Internal*) __Instance)->Desugared);
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Desugared = ReferenceEquals(value, null) ? new global::CppSharp.Parser.AST.QualifiedType.__Internal() : *(global::CppSharp.Parser.AST.QualifiedType.__Internal*) value.__Instance;
                    }
                }

                public global::CppSharp.Parser.AST.QualifiedType BaseType
                {
                    get
                    {
                        return global::CppSharp.Parser.AST.QualifiedType.__CreateInstance(((__Internal*) __Instance)->BaseType);
                    }

                    set
                    {
                        ((__Internal*) __Instance)->BaseType = ReferenceEquals(value, null) ? new global::CppSharp.Parser.AST.QualifiedType.__Internal() : *(global::CppSharp.Parser.AST.QualifiedType.__Internal*) value.__Instance;
                    }
                }
            }

            public unsafe partial class VectorType : global::CppSharp.Parser.AST.Type, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 20)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.TypeKind Kind;

                    [FieldOffset(4)]
                    public byte IsDependent;

                    [FieldOffset(8)]
                    public global::CppSharp.Parser.AST.QualifiedType.__Internal ElementType;

                    [FieldOffset(16)]
                    public uint NumElements;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0VectorType@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0VectorType@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public static new VectorType __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new VectorType(native.ToPointer(), skipVTables);
                }

                public static VectorType __CreateInstance(VectorType.__Internal native, bool skipVTables = false)
                {
                    return new VectorType(native, skipVTables);
                }

                private static void* __CopyValue(VectorType.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(20);
                    global::CppSharp.Parser.AST.VectorType.__Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private VectorType(VectorType.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected VectorType(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public VectorType()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(20);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public VectorType(global::CppSharp.Parser.AST.VectorType _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(20);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_2((__Instance + __PointerAdjustment), __arg0);
                }

                public global::CppSharp.Parser.AST.QualifiedType ElementType
                {
                    get
                    {
                        return global::CppSharp.Parser.AST.QualifiedType.__CreateInstance(((__Internal*) __Instance)->ElementType);
                    }

                    set
                    {
                        ((__Internal*) __Instance)->ElementType = ReferenceEquals(value, null) ? new global::CppSharp.Parser.AST.QualifiedType.__Internal() : *(global::CppSharp.Parser.AST.QualifiedType.__Internal*) value.__Instance;
                    }
                }

                public uint NumElements
                {
                    get
                    {
                        return ((__Internal*) __Instance)->NumElements;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->NumElements = value;
                    }
                }
            }

            public unsafe partial class BuiltinType : global::CppSharp.Parser.AST.Type, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 12)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.TypeKind Kind;

                    [FieldOffset(4)]
                    public byte IsDependent;

                    [FieldOffset(8)]
                    public global::CppSharp.Parser.AST.PrimitiveType Type;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0BuiltinType@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0BuiltinType@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public static new BuiltinType __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new BuiltinType(native.ToPointer(), skipVTables);
                }

                public static BuiltinType __CreateInstance(BuiltinType.__Internal native, bool skipVTables = false)
                {
                    return new BuiltinType(native, skipVTables);
                }

                private static void* __CopyValue(BuiltinType.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(12);
                    global::CppSharp.Parser.AST.BuiltinType.__Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private BuiltinType(BuiltinType.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected BuiltinType(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public BuiltinType()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(12);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public BuiltinType(global::CppSharp.Parser.AST.BuiltinType _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(12);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_2((__Instance + __PointerAdjustment), __arg0);
                }

                public global::CppSharp.Parser.AST.PrimitiveType Type
                {
                    get
                    {
                        return ((__Internal*) __Instance)->Type;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Type = value;
                    }
                }
            }

            public unsafe partial class VTableComponent : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 12)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.VTableComponentKind Kind;

                    [FieldOffset(4)]
                    public uint Offset;

                    [FieldOffset(8)]
                    public global::System.IntPtr Declaration;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0VTableComponent@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0VTableComponent@AST@CppParser@CppSharp@@QAE@ABU0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                protected int __PointerAdjustment;
                public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, VTableComponent> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, VTableComponent>();
                protected void*[] __OriginalVTables;

                protected bool __ownsNativeInstance;

                public static VTableComponent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new VTableComponent(native.ToPointer(), skipVTables);
                }

                public static VTableComponent __CreateInstance(VTableComponent.__Internal native, bool skipVTables = false)
                {
                    return new VTableComponent(native, skipVTables);
                }

                private static void* __CopyValue(VTableComponent.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(12);
                    *(VTableComponent.__Internal*) ret = native;
                    return ret.ToPointer();
                }

                private VTableComponent(VTableComponent.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected VTableComponent(void* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public VTableComponent()
                {
                    __Instance = Marshal.AllocHGlobal(12);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public VTableComponent(global::CppSharp.Parser.AST.VTableComponent _0)
                {
                    __Instance = Marshal.AllocHGlobal(12);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    *((VTableComponent.__Internal*) __Instance) = *((VTableComponent.__Internal*) _0.__Instance);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                public virtual void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.VTableComponent __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public global::CppSharp.Parser.AST.VTableComponentKind Kind
                {
                    get
                    {
                        return ((__Internal*) __Instance)->Kind;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Kind = value;
                    }
                }

                public uint Offset
                {
                    get
                    {
                        return ((__Internal*) __Instance)->Offset;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Offset = value;
                    }
                }

                public global::CppSharp.Parser.AST.Declaration Declaration
                {
                    get
                    {
                        global::CppSharp.Parser.AST.Declaration __result0;
                        if (((__Internal*) __Instance)->Declaration == IntPtr.Zero) __result0 = null;
                        else if (global::CppSharp.Parser.AST.Declaration.NativeToManagedMap.ContainsKey(((__Internal*) __Instance)->Declaration))
                            __result0 = (global::CppSharp.Parser.AST.Declaration) global::CppSharp.Parser.AST.Declaration.NativeToManagedMap[((__Internal*) __Instance)->Declaration];
                        else __result0 = global::CppSharp.Parser.AST.Declaration.__CreateInstance(((__Internal*) __Instance)->Declaration);
                        return __result0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Declaration = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }
            }

            public unsafe partial class VTableLayout : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 12)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    internal global::Std.Vector.__Internal Components;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0VTableLayout@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0VTableLayout@AST@CppParser@CppSharp@@QAE@ABU0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1VTableLayout@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getComponents@VTableLayout@AST@CppParser@CppSharp@@QAE?AUVTableComponent@234@I@Z")]
                    internal static extern void GetComponents_0(global::System.IntPtr instance, global::System.IntPtr @return, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addComponents@VTableLayout@AST@CppParser@CppSharp@@QAEXAAUVTableComponent@234@@Z")]
                    internal static extern void AddComponents_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearComponents@VTableLayout@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void ClearComponents_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getComponentsCount@VTableLayout@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint GetComponentsCount_0(global::System.IntPtr instance);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                protected int __PointerAdjustment;
                public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, VTableLayout> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, VTableLayout>();
                protected void*[] __OriginalVTables;

                protected bool __ownsNativeInstance;

                public static VTableLayout __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new VTableLayout(native.ToPointer(), skipVTables);
                }

                public static VTableLayout __CreateInstance(VTableLayout.__Internal native, bool skipVTables = false)
                {
                    return new VTableLayout(native, skipVTables);
                }

                private static void* __CopyValue(VTableLayout.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(12);
                    global::CppSharp.Parser.AST.VTableLayout.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private VTableLayout(VTableLayout.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected VTableLayout(void* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public VTableLayout()
                {
                    __Instance = Marshal.AllocHGlobal(12);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public VTableLayout(global::CppSharp.Parser.AST.VTableLayout _0)
                {
                    __Instance = Marshal.AllocHGlobal(12);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                public virtual void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.VTableLayout __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public global::CppSharp.Parser.AST.VTableComponent GetComponents(uint i)
                {
                    var __ret = new global::CppSharp.Parser.AST.VTableComponent.__Internal();
                    __Internal.GetComponents_0((__Instance + __PointerAdjustment), new IntPtr(&__ret), i);
                    return global::CppSharp.Parser.AST.VTableComponent.__CreateInstance(__ret);
                }

                public void AddComponents(global::CppSharp.Parser.AST.VTableComponent s)
                {
                    if (ReferenceEquals(s, null))
                        throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = s.__Instance;
                    __Internal.AddComponents_0((__Instance + __PointerAdjustment), __arg0);
                }

                public void ClearComponents()
                {
                    __Internal.ClearComponents_0((__Instance + __PointerAdjustment));
                }

                public uint ComponentsCount
                {
                    get
                    {
                        var __ret = __Internal.GetComponentsCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }
            }

            public unsafe partial class VFTableInfo : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 32)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    public ulong VBTableIndex;

                    [FieldOffset(8)]
                    public uint VFPtrOffset;

                    [FieldOffset(12)]
                    public uint VFPtrFullOffset;

                    [FieldOffset(16)]
                    public global::CppSharp.Parser.AST.VTableLayout.__Internal Layout;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0VFTableInfo@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0VFTableInfo@AST@CppParser@CppSharp@@QAE@ABU0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1VFTableInfo@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                protected int __PointerAdjustment;
                public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, VFTableInfo> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, VFTableInfo>();
                protected void*[] __OriginalVTables;

                protected bool __ownsNativeInstance;

                public static VFTableInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new VFTableInfo(native.ToPointer(), skipVTables);
                }

                public static VFTableInfo __CreateInstance(VFTableInfo.__Internal native, bool skipVTables = false)
                {
                    return new VFTableInfo(native, skipVTables);
                }

                private static void* __CopyValue(VFTableInfo.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(32);
                    global::CppSharp.Parser.AST.VFTableInfo.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private VFTableInfo(VFTableInfo.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected VFTableInfo(void* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public VFTableInfo()
                {
                    __Instance = Marshal.AllocHGlobal(32);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public VFTableInfo(global::CppSharp.Parser.AST.VFTableInfo _0)
                {
                    __Instance = Marshal.AllocHGlobal(32);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                public virtual void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.VFTableInfo __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public ulong VBTableIndex
                {
                    get
                    {
                        return ((__Internal*) __Instance)->VBTableIndex;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->VBTableIndex = value;
                    }
                }

                public uint VFPtrOffset
                {
                    get
                    {
                        return ((__Internal*) __Instance)->VFPtrOffset;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->VFPtrOffset = value;
                    }
                }

                public uint VFPtrFullOffset
                {
                    get
                    {
                        return ((__Internal*) __Instance)->VFPtrFullOffset;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->VFPtrFullOffset = value;
                    }
                }

                public global::CppSharp.Parser.AST.VTableLayout Layout
                {
                    get
                    {
                        return global::CppSharp.Parser.AST.VTableLayout.__CreateInstance(((__Internal*) __Instance)->Layout);
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Layout = ReferenceEquals(value, null) ? new global::CppSharp.Parser.AST.VTableLayout.__Internal() : *(global::CppSharp.Parser.AST.VTableLayout.__Internal*) value.__Instance;
                    }
                }
            }

            public unsafe partial class LayoutField : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 40)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    public uint Offset;

                    [FieldOffset(4)]
                    public global::Std.BasicString.__Internal Name;

                    [FieldOffset(28)]
                    public global::CppSharp.Parser.AST.QualifiedType.__Internal QualifiedType;

                    [FieldOffset(36)]
                    public global::System.IntPtr FieldPtr;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0LayoutField@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0LayoutField@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr other);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1LayoutField@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getName@LayoutField@AST@CppParser@CppSharp@@QAEPBDXZ")]
                    internal static extern global::System.IntPtr Name_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?setName@LayoutField@AST@CppParser@CppSharp@@QAEXPBD@Z")]
                    internal static extern void SetName_0(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string s);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                protected int __PointerAdjustment;
                public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, LayoutField> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, LayoutField>();
                protected void*[] __OriginalVTables;

                protected bool __ownsNativeInstance;

                public static LayoutField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new LayoutField(native.ToPointer(), skipVTables);
                }

                public static LayoutField __CreateInstance(LayoutField.__Internal native, bool skipVTables = false)
                {
                    return new LayoutField(native, skipVTables);
                }

                private static void* __CopyValue(LayoutField.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(40);
                    global::CppSharp.Parser.AST.LayoutField.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private LayoutField(LayoutField.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected LayoutField(void* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public LayoutField()
                {
                    __Instance = Marshal.AllocHGlobal(40);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public LayoutField(global::CppSharp.Parser.AST.LayoutField other)
                {
                    __Instance = Marshal.AllocHGlobal(40);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(other, null))
                        throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = other.__Instance;
                    __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                public virtual void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.LayoutField __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public uint Offset
                {
                    get
                    {
                        return ((__Internal*) __Instance)->Offset;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Offset = value;
                    }
                }

                public global::CppSharp.Parser.AST.QualifiedType QualifiedType
                {
                    get
                    {
                        return global::CppSharp.Parser.AST.QualifiedType.__CreateInstance(((__Internal*) __Instance)->QualifiedType);
                    }

                    set
                    {
                        ((__Internal*) __Instance)->QualifiedType = ReferenceEquals(value, null) ? new global::CppSharp.Parser.AST.QualifiedType.__Internal() : *(global::CppSharp.Parser.AST.QualifiedType.__Internal*) value.__Instance;
                    }
                }

                public global::System.IntPtr FieldPtr
                {
                    get
                    {
                        return ((__Internal*) __Instance)->FieldPtr;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->FieldPtr = (global::System.IntPtr) value;
                    }
                }

                public string Name
                {
                    get
                    {
                        var __ret = __Internal.Name_0((__Instance + __PointerAdjustment));
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var __arg0 = value;
                        __Internal.SetName_0((__Instance + __PointerAdjustment), __arg0);
                    }
                }
            }

            public unsafe partial class LayoutBase : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 8)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    public uint Offset;

                    [FieldOffset(4)]
                    public global::System.IntPtr Class;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0LayoutBase@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0LayoutBase@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr other);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1LayoutBase@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                protected int __PointerAdjustment;
                public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, LayoutBase> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, LayoutBase>();
                protected void*[] __OriginalVTables;

                protected bool __ownsNativeInstance;

                public static LayoutBase __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new LayoutBase(native.ToPointer(), skipVTables);
                }

                public static LayoutBase __CreateInstance(LayoutBase.__Internal native, bool skipVTables = false)
                {
                    return new LayoutBase(native, skipVTables);
                }

                private static void* __CopyValue(LayoutBase.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(8);
                    global::CppSharp.Parser.AST.LayoutBase.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private LayoutBase(LayoutBase.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected LayoutBase(void* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public LayoutBase()
                {
                    __Instance = Marshal.AllocHGlobal(8);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public LayoutBase(global::CppSharp.Parser.AST.LayoutBase other)
                {
                    __Instance = Marshal.AllocHGlobal(8);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(other, null))
                        throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = other.__Instance;
                    __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                public virtual void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.LayoutBase __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public uint Offset
                {
                    get
                    {
                        return ((__Internal*) __Instance)->Offset;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Offset = value;
                    }
                }

                public global::CppSharp.Parser.AST.Class Class
                {
                    get
                    {
                        global::CppSharp.Parser.AST.Class __result0;
                        if (((__Internal*) __Instance)->Class == IntPtr.Zero) __result0 = null;
                        else if (global::CppSharp.Parser.AST.Class.NativeToManagedMap.ContainsKey(((__Internal*) __Instance)->Class))
                            __result0 = (global::CppSharp.Parser.AST.Class) global::CppSharp.Parser.AST.Class.NativeToManagedMap[((__Internal*) __Instance)->Class];
                        else __result0 = global::CppSharp.Parser.AST.Class.__CreateInstance(((__Internal*) __Instance)->Class);
                        return __result0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Class = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }
            }

            public unsafe partial class ClassLayout : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 72)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.CppAbi ABI;

                    [FieldOffset(4)]
                    internal global::Std.Vector.__Internal VFTables;

                    [FieldOffset(16)]
                    public global::CppSharp.Parser.AST.VTableLayout.__Internal Layout;

                    [FieldOffset(28)]
                    public byte HasOwnVFPtr;

                    [FieldOffset(32)]
                    public int VBPtrOffset;

                    [FieldOffset(36)]
                    public int Alignment;

                    [FieldOffset(40)]
                    public int Size;

                    [FieldOffset(44)]
                    public int DataSize;

                    [FieldOffset(48)]
                    internal global::Std.Vector.__Internal Fields;

                    [FieldOffset(60)]
                    internal global::Std.Vector.__Internal Bases;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0ClassLayout@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0ClassLayout@AST@CppParser@CppSharp@@QAE@ABU0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1ClassLayout@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getVFTables@ClassLayout@AST@CppParser@CppSharp@@QAE?AUVFTableInfo@234@I@Z")]
                    internal static extern void GetVFTables_0(global::System.IntPtr instance, global::System.IntPtr @return, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addVFTables@ClassLayout@AST@CppParser@CppSharp@@QAEXAAUVFTableInfo@234@@Z")]
                    internal static extern void AddVFTables_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearVFTables@ClassLayout@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void ClearVFTables_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getFields@ClassLayout@AST@CppParser@CppSharp@@QAE?AVLayoutField@234@I@Z")]
                    internal static extern void GetFields_0(global::System.IntPtr instance, global::System.IntPtr @return, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addFields@ClassLayout@AST@CppParser@CppSharp@@QAEXAAVLayoutField@234@@Z")]
                    internal static extern void AddFields_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearFields@ClassLayout@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void ClearFields_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getBases@ClassLayout@AST@CppParser@CppSharp@@QAE?AVLayoutBase@234@I@Z")]
                    internal static extern void GetBases_0(global::System.IntPtr instance, global::System.IntPtr @return, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addBases@ClassLayout@AST@CppParser@CppSharp@@QAEXAAVLayoutBase@234@@Z")]
                    internal static extern void AddBases_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearBases@ClassLayout@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void ClearBases_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getVFTablesCount@ClassLayout@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint GetVFTablesCount_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getFieldsCount@ClassLayout@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint GetFieldsCount_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getBasesCount@ClassLayout@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint GetBasesCount_0(global::System.IntPtr instance);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                protected int __PointerAdjustment;
                public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, ClassLayout> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, ClassLayout>();
                protected void*[] __OriginalVTables;

                protected bool __ownsNativeInstance;

                public static ClassLayout __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new ClassLayout(native.ToPointer(), skipVTables);
                }

                public static ClassLayout __CreateInstance(ClassLayout.__Internal native, bool skipVTables = false)
                {
                    return new ClassLayout(native, skipVTables);
                }

                private static void* __CopyValue(ClassLayout.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(72);
                    global::CppSharp.Parser.AST.ClassLayout.__Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private ClassLayout(ClassLayout.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected ClassLayout(void* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public ClassLayout()
                {
                    __Instance = Marshal.AllocHGlobal(72);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public ClassLayout(global::CppSharp.Parser.AST.ClassLayout _0)
                {
                    __Instance = Marshal.AllocHGlobal(72);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_2((__Instance + __PointerAdjustment), __arg0);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                public virtual void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.ClassLayout __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public global::CppSharp.Parser.AST.VFTableInfo GetVFTables(uint i)
                {
                    var __ret = new global::CppSharp.Parser.AST.VFTableInfo.__Internal();
                    __Internal.GetVFTables_0((__Instance + __PointerAdjustment), new IntPtr(&__ret), i);
                    return global::CppSharp.Parser.AST.VFTableInfo.__CreateInstance(__ret);
                }

                public void AddVFTables(global::CppSharp.Parser.AST.VFTableInfo s)
                {
                    if (ReferenceEquals(s, null))
                        throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = s.__Instance;
                    __Internal.AddVFTables_0((__Instance + __PointerAdjustment), __arg0);
                }

                public void ClearVFTables()
                {
                    __Internal.ClearVFTables_0((__Instance + __PointerAdjustment));
                }

                public global::CppSharp.Parser.AST.LayoutField GetFields(uint i)
                {
                    var __ret = new global::CppSharp.Parser.AST.LayoutField.__Internal();
                    __Internal.GetFields_0((__Instance + __PointerAdjustment), new IntPtr(&__ret), i);
                    return global::CppSharp.Parser.AST.LayoutField.__CreateInstance(__ret);
                }

                public void AddFields(global::CppSharp.Parser.AST.LayoutField s)
                {
                    if (ReferenceEquals(s, null))
                        throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = s.__Instance;
                    __Internal.AddFields_0((__Instance + __PointerAdjustment), __arg0);
                }

                public void ClearFields()
                {
                    __Internal.ClearFields_0((__Instance + __PointerAdjustment));
                }

                public global::CppSharp.Parser.AST.LayoutBase GetBases(uint i)
                {
                    var __ret = new global::CppSharp.Parser.AST.LayoutBase.__Internal();
                    __Internal.GetBases_0((__Instance + __PointerAdjustment), new IntPtr(&__ret), i);
                    return global::CppSharp.Parser.AST.LayoutBase.__CreateInstance(__ret);
                }

                public void AddBases(global::CppSharp.Parser.AST.LayoutBase s)
                {
                    if (ReferenceEquals(s, null))
                        throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = s.__Instance;
                    __Internal.AddBases_0((__Instance + __PointerAdjustment), __arg0);
                }

                public void ClearBases()
                {
                    __Internal.ClearBases_0((__Instance + __PointerAdjustment));
                }

                public global::CppSharp.Parser.AST.CppAbi ABI
                {
                    get
                    {
                        return ((__Internal*) __Instance)->ABI;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->ABI = value;
                    }
                }

                public global::CppSharp.Parser.AST.VTableLayout Layout
                {
                    get
                    {
                        return global::CppSharp.Parser.AST.VTableLayout.__CreateInstance(((__Internal*) __Instance)->Layout);
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Layout = ReferenceEquals(value, null) ? new global::CppSharp.Parser.AST.VTableLayout.__Internal() : *(global::CppSharp.Parser.AST.VTableLayout.__Internal*) value.__Instance;
                    }
                }

                public bool HasOwnVFPtr
                {
                    get
                    {
                        return ((__Internal*) __Instance)->HasOwnVFPtr != 0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->HasOwnVFPtr = (byte) (value ? 1 : 0);
                    }
                }

                public int VBPtrOffset
                {
                    get
                    {
                        return ((__Internal*) __Instance)->VBPtrOffset;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->VBPtrOffset = value;
                    }
                }

                public int Alignment
                {
                    get
                    {
                        return ((__Internal*) __Instance)->Alignment;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Alignment = value;
                    }
                }

                public int Size
                {
                    get
                    {
                        return ((__Internal*) __Instance)->Size;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Size = value;
                    }
                }

                public int DataSize
                {
                    get
                    {
                        return ((__Internal*) __Instance)->DataSize;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->DataSize = value;
                    }
                }

                public uint VFTablesCount
                {
                    get
                    {
                        var __ret = __Internal.GetVFTablesCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }

                public uint FieldsCount
                {
                    get
                    {
                        var __ret = __Internal.GetFieldsCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }

                public uint BasesCount
                {
                    get
                    {
                        var __ret = __Internal.GetBasesCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }
            }

            public unsafe partial class Declaration : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 128)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public global::CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public global::CppSharp.Parser.SourceLocation.__Internal Location;

                    [FieldOffset(16)]
                    public int LineNumberStart;

                    [FieldOffset(20)]
                    public int LineNumberEnd;

                    [FieldOffset(24)]
                    public global::Std.BasicString.__Internal Name;

                    [FieldOffset(48)]
                    public global::Std.BasicString.__Internal USR;

                    [FieldOffset(72)]
                    public global::Std.BasicString.__Internal DebugText;

                    [FieldOffset(96)]
                    public byte IsIncomplete;

                    [FieldOffset(97)]
                    public byte IsDependent;

                    [FieldOffset(98)]
                    public byte IsImplicit;

                    [FieldOffset(100)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(104)]
                    public uint DefinitionOrder;

                    [FieldOffset(108)]
                    internal global::Std.Vector.__Internal PreprocessedEntities;

                    [FieldOffset(120)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(124)]
                    public global::System.IntPtr Comment;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Declaration@AST@CppParser@CppSharp@@QAE@W4DeclarationKind@123@@Z")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance, global::CppSharp.Parser.AST.DeclarationKind kind);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Declaration@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1Declaration@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getPreprocessedEntities@Declaration@AST@CppParser@CppSharp@@QAEPAVPreprocessedEntity@234@I@Z")]
                    internal static extern global::System.IntPtr GetPreprocessedEntities_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addPreprocessedEntities@Declaration@AST@CppParser@CppSharp@@QAEXAAPAVPreprocessedEntity@234@@Z")]
                    internal static extern void AddPreprocessedEntities_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearPreprocessedEntities@Declaration@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void ClearPreprocessedEntities_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getName@Declaration@AST@CppParser@CppSharp@@QAEPBDXZ")]
                    internal static extern global::System.IntPtr Name_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?setName@Declaration@AST@CppParser@CppSharp@@QAEXPBD@Z")]
                    internal static extern void SetName_0(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getUSR@Declaration@AST@CppParser@CppSharp@@QAEPBDXZ")]
                    internal static extern global::System.IntPtr USR_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?setUSR@Declaration@AST@CppParser@CppSharp@@QAEXPBD@Z")]
                    internal static extern void SetUSR_0(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getDebugText@Declaration@AST@CppParser@CppSharp@@QAEPBDXZ")]
                    internal static extern global::System.IntPtr DebugText_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?setDebugText@Declaration@AST@CppParser@CppSharp@@QAEXPBD@Z")]
                    internal static extern void SetDebugText_0(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getPreprocessedEntitiesCount@Declaration@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint GetPreprocessedEntitiesCount_0(global::System.IntPtr instance);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                protected int __PointerAdjustment;
                public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Declaration> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Declaration>();
                protected void*[] __OriginalVTables;

                protected bool __ownsNativeInstance;

                public static Declaration __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new Declaration(native.ToPointer(), skipVTables);
                }

                public static Declaration __CreateInstance(Declaration.__Internal native, bool skipVTables = false)
                {
                    return new Declaration(native, skipVTables);
                }

                private static void* __CopyValue(Declaration.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(128);
                    global::CppSharp.Parser.AST.Declaration.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private Declaration(Declaration.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected Declaration(void* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public Declaration(global::CppSharp.Parser.AST.DeclarationKind kind)
                {
                    __Instance = Marshal.AllocHGlobal(128);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var __arg0 = kind;
                    __Internal.ctor_0((__Instance + __PointerAdjustment), __arg0);
                }

                public Declaration(global::CppSharp.Parser.AST.Declaration _0)
                {
                    __Instance = Marshal.AllocHGlobal(128);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                public virtual void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Declaration __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public global::CppSharp.Parser.AST.PreprocessedEntity GetPreprocessedEntities(uint i)
                {
                    var __ret = __Internal.GetPreprocessedEntities_0((__Instance + __PointerAdjustment), i);
                    global::CppSharp.Parser.AST.PreprocessedEntity __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (global::CppSharp.Parser.AST.PreprocessedEntity.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (global::CppSharp.Parser.AST.PreprocessedEntity) global::CppSharp.Parser.AST.PreprocessedEntity.NativeToManagedMap[__ret];
                    else __result0 = global::CppSharp.Parser.AST.PreprocessedEntity.__CreateInstance(__ret);
                    return __result0;
                }

                public void AddPreprocessedEntities(global::CppSharp.Parser.AST.PreprocessedEntity s)
                {
                    if (ReferenceEquals(s, null))
                        throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = s.__Instance;
                    __Internal.AddPreprocessedEntities_0((__Instance + __PointerAdjustment), __arg0);
                }

                public void ClearPreprocessedEntities()
                {
                    __Internal.ClearPreprocessedEntities_0((__Instance + __PointerAdjustment));
                }

                public static implicit operator global::CppSharp.Parser.AST.Declaration(global::CppSharp.Parser.AST.DeclarationKind kind)
                {
                    return new global::CppSharp.Parser.AST.Declaration(kind);
                }

                public global::CppSharp.Parser.AST.DeclarationKind Kind
                {
                    get
                    {
                        return ((__Internal*) __Instance)->Kind;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Kind = value;
                    }
                }

                public global::CppSharp.Parser.AST.AccessSpecifier Access
                {
                    get
                    {
                        return ((__Internal*) __Instance)->Access;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Access = value;
                    }
                }

                public global::CppSharp.Parser.AST.DeclarationContext Namespace
                {
                    get
                    {
                        global::CppSharp.Parser.AST.DeclarationContext __result0;
                        if (((__Internal*) __Instance)->_Namespace == IntPtr.Zero) __result0 = null;
                        else if (global::CppSharp.Parser.AST.DeclarationContext.NativeToManagedMap.ContainsKey(((__Internal*) __Instance)->_Namespace))
                            __result0 = (global::CppSharp.Parser.AST.DeclarationContext) global::CppSharp.Parser.AST.DeclarationContext.NativeToManagedMap[((__Internal*) __Instance)->_Namespace];
                        else __result0 = global::CppSharp.Parser.AST.DeclarationContext.__CreateInstance(((__Internal*) __Instance)->_Namespace);
                        return __result0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->_Namespace = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public global::CppSharp.Parser.SourceLocation Location
                {
                    get
                    {
                        return global::CppSharp.Parser.SourceLocation.__CreateInstance(((__Internal*) __Instance)->Location);
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Location = value.__Instance;
                    }
                }

                public int LineNumberStart
                {
                    get
                    {
                        return ((__Internal*) __Instance)->LineNumberStart;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->LineNumberStart = value;
                    }
                }

                public int LineNumberEnd
                {
                    get
                    {
                        return ((__Internal*) __Instance)->LineNumberEnd;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->LineNumberEnd = value;
                    }
                }

                public bool IsIncomplete
                {
                    get
                    {
                        return ((__Internal*) __Instance)->IsIncomplete != 0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->IsIncomplete = (byte) (value ? 1 : 0);
                    }
                }

                public bool IsDependent
                {
                    get
                    {
                        return ((__Internal*) __Instance)->IsDependent != 0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->IsDependent = (byte) (value ? 1 : 0);
                    }
                }

                public bool IsImplicit
                {
                    get
                    {
                        return ((__Internal*) __Instance)->IsImplicit != 0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->IsImplicit = (byte) (value ? 1 : 0);
                    }
                }

                public global::CppSharp.Parser.AST.Declaration CompleteDeclaration
                {
                    get
                    {
                        global::CppSharp.Parser.AST.Declaration __result0;
                        if (((__Internal*) __Instance)->CompleteDeclaration == IntPtr.Zero) __result0 = null;
                        else if (global::CppSharp.Parser.AST.Declaration.NativeToManagedMap.ContainsKey(((__Internal*) __Instance)->CompleteDeclaration))
                            __result0 = (global::CppSharp.Parser.AST.Declaration) global::CppSharp.Parser.AST.Declaration.NativeToManagedMap[((__Internal*) __Instance)->CompleteDeclaration];
                        else __result0 = global::CppSharp.Parser.AST.Declaration.__CreateInstance(((__Internal*) __Instance)->CompleteDeclaration);
                        return __result0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->CompleteDeclaration = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public uint DefinitionOrder
                {
                    get
                    {
                        return ((__Internal*) __Instance)->DefinitionOrder;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->DefinitionOrder = value;
                    }
                }

                public global::System.IntPtr OriginalPtr
                {
                    get
                    {
                        return ((__Internal*) __Instance)->OriginalPtr;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->OriginalPtr = (global::System.IntPtr) value;
                    }
                }

                public global::CppSharp.Parser.AST.RawComment Comment
                {
                    get
                    {
                        global::CppSharp.Parser.AST.RawComment __result0;
                        if (((__Internal*) __Instance)->Comment == IntPtr.Zero) __result0 = null;
                        else if (global::CppSharp.Parser.AST.RawComment.NativeToManagedMap.ContainsKey(((__Internal*) __Instance)->Comment))
                            __result0 = (global::CppSharp.Parser.AST.RawComment) global::CppSharp.Parser.AST.RawComment.NativeToManagedMap[((__Internal*) __Instance)->Comment];
                        else __result0 = global::CppSharp.Parser.AST.RawComment.__CreateInstance(((__Internal*) __Instance)->Comment);
                        return __result0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Comment = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public string Name
                {
                    get
                    {
                        var __ret = __Internal.Name_0((__Instance + __PointerAdjustment));
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var __arg0 = value;
                        __Internal.SetName_0((__Instance + __PointerAdjustment), __arg0);
                    }
                }

                public string USR
                {
                    get
                    {
                        var __ret = __Internal.USR_0((__Instance + __PointerAdjustment));
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var __arg0 = value;
                        __Internal.SetUSR_0((__Instance + __PointerAdjustment), __arg0);
                    }
                }

                public string DebugText
                {
                    get
                    {
                        var __ret = __Internal.DebugText_0((__Instance + __PointerAdjustment));
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var __arg0 = value;
                        __Internal.SetDebugText_0((__Instance + __PointerAdjustment), __arg0);
                    }
                }

                public uint PreprocessedEntitiesCount
                {
                    get
                    {
                        var __ret = __Internal.GetPreprocessedEntitiesCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }
            }

            public unsafe partial class DeclarationContext : global::CppSharp.Parser.AST.Declaration, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 248)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public global::CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public global::CppSharp.Parser.SourceLocation.__Internal Location;

                    [FieldOffset(16)]
                    public int LineNumberStart;

                    [FieldOffset(20)]
                    public int LineNumberEnd;

                    [FieldOffset(24)]
                    public global::Std.BasicString.__Internal Name;

                    [FieldOffset(48)]
                    public global::Std.BasicString.__Internal USR;

                    [FieldOffset(72)]
                    public global::Std.BasicString.__Internal DebugText;

                    [FieldOffset(96)]
                    public byte IsIncomplete;

                    [FieldOffset(97)]
                    public byte IsDependent;

                    [FieldOffset(98)]
                    public byte IsImplicit;

                    [FieldOffset(100)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(104)]
                    public uint DefinitionOrder;

                    [FieldOffset(108)]
                    internal global::Std.Vector.__Internal PreprocessedEntities;

                    [FieldOffset(120)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(124)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(128)]
                    internal global::Std.Vector.__Internal Namespaces;

                    [FieldOffset(140)]
                    internal global::Std.Vector.__Internal Enums;

                    [FieldOffset(152)]
                    internal global::Std.Vector.__Internal Functions;

                    [FieldOffset(164)]
                    internal global::Std.Vector.__Internal Classes;

                    [FieldOffset(176)]
                    internal global::Std.Vector.__Internal Templates;

                    [FieldOffset(188)]
                    internal global::Std.Vector.__Internal Typedefs;

                    [FieldOffset(200)]
                    internal global::Std.Vector.__Internal TypeAliases;

                    [FieldOffset(212)]
                    internal global::Std.Vector.__Internal Variables;

                    [FieldOffset(224)]
                    internal global::Std.Vector.__Internal Friends;

                    [FieldOffset(236)]
                    internal global::Std.Map.__Internal Anonymous;

                    [FieldOffset(244)]
                    public byte IsAnonymous;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0DeclarationContext@AST@CppParser@CppSharp@@QAE@W4DeclarationKind@123@@Z")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance, global::CppSharp.Parser.AST.DeclarationKind kind);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0DeclarationContext@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1DeclarationContext@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getNamespaces@DeclarationContext@AST@CppParser@CppSharp@@QAEPAVNamespace@234@I@Z")]
                    internal static extern global::System.IntPtr GetNamespaces_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addNamespaces@DeclarationContext@AST@CppParser@CppSharp@@QAEXAAPAVNamespace@234@@Z")]
                    internal static extern void AddNamespaces_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearNamespaces@DeclarationContext@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void ClearNamespaces_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getEnums@DeclarationContext@AST@CppParser@CppSharp@@QAEPAVEnumeration@234@I@Z")]
                    internal static extern global::System.IntPtr GetEnums_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addEnums@DeclarationContext@AST@CppParser@CppSharp@@QAEXAAPAVEnumeration@234@@Z")]
                    internal static extern void AddEnums_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearEnums@DeclarationContext@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void ClearEnums_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getFunctions@DeclarationContext@AST@CppParser@CppSharp@@QAEPAVFunction@234@I@Z")]
                    internal static extern global::System.IntPtr GetFunctions_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addFunctions@DeclarationContext@AST@CppParser@CppSharp@@QAEXAAPAVFunction@234@@Z")]
                    internal static extern void AddFunctions_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearFunctions@DeclarationContext@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void ClearFunctions_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getClasses@DeclarationContext@AST@CppParser@CppSharp@@QAEPAVClass@234@I@Z")]
                    internal static extern global::System.IntPtr GetClasses_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addClasses@DeclarationContext@AST@CppParser@CppSharp@@QAEXAAPAVClass@234@@Z")]
                    internal static extern void AddClasses_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearClasses@DeclarationContext@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void ClearClasses_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getTemplates@DeclarationContext@AST@CppParser@CppSharp@@QAEPAVTemplate@234@I@Z")]
                    internal static extern global::System.IntPtr GetTemplates_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addTemplates@DeclarationContext@AST@CppParser@CppSharp@@QAEXAAPAVTemplate@234@@Z")]
                    internal static extern void AddTemplates_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearTemplates@DeclarationContext@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void ClearTemplates_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getTypedefs@DeclarationContext@AST@CppParser@CppSharp@@QAEPAVTypedefDecl@234@I@Z")]
                    internal static extern global::System.IntPtr GetTypedefs_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addTypedefs@DeclarationContext@AST@CppParser@CppSharp@@QAEXAAPAVTypedefDecl@234@@Z")]
                    internal static extern void AddTypedefs_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearTypedefs@DeclarationContext@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void ClearTypedefs_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getTypeAliases@DeclarationContext@AST@CppParser@CppSharp@@QAEPAVTypeAlias@234@I@Z")]
                    internal static extern global::System.IntPtr GetTypeAliases_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addTypeAliases@DeclarationContext@AST@CppParser@CppSharp@@QAEXAAPAVTypeAlias@234@@Z")]
                    internal static extern void AddTypeAliases_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearTypeAliases@DeclarationContext@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void ClearTypeAliases_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getVariables@DeclarationContext@AST@CppParser@CppSharp@@QAEPAVVariable@234@I@Z")]
                    internal static extern global::System.IntPtr GetVariables_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addVariables@DeclarationContext@AST@CppParser@CppSharp@@QAEXAAPAVVariable@234@@Z")]
                    internal static extern void AddVariables_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearVariables@DeclarationContext@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void ClearVariables_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getFriends@DeclarationContext@AST@CppParser@CppSharp@@QAEPAVFriend@234@I@Z")]
                    internal static extern global::System.IntPtr GetFriends_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addFriends@DeclarationContext@AST@CppParser@CppSharp@@QAEXAAPAVFriend@234@@Z")]
                    internal static extern void AddFriends_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearFriends@DeclarationContext@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void ClearFriends_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getNamespacesCount@DeclarationContext@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint GetNamespacesCount_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getEnumsCount@DeclarationContext@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint GetEnumsCount_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getFunctionsCount@DeclarationContext@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint GetFunctionsCount_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getClassesCount@DeclarationContext@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint GetClassesCount_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getTemplatesCount@DeclarationContext@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint GetTemplatesCount_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getTypedefsCount@DeclarationContext@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint GetTypedefsCount_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getTypeAliasesCount@DeclarationContext@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint GetTypeAliasesCount_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getVariablesCount@DeclarationContext@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint GetVariablesCount_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getFriendsCount@DeclarationContext@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint GetFriendsCount_0(global::System.IntPtr instance);
                }

                public static new DeclarationContext __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new DeclarationContext(native.ToPointer(), skipVTables);
                }

                public static DeclarationContext __CreateInstance(DeclarationContext.__Internal native, bool skipVTables = false)
                {
                    return new DeclarationContext(native, skipVTables);
                }

                private static void* __CopyValue(DeclarationContext.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(248);
                    global::CppSharp.Parser.AST.DeclarationContext.__Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private DeclarationContext(DeclarationContext.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected DeclarationContext(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public DeclarationContext(global::CppSharp.Parser.AST.DeclarationKind kind)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(248);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var __arg0 = kind;
                    __Internal.ctor_0((__Instance + __PointerAdjustment), __arg0);
                }

                public DeclarationContext(global::CppSharp.Parser.AST.DeclarationContext _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(248);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_2((__Instance + __PointerAdjustment), __arg0);
                }

                public override void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Declaration __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public global::CppSharp.Parser.AST.Namespace GetNamespaces(uint i)
                {
                    var __ret = __Internal.GetNamespaces_0((__Instance + __PointerAdjustment), i);
                    global::CppSharp.Parser.AST.Namespace __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (global::CppSharp.Parser.AST.Namespace.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (global::CppSharp.Parser.AST.Namespace) global::CppSharp.Parser.AST.Namespace.NativeToManagedMap[__ret];
                    else __result0 = global::CppSharp.Parser.AST.Namespace.__CreateInstance(__ret);
                    return __result0;
                }

                public void AddNamespaces(global::CppSharp.Parser.AST.Namespace s)
                {
                    if (ReferenceEquals(s, null))
                        throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = s.__Instance;
                    __Internal.AddNamespaces_0((__Instance + __PointerAdjustment), __arg0);
                }

                public void ClearNamespaces()
                {
                    __Internal.ClearNamespaces_0((__Instance + __PointerAdjustment));
                }

                public global::CppSharp.Parser.AST.Enumeration GetEnums(uint i)
                {
                    var __ret = __Internal.GetEnums_0((__Instance + __PointerAdjustment), i);
                    global::CppSharp.Parser.AST.Enumeration __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (global::CppSharp.Parser.AST.Enumeration.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (global::CppSharp.Parser.AST.Enumeration) global::CppSharp.Parser.AST.Enumeration.NativeToManagedMap[__ret];
                    else __result0 = global::CppSharp.Parser.AST.Enumeration.__CreateInstance(__ret);
                    return __result0;
                }

                public void AddEnums(global::CppSharp.Parser.AST.Enumeration s)
                {
                    if (ReferenceEquals(s, null))
                        throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = s.__Instance;
                    __Internal.AddEnums_0((__Instance + __PointerAdjustment), __arg0);
                }

                public void ClearEnums()
                {
                    __Internal.ClearEnums_0((__Instance + __PointerAdjustment));
                }

                public global::CppSharp.Parser.AST.Function GetFunctions(uint i)
                {
                    var __ret = __Internal.GetFunctions_0((__Instance + __PointerAdjustment), i);
                    global::CppSharp.Parser.AST.Function __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (global::CppSharp.Parser.AST.Function.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (global::CppSharp.Parser.AST.Function) global::CppSharp.Parser.AST.Function.NativeToManagedMap[__ret];
                    else __result0 = global::CppSharp.Parser.AST.Function.__CreateInstance(__ret);
                    return __result0;
                }

                public void AddFunctions(global::CppSharp.Parser.AST.Function s)
                {
                    if (ReferenceEquals(s, null))
                        throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = s.__Instance;
                    __Internal.AddFunctions_0((__Instance + __PointerAdjustment), __arg0);
                }

                public void ClearFunctions()
                {
                    __Internal.ClearFunctions_0((__Instance + __PointerAdjustment));
                }

                public global::CppSharp.Parser.AST.Class GetClasses(uint i)
                {
                    var __ret = __Internal.GetClasses_0((__Instance + __PointerAdjustment), i);
                    global::CppSharp.Parser.AST.Class __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (global::CppSharp.Parser.AST.Class.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (global::CppSharp.Parser.AST.Class) global::CppSharp.Parser.AST.Class.NativeToManagedMap[__ret];
                    else __result0 = global::CppSharp.Parser.AST.Class.__CreateInstance(__ret);
                    return __result0;
                }

                public void AddClasses(global::CppSharp.Parser.AST.Class s)
                {
                    if (ReferenceEquals(s, null))
                        throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = s.__Instance;
                    __Internal.AddClasses_0((__Instance + __PointerAdjustment), __arg0);
                }

                public void ClearClasses()
                {
                    __Internal.ClearClasses_0((__Instance + __PointerAdjustment));
                }

                public global::CppSharp.Parser.AST.Template GetTemplates(uint i)
                {
                    var __ret = __Internal.GetTemplates_0((__Instance + __PointerAdjustment), i);
                    global::CppSharp.Parser.AST.Template __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (global::CppSharp.Parser.AST.Template.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (global::CppSharp.Parser.AST.Template) global::CppSharp.Parser.AST.Template.NativeToManagedMap[__ret];
                    else __result0 = global::CppSharp.Parser.AST.Template.__CreateInstance(__ret);
                    return __result0;
                }

                public void AddTemplates(global::CppSharp.Parser.AST.Template s)
                {
                    if (ReferenceEquals(s, null))
                        throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = s.__Instance;
                    __Internal.AddTemplates_0((__Instance + __PointerAdjustment), __arg0);
                }

                public void ClearTemplates()
                {
                    __Internal.ClearTemplates_0((__Instance + __PointerAdjustment));
                }

                public global::CppSharp.Parser.AST.TypedefDecl GetTypedefs(uint i)
                {
                    var __ret = __Internal.GetTypedefs_0((__Instance + __PointerAdjustment), i);
                    global::CppSharp.Parser.AST.TypedefDecl __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (global::CppSharp.Parser.AST.TypedefDecl.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (global::CppSharp.Parser.AST.TypedefDecl) global::CppSharp.Parser.AST.TypedefDecl.NativeToManagedMap[__ret];
                    else __result0 = global::CppSharp.Parser.AST.TypedefDecl.__CreateInstance(__ret);
                    return __result0;
                }

                public void AddTypedefs(global::CppSharp.Parser.AST.TypedefDecl s)
                {
                    if (ReferenceEquals(s, null))
                        throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = s.__Instance;
                    __Internal.AddTypedefs_0((__Instance + __PointerAdjustment), __arg0);
                }

                public void ClearTypedefs()
                {
                    __Internal.ClearTypedefs_0((__Instance + __PointerAdjustment));
                }

                public global::CppSharp.Parser.AST.TypeAlias GetTypeAliases(uint i)
                {
                    var __ret = __Internal.GetTypeAliases_0((__Instance + __PointerAdjustment), i);
                    global::CppSharp.Parser.AST.TypeAlias __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (global::CppSharp.Parser.AST.TypeAlias.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (global::CppSharp.Parser.AST.TypeAlias) global::CppSharp.Parser.AST.TypeAlias.NativeToManagedMap[__ret];
                    else __result0 = global::CppSharp.Parser.AST.TypeAlias.__CreateInstance(__ret);
                    return __result0;
                }

                public void AddTypeAliases(global::CppSharp.Parser.AST.TypeAlias s)
                {
                    if (ReferenceEquals(s, null))
                        throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = s.__Instance;
                    __Internal.AddTypeAliases_0((__Instance + __PointerAdjustment), __arg0);
                }

                public void ClearTypeAliases()
                {
                    __Internal.ClearTypeAliases_0((__Instance + __PointerAdjustment));
                }

                public global::CppSharp.Parser.AST.Variable GetVariables(uint i)
                {
                    var __ret = __Internal.GetVariables_0((__Instance + __PointerAdjustment), i);
                    global::CppSharp.Parser.AST.Variable __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (global::CppSharp.Parser.AST.Variable.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (global::CppSharp.Parser.AST.Variable) global::CppSharp.Parser.AST.Variable.NativeToManagedMap[__ret];
                    else __result0 = global::CppSharp.Parser.AST.Variable.__CreateInstance(__ret);
                    return __result0;
                }

                public void AddVariables(global::CppSharp.Parser.AST.Variable s)
                {
                    if (ReferenceEquals(s, null))
                        throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = s.__Instance;
                    __Internal.AddVariables_0((__Instance + __PointerAdjustment), __arg0);
                }

                public void ClearVariables()
                {
                    __Internal.ClearVariables_0((__Instance + __PointerAdjustment));
                }

                public global::CppSharp.Parser.AST.Friend GetFriends(uint i)
                {
                    var __ret = __Internal.GetFriends_0((__Instance + __PointerAdjustment), i);
                    global::CppSharp.Parser.AST.Friend __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (global::CppSharp.Parser.AST.Friend.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (global::CppSharp.Parser.AST.Friend) global::CppSharp.Parser.AST.Friend.NativeToManagedMap[__ret];
                    else __result0 = global::CppSharp.Parser.AST.Friend.__CreateInstance(__ret);
                    return __result0;
                }

                public void AddFriends(global::CppSharp.Parser.AST.Friend s)
                {
                    if (ReferenceEquals(s, null))
                        throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = s.__Instance;
                    __Internal.AddFriends_0((__Instance + __PointerAdjustment), __arg0);
                }

                public void ClearFriends()
                {
                    __Internal.ClearFriends_0((__Instance + __PointerAdjustment));
                }

                public static implicit operator global::CppSharp.Parser.AST.DeclarationContext(global::CppSharp.Parser.AST.DeclarationKind kind)
                {
                    return new global::CppSharp.Parser.AST.DeclarationContext(kind);
                }

                public bool IsAnonymous
                {
                    get
                    {
                        return ((__Internal*) __Instance)->IsAnonymous != 0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->IsAnonymous = (byte) (value ? 1 : 0);
                    }
                }

                public uint NamespacesCount
                {
                    get
                    {
                        var __ret = __Internal.GetNamespacesCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }

                public uint EnumsCount
                {
                    get
                    {
                        var __ret = __Internal.GetEnumsCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }

                public uint FunctionsCount
                {
                    get
                    {
                        var __ret = __Internal.GetFunctionsCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }

                public uint ClassesCount
                {
                    get
                    {
                        var __ret = __Internal.GetClassesCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }

                public uint TemplatesCount
                {
                    get
                    {
                        var __ret = __Internal.GetTemplatesCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }

                public uint TypedefsCount
                {
                    get
                    {
                        var __ret = __Internal.GetTypedefsCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }

                public uint TypeAliasesCount
                {
                    get
                    {
                        var __ret = __Internal.GetTypeAliasesCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }

                public uint VariablesCount
                {
                    get
                    {
                        var __ret = __Internal.GetVariablesCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }

                public uint FriendsCount
                {
                    get
                    {
                        var __ret = __Internal.GetFriendsCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }
            }

            public unsafe partial class TypedefNameDecl : global::CppSharp.Parser.AST.Declaration, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 136)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public global::CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public global::CppSharp.Parser.SourceLocation.__Internal Location;

                    [FieldOffset(16)]
                    public int LineNumberStart;

                    [FieldOffset(20)]
                    public int LineNumberEnd;

                    [FieldOffset(24)]
                    public global::Std.BasicString.__Internal Name;

                    [FieldOffset(48)]
                    public global::Std.BasicString.__Internal USR;

                    [FieldOffset(72)]
                    public global::Std.BasicString.__Internal DebugText;

                    [FieldOffset(96)]
                    public byte IsIncomplete;

                    [FieldOffset(97)]
                    public byte IsDependent;

                    [FieldOffset(98)]
                    public byte IsImplicit;

                    [FieldOffset(100)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(104)]
                    public uint DefinitionOrder;

                    [FieldOffset(108)]
                    internal global::Std.Vector.__Internal PreprocessedEntities;

                    [FieldOffset(120)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(124)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(128)]
                    public global::CppSharp.Parser.AST.QualifiedType.__Internal QualifiedType;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TypedefNameDecl@AST@CppParser@CppSharp@@QAE@W4DeclarationKind@123@@Z")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance, global::CppSharp.Parser.AST.DeclarationKind kind);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TypedefNameDecl@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1TypedefNameDecl@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);
                }

                public static new TypedefNameDecl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new TypedefNameDecl(native.ToPointer(), skipVTables);
                }

                public static TypedefNameDecl __CreateInstance(TypedefNameDecl.__Internal native, bool skipVTables = false)
                {
                    return new TypedefNameDecl(native, skipVTables);
                }

                private static void* __CopyValue(TypedefNameDecl.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(136);
                    global::CppSharp.Parser.AST.TypedefNameDecl.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private TypedefNameDecl(TypedefNameDecl.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected TypedefNameDecl(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public TypedefNameDecl(global::CppSharp.Parser.AST.DeclarationKind kind)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(136);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var __arg0 = kind;
                    __Internal.ctor_0((__Instance + __PointerAdjustment), __arg0);
                }

                public TypedefNameDecl(global::CppSharp.Parser.AST.TypedefNameDecl _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(136);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public override void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Declaration __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public static implicit operator global::CppSharp.Parser.AST.TypedefNameDecl(global::CppSharp.Parser.AST.DeclarationKind kind)
                {
                    return new global::CppSharp.Parser.AST.TypedefNameDecl(kind);
                }

                public global::CppSharp.Parser.AST.QualifiedType QualifiedType
                {
                    get
                    {
                        return global::CppSharp.Parser.AST.QualifiedType.__CreateInstance(((__Internal*) __Instance)->QualifiedType);
                    }

                    set
                    {
                        ((__Internal*) __Instance)->QualifiedType = ReferenceEquals(value, null) ? new global::CppSharp.Parser.AST.QualifiedType.__Internal() : *(global::CppSharp.Parser.AST.QualifiedType.__Internal*) value.__Instance;
                    }
                }
            }

            public unsafe partial class TypedefDecl : global::CppSharp.Parser.AST.TypedefNameDecl, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 136)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public global::CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public global::CppSharp.Parser.SourceLocation.__Internal Location;

                    [FieldOffset(16)]
                    public int LineNumberStart;

                    [FieldOffset(20)]
                    public int LineNumberEnd;

                    [FieldOffset(24)]
                    public global::Std.BasicString.__Internal Name;

                    [FieldOffset(48)]
                    public global::Std.BasicString.__Internal USR;

                    [FieldOffset(72)]
                    public global::Std.BasicString.__Internal DebugText;

                    [FieldOffset(96)]
                    public byte IsIncomplete;

                    [FieldOffset(97)]
                    public byte IsDependent;

                    [FieldOffset(98)]
                    public byte IsImplicit;

                    [FieldOffset(100)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(104)]
                    public uint DefinitionOrder;

                    [FieldOffset(108)]
                    internal global::Std.Vector.__Internal PreprocessedEntities;

                    [FieldOffset(120)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(124)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(128)]
                    public global::CppSharp.Parser.AST.QualifiedType.__Internal QualifiedType;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TypedefDecl@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TypedefDecl@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1TypedefDecl@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);
                }

                public static new TypedefDecl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new TypedefDecl(native.ToPointer(), skipVTables);
                }

                public static TypedefDecl __CreateInstance(TypedefDecl.__Internal native, bool skipVTables = false)
                {
                    return new TypedefDecl(native, skipVTables);
                }

                private static void* __CopyValue(TypedefDecl.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(136);
                    global::CppSharp.Parser.AST.TypedefDecl.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private TypedefDecl(TypedefDecl.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected TypedefDecl(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public TypedefDecl()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(136);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public TypedefDecl(global::CppSharp.Parser.AST.TypedefDecl _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(136);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public override void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Declaration __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }
            }

            public unsafe partial class TypeAlias : global::CppSharp.Parser.AST.TypedefNameDecl, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 140)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public global::CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public global::CppSharp.Parser.SourceLocation.__Internal Location;

                    [FieldOffset(16)]
                    public int LineNumberStart;

                    [FieldOffset(20)]
                    public int LineNumberEnd;

                    [FieldOffset(24)]
                    public global::Std.BasicString.__Internal Name;

                    [FieldOffset(48)]
                    public global::Std.BasicString.__Internal USR;

                    [FieldOffset(72)]
                    public global::Std.BasicString.__Internal DebugText;

                    [FieldOffset(96)]
                    public byte IsIncomplete;

                    [FieldOffset(97)]
                    public byte IsDependent;

                    [FieldOffset(98)]
                    public byte IsImplicit;

                    [FieldOffset(100)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(104)]
                    public uint DefinitionOrder;

                    [FieldOffset(108)]
                    internal global::Std.Vector.__Internal PreprocessedEntities;

                    [FieldOffset(120)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(124)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(128)]
                    public global::CppSharp.Parser.AST.QualifiedType.__Internal QualifiedType;

                    [FieldOffset(136)]
                    public global::System.IntPtr DescribedAliasTemplate;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TypeAlias@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TypeAlias@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1TypeAlias@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);
                }

                public static new TypeAlias __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new TypeAlias(native.ToPointer(), skipVTables);
                }

                public static TypeAlias __CreateInstance(TypeAlias.__Internal native, bool skipVTables = false)
                {
                    return new TypeAlias(native, skipVTables);
                }

                private static void* __CopyValue(TypeAlias.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(140);
                    global::CppSharp.Parser.AST.TypeAlias.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private TypeAlias(TypeAlias.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected TypeAlias(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public TypeAlias()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(140);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public TypeAlias(global::CppSharp.Parser.AST.TypeAlias _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(140);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public override void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Declaration __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public global::CppSharp.Parser.AST.TypeAliasTemplate DescribedAliasTemplate
                {
                    get
                    {
                        global::CppSharp.Parser.AST.TypeAliasTemplate __result0;
                        if (((__Internal*) __Instance)->DescribedAliasTemplate == IntPtr.Zero) __result0 = null;
                        else if (global::CppSharp.Parser.AST.TypeAliasTemplate.NativeToManagedMap.ContainsKey(((__Internal*) __Instance)->DescribedAliasTemplate))
                            __result0 = (global::CppSharp.Parser.AST.TypeAliasTemplate) global::CppSharp.Parser.AST.TypeAliasTemplate.NativeToManagedMap[((__Internal*) __Instance)->DescribedAliasTemplate];
                        else __result0 = global::CppSharp.Parser.AST.TypeAliasTemplate.__CreateInstance(((__Internal*) __Instance)->DescribedAliasTemplate);
                        return __result0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->DescribedAliasTemplate = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }
            }

            public unsafe partial class Friend : global::CppSharp.Parser.AST.Declaration, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 132)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public global::CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public global::CppSharp.Parser.SourceLocation.__Internal Location;

                    [FieldOffset(16)]
                    public int LineNumberStart;

                    [FieldOffset(20)]
                    public int LineNumberEnd;

                    [FieldOffset(24)]
                    public global::Std.BasicString.__Internal Name;

                    [FieldOffset(48)]
                    public global::Std.BasicString.__Internal USR;

                    [FieldOffset(72)]
                    public global::Std.BasicString.__Internal DebugText;

                    [FieldOffset(96)]
                    public byte IsIncomplete;

                    [FieldOffset(97)]
                    public byte IsDependent;

                    [FieldOffset(98)]
                    public byte IsImplicit;

                    [FieldOffset(100)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(104)]
                    public uint DefinitionOrder;

                    [FieldOffset(108)]
                    internal global::Std.Vector.__Internal PreprocessedEntities;

                    [FieldOffset(120)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(124)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(128)]
                    public global::System.IntPtr Declaration;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Friend@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Friend@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1Friend@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);
                }

                public static new Friend __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new Friend(native.ToPointer(), skipVTables);
                }

                public static Friend __CreateInstance(Friend.__Internal native, bool skipVTables = false)
                {
                    return new Friend(native, skipVTables);
                }

                private static void* __CopyValue(Friend.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(132);
                    global::CppSharp.Parser.AST.Friend.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private Friend(Friend.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected Friend(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public Friend()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(132);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public Friend(global::CppSharp.Parser.AST.Friend _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(132);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public override void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Declaration __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public global::CppSharp.Parser.AST.Declaration Declaration
                {
                    get
                    {
                        global::CppSharp.Parser.AST.Declaration __result0;
                        if (((__Internal*) __Instance)->Declaration == IntPtr.Zero) __result0 = null;
                        else if (global::CppSharp.Parser.AST.Declaration.NativeToManagedMap.ContainsKey(((__Internal*) __Instance)->Declaration))
                            __result0 = (global::CppSharp.Parser.AST.Declaration) global::CppSharp.Parser.AST.Declaration.NativeToManagedMap[((__Internal*) __Instance)->Declaration];
                        else __result0 = global::CppSharp.Parser.AST.Declaration.__CreateInstance(((__Internal*) __Instance)->Declaration);
                        return __result0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Declaration = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }
            }

            public unsafe partial class Statement : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 32)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.StatementClass Class;

                    [FieldOffset(4)]
                    public global::System.IntPtr Decl;

                    [FieldOffset(8)]
                    public global::Std.BasicString.__Internal String;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Statement@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1Statement@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getString@Statement@AST@CppParser@CppSharp@@QAEPBDXZ")]
                    internal static extern global::System.IntPtr String_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?setString@Statement@AST@CppParser@CppSharp@@QAEXPBD@Z")]
                    internal static extern void SetString_0(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string s);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                protected int __PointerAdjustment;
                public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Statement> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Statement>();
                protected void*[] __OriginalVTables;

                protected bool __ownsNativeInstance;

                public static Statement __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new Statement(native.ToPointer(), skipVTables);
                }

                public static Statement __CreateInstance(Statement.__Internal native, bool skipVTables = false)
                {
                    return new Statement(native, skipVTables);
                }

                private static void* __CopyValue(Statement.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(32);
                    global::CppSharp.Parser.AST.Statement.__Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private Statement(Statement.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected Statement(void* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public Statement(global::CppSharp.Parser.AST.Statement _0)
                {
                    __Instance = Marshal.AllocHGlobal(32);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_2((__Instance + __PointerAdjustment), __arg0);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                public virtual void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Statement __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public global::CppSharp.Parser.AST.StatementClass Class
                {
                    get
                    {
                        return ((__Internal*) __Instance)->Class;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Class = value;
                    }
                }

                public global::CppSharp.Parser.AST.Declaration Decl
                {
                    get
                    {
                        global::CppSharp.Parser.AST.Declaration __result0;
                        if (((__Internal*) __Instance)->Decl == IntPtr.Zero) __result0 = null;
                        else if (global::CppSharp.Parser.AST.Declaration.NativeToManagedMap.ContainsKey(((__Internal*) __Instance)->Decl))
                            __result0 = (global::CppSharp.Parser.AST.Declaration) global::CppSharp.Parser.AST.Declaration.NativeToManagedMap[((__Internal*) __Instance)->Decl];
                        else __result0 = global::CppSharp.Parser.AST.Declaration.__CreateInstance(((__Internal*) __Instance)->Decl);
                        return __result0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Decl = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public string String
                {
                    get
                    {
                        var __ret = __Internal.String_0((__Instance + __PointerAdjustment));
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var __arg0 = value;
                        __Internal.SetString_0((__Instance + __PointerAdjustment), __arg0);
                    }
                }
            }

            public unsafe partial class Expression : global::CppSharp.Parser.AST.Statement, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 32)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.StatementClass Class;

                    [FieldOffset(4)]
                    public global::System.IntPtr Decl;

                    [FieldOffset(8)]
                    public global::Std.BasicString.__Internal String;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Expression@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1Expression@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);
                }

                public static new Expression __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new Expression(native.ToPointer(), skipVTables);
                }

                public static Expression __CreateInstance(Expression.__Internal native, bool skipVTables = false)
                {
                    return new Expression(native, skipVTables);
                }

                private static void* __CopyValue(Expression.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(32);
                    global::CppSharp.Parser.AST.Expression.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private Expression(Expression.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected Expression(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public Expression(global::CppSharp.Parser.AST.Expression _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(32);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public override void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Statement __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }
            }

            public unsafe partial class BinaryOperator : global::CppSharp.Parser.AST.Expression, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 64)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.StatementClass Class;

                    [FieldOffset(4)]
                    public global::System.IntPtr Decl;

                    [FieldOffset(8)]
                    public global::Std.BasicString.__Internal String;

                    [FieldOffset(32)]
                    public global::System.IntPtr LHS;

                    [FieldOffset(36)]
                    public global::System.IntPtr RHS;

                    [FieldOffset(40)]
                    public global::Std.BasicString.__Internal OpcodeStr;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0BinaryOperator@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1BinaryOperator@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getOpcodeStr@BinaryOperator@AST@CppParser@CppSharp@@QAEPBDXZ")]
                    internal static extern global::System.IntPtr OpcodeStr_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?setOpcodeStr@BinaryOperator@AST@CppParser@CppSharp@@QAEXPBD@Z")]
                    internal static extern void SetOpcodeStr_0(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string s);
                }

                public static new BinaryOperator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new BinaryOperator(native.ToPointer(), skipVTables);
                }

                public static BinaryOperator __CreateInstance(BinaryOperator.__Internal native, bool skipVTables = false)
                {
                    return new BinaryOperator(native, skipVTables);
                }

                private static void* __CopyValue(BinaryOperator.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(64);
                    global::CppSharp.Parser.AST.BinaryOperator.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private BinaryOperator(BinaryOperator.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected BinaryOperator(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public BinaryOperator(global::CppSharp.Parser.AST.BinaryOperator _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(64);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public override void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Statement __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public global::CppSharp.Parser.AST.Expression LHS
                {
                    get
                    {
                        global::CppSharp.Parser.AST.Expression __result0;
                        if (((__Internal*) __Instance)->LHS == IntPtr.Zero) __result0 = null;
                        else if (global::CppSharp.Parser.AST.Expression.NativeToManagedMap.ContainsKey(((__Internal*) __Instance)->LHS))
                            __result0 = (global::CppSharp.Parser.AST.Expression) global::CppSharp.Parser.AST.Expression.NativeToManagedMap[((__Internal*) __Instance)->LHS];
                        else __result0 = global::CppSharp.Parser.AST.Expression.__CreateInstance(((__Internal*) __Instance)->LHS);
                        return __result0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->LHS = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public global::CppSharp.Parser.AST.Expression RHS
                {
                    get
                    {
                        global::CppSharp.Parser.AST.Expression __result0;
                        if (((__Internal*) __Instance)->RHS == IntPtr.Zero) __result0 = null;
                        else if (global::CppSharp.Parser.AST.Expression.NativeToManagedMap.ContainsKey(((__Internal*) __Instance)->RHS))
                            __result0 = (global::CppSharp.Parser.AST.Expression) global::CppSharp.Parser.AST.Expression.NativeToManagedMap[((__Internal*) __Instance)->RHS];
                        else __result0 = global::CppSharp.Parser.AST.Expression.__CreateInstance(((__Internal*) __Instance)->RHS);
                        return __result0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->RHS = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public string OpcodeStr
                {
                    get
                    {
                        var __ret = __Internal.OpcodeStr_0((__Instance + __PointerAdjustment));
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var __arg0 = value;
                        __Internal.SetOpcodeStr_0((__Instance + __PointerAdjustment), __arg0);
                    }
                }
            }

            public unsafe partial class CallExpr : global::CppSharp.Parser.AST.Expression, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 44)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.StatementClass Class;

                    [FieldOffset(4)]
                    public global::System.IntPtr Decl;

                    [FieldOffset(8)]
                    public global::Std.BasicString.__Internal String;

                    [FieldOffset(32)]
                    internal global::Std.Vector.__Internal Arguments;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0CallExpr@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1CallExpr@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getArguments@CallExpr@AST@CppParser@CppSharp@@QAEPAVExpression@234@I@Z")]
                    internal static extern global::System.IntPtr GetArguments_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addArguments@CallExpr@AST@CppParser@CppSharp@@QAEXAAPAVExpression@234@@Z")]
                    internal static extern void AddArguments_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearArguments@CallExpr@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void ClearArguments_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getArgumentsCount@CallExpr@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint GetArgumentsCount_0(global::System.IntPtr instance);
                }

                public static new CallExpr __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new CallExpr(native.ToPointer(), skipVTables);
                }

                public static CallExpr __CreateInstance(CallExpr.__Internal native, bool skipVTables = false)
                {
                    return new CallExpr(native, skipVTables);
                }

                private static void* __CopyValue(CallExpr.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(44);
                    global::CppSharp.Parser.AST.CallExpr.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private CallExpr(CallExpr.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected CallExpr(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public CallExpr(global::CppSharp.Parser.AST.CallExpr _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(44);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public override void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Statement __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public global::CppSharp.Parser.AST.Expression GetArguments(uint i)
                {
                    var __ret = __Internal.GetArguments_0((__Instance + __PointerAdjustment), i);
                    global::CppSharp.Parser.AST.Expression __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (global::CppSharp.Parser.AST.Expression.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (global::CppSharp.Parser.AST.Expression) global::CppSharp.Parser.AST.Expression.NativeToManagedMap[__ret];
                    else __result0 = global::CppSharp.Parser.AST.Expression.__CreateInstance(__ret);
                    return __result0;
                }

                public void AddArguments(global::CppSharp.Parser.AST.Expression s)
                {
                    if (ReferenceEquals(s, null))
                        throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = s.__Instance;
                    __Internal.AddArguments_0((__Instance + __PointerAdjustment), __arg0);
                }

                public void ClearArguments()
                {
                    __Internal.ClearArguments_0((__Instance + __PointerAdjustment));
                }

                public uint ArgumentsCount
                {
                    get
                    {
                        var __ret = __Internal.GetArgumentsCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }
            }

            public unsafe partial class CXXConstructExpr : global::CppSharp.Parser.AST.Expression, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 44)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.StatementClass Class;

                    [FieldOffset(4)]
                    public global::System.IntPtr Decl;

                    [FieldOffset(8)]
                    public global::Std.BasicString.__Internal String;

                    [FieldOffset(32)]
                    internal global::Std.Vector.__Internal Arguments;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0CXXConstructExpr@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1CXXConstructExpr@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getArguments@CXXConstructExpr@AST@CppParser@CppSharp@@QAEPAVExpression@234@I@Z")]
                    internal static extern global::System.IntPtr GetArguments_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addArguments@CXXConstructExpr@AST@CppParser@CppSharp@@QAEXAAPAVExpression@234@@Z")]
                    internal static extern void AddArguments_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearArguments@CXXConstructExpr@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void ClearArguments_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getArgumentsCount@CXXConstructExpr@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint GetArgumentsCount_0(global::System.IntPtr instance);
                }

                public static new CXXConstructExpr __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new CXXConstructExpr(native.ToPointer(), skipVTables);
                }

                public static CXXConstructExpr __CreateInstance(CXXConstructExpr.__Internal native, bool skipVTables = false)
                {
                    return new CXXConstructExpr(native, skipVTables);
                }

                private static void* __CopyValue(CXXConstructExpr.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(44);
                    global::CppSharp.Parser.AST.CXXConstructExpr.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private CXXConstructExpr(CXXConstructExpr.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected CXXConstructExpr(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public CXXConstructExpr(global::CppSharp.Parser.AST.CXXConstructExpr _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(44);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public override void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Statement __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public global::CppSharp.Parser.AST.Expression GetArguments(uint i)
                {
                    var __ret = __Internal.GetArguments_0((__Instance + __PointerAdjustment), i);
                    global::CppSharp.Parser.AST.Expression __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (global::CppSharp.Parser.AST.Expression.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (global::CppSharp.Parser.AST.Expression) global::CppSharp.Parser.AST.Expression.NativeToManagedMap[__ret];
                    else __result0 = global::CppSharp.Parser.AST.Expression.__CreateInstance(__ret);
                    return __result0;
                }

                public void AddArguments(global::CppSharp.Parser.AST.Expression s)
                {
                    if (ReferenceEquals(s, null))
                        throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = s.__Instance;
                    __Internal.AddArguments_0((__Instance + __PointerAdjustment), __arg0);
                }

                public void ClearArguments()
                {
                    __Internal.ClearArguments_0((__Instance + __PointerAdjustment));
                }

                public uint ArgumentsCount
                {
                    get
                    {
                        var __ret = __Internal.GetArgumentsCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }
            }

            public unsafe partial class Parameter : global::CppSharp.Parser.AST.Declaration, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 148)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public global::CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public global::CppSharp.Parser.SourceLocation.__Internal Location;

                    [FieldOffset(16)]
                    public int LineNumberStart;

                    [FieldOffset(20)]
                    public int LineNumberEnd;

                    [FieldOffset(24)]
                    public global::Std.BasicString.__Internal Name;

                    [FieldOffset(48)]
                    public global::Std.BasicString.__Internal USR;

                    [FieldOffset(72)]
                    public global::Std.BasicString.__Internal DebugText;

                    [FieldOffset(96)]
                    public byte IsIncomplete;

                    [FieldOffset(97)]
                    public byte IsDependent;

                    [FieldOffset(98)]
                    public byte IsImplicit;

                    [FieldOffset(100)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(104)]
                    public uint DefinitionOrder;

                    [FieldOffset(108)]
                    internal global::Std.Vector.__Internal PreprocessedEntities;

                    [FieldOffset(120)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(124)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(128)]
                    public global::CppSharp.Parser.AST.QualifiedType.__Internal QualifiedType;

                    [FieldOffset(136)]
                    public byte IsIndirect;

                    [FieldOffset(137)]
                    public byte HasDefaultValue;

                    [FieldOffset(140)]
                    public uint Index;

                    [FieldOffset(144)]
                    public global::System.IntPtr DefaultArgument;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Parameter@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Parameter@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1Parameter@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);
                }

                public static new Parameter __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new Parameter(native.ToPointer(), skipVTables);
                }

                public static Parameter __CreateInstance(Parameter.__Internal native, bool skipVTables = false)
                {
                    return new Parameter(native, skipVTables);
                }

                private static void* __CopyValue(Parameter.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(148);
                    global::CppSharp.Parser.AST.Parameter.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private Parameter(Parameter.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected Parameter(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public Parameter()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(148);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public Parameter(global::CppSharp.Parser.AST.Parameter _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(148);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public override void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Declaration __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public global::CppSharp.Parser.AST.QualifiedType QualifiedType
                {
                    get
                    {
                        return global::CppSharp.Parser.AST.QualifiedType.__CreateInstance(((__Internal*) __Instance)->QualifiedType);
                    }

                    set
                    {
                        ((__Internal*) __Instance)->QualifiedType = ReferenceEquals(value, null) ? new global::CppSharp.Parser.AST.QualifiedType.__Internal() : *(global::CppSharp.Parser.AST.QualifiedType.__Internal*) value.__Instance;
                    }
                }

                public bool IsIndirect
                {
                    get
                    {
                        return ((__Internal*) __Instance)->IsIndirect != 0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->IsIndirect = (byte) (value ? 1 : 0);
                    }
                }

                public bool HasDefaultValue
                {
                    get
                    {
                        return ((__Internal*) __Instance)->HasDefaultValue != 0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->HasDefaultValue = (byte) (value ? 1 : 0);
                    }
                }

                public uint Index
                {
                    get
                    {
                        return ((__Internal*) __Instance)->Index;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Index = value;
                    }
                }

                public global::CppSharp.Parser.AST.Expression DefaultArgument
                {
                    get
                    {
                        global::CppSharp.Parser.AST.Expression __result0;
                        if (((__Internal*) __Instance)->DefaultArgument == IntPtr.Zero) __result0 = null;
                        else if (global::CppSharp.Parser.AST.Expression.NativeToManagedMap.ContainsKey(((__Internal*) __Instance)->DefaultArgument))
                            __result0 = (global::CppSharp.Parser.AST.Expression) global::CppSharp.Parser.AST.Expression.NativeToManagedMap[((__Internal*) __Instance)->DefaultArgument];
                        else __result0 = global::CppSharp.Parser.AST.Expression.__CreateInstance(((__Internal*) __Instance)->DefaultArgument);
                        return __result0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->DefaultArgument = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }
            }

            public unsafe partial class Function : global::CppSharp.Parser.AST.Declaration, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 220)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public global::CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public global::CppSharp.Parser.SourceLocation.__Internal Location;

                    [FieldOffset(16)]
                    public int LineNumberStart;

                    [FieldOffset(20)]
                    public int LineNumberEnd;

                    [FieldOffset(24)]
                    public global::Std.BasicString.__Internal Name;

                    [FieldOffset(48)]
                    public global::Std.BasicString.__Internal USR;

                    [FieldOffset(72)]
                    public global::Std.BasicString.__Internal DebugText;

                    [FieldOffset(96)]
                    public byte IsIncomplete;

                    [FieldOffset(97)]
                    public byte IsDependent;

                    [FieldOffset(98)]
                    public byte IsImplicit;

                    [FieldOffset(100)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(104)]
                    public uint DefinitionOrder;

                    [FieldOffset(108)]
                    internal global::Std.Vector.__Internal PreprocessedEntities;

                    [FieldOffset(120)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(124)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(128)]
                    public global::CppSharp.Parser.AST.QualifiedType.__Internal ReturnType;

                    [FieldOffset(136)]
                    public byte IsReturnIndirect;

                    [FieldOffset(137)]
                    public byte HasThisReturn;

                    [FieldOffset(138)]
                    public byte IsVariadic;

                    [FieldOffset(139)]
                    public byte IsInline;

                    [FieldOffset(140)]
                    public byte IsPure;

                    [FieldOffset(141)]
                    public byte IsDeleted;

                    [FieldOffset(144)]
                    public global::CppSharp.Parser.AST.CXXOperatorKind OperatorKind;

                    [FieldOffset(148)]
                    public global::Std.BasicString.__Internal Mangled;

                    [FieldOffset(172)]
                    public global::Std.BasicString.__Internal Signature;

                    [FieldOffset(196)]
                    public global::CppSharp.Parser.AST.CallingConvention CallingConvention;

                    [FieldOffset(200)]
                    internal global::Std.Vector.__Internal Parameters;

                    [FieldOffset(212)]
                    public global::System.IntPtr SpecializationInfo;

                    [FieldOffset(216)]
                    public global::System.IntPtr InstantiatedFrom;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Function@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Function@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1Function@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getParameters@Function@AST@CppParser@CppSharp@@QAEPAVParameter@234@I@Z")]
                    internal static extern global::System.IntPtr GetParameters_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addParameters@Function@AST@CppParser@CppSharp@@QAEXAAPAVParameter@234@@Z")]
                    internal static extern void AddParameters_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearParameters@Function@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void ClearParameters_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getMangled@Function@AST@CppParser@CppSharp@@QAEPBDXZ")]
                    internal static extern global::System.IntPtr Mangled_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?setMangled@Function@AST@CppParser@CppSharp@@QAEXPBD@Z")]
                    internal static extern void SetMangled_0(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getSignature@Function@AST@CppParser@CppSharp@@QAEPBDXZ")]
                    internal static extern global::System.IntPtr Signature_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?setSignature@Function@AST@CppParser@CppSharp@@QAEXPBD@Z")]
                    internal static extern void SetSignature_0(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getParametersCount@Function@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint GetParametersCount_0(global::System.IntPtr instance);
                }

                public static new Function __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new Function(native.ToPointer(), skipVTables);
                }

                public static Function __CreateInstance(Function.__Internal native, bool skipVTables = false)
                {
                    return new Function(native, skipVTables);
                }

                private static void* __CopyValue(Function.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(220);
                    global::CppSharp.Parser.AST.Function.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private Function(Function.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected Function(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public Function()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(220);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public Function(global::CppSharp.Parser.AST.Function _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(220);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public override void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Declaration __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public global::CppSharp.Parser.AST.Parameter GetParameters(uint i)
                {
                    var __ret = __Internal.GetParameters_0((__Instance + __PointerAdjustment), i);
                    global::CppSharp.Parser.AST.Parameter __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (global::CppSharp.Parser.AST.Parameter.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (global::CppSharp.Parser.AST.Parameter) global::CppSharp.Parser.AST.Parameter.NativeToManagedMap[__ret];
                    else __result0 = global::CppSharp.Parser.AST.Parameter.__CreateInstance(__ret);
                    return __result0;
                }

                public void AddParameters(global::CppSharp.Parser.AST.Parameter s)
                {
                    if (ReferenceEquals(s, null))
                        throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = s.__Instance;
                    __Internal.AddParameters_0((__Instance + __PointerAdjustment), __arg0);
                }

                public void ClearParameters()
                {
                    __Internal.ClearParameters_0((__Instance + __PointerAdjustment));
                }

                public global::CppSharp.Parser.AST.QualifiedType ReturnType
                {
                    get
                    {
                        return global::CppSharp.Parser.AST.QualifiedType.__CreateInstance(((__Internal*) __Instance)->ReturnType);
                    }

                    set
                    {
                        ((__Internal*) __Instance)->ReturnType = ReferenceEquals(value, null) ? new global::CppSharp.Parser.AST.QualifiedType.__Internal() : *(global::CppSharp.Parser.AST.QualifiedType.__Internal*) value.__Instance;
                    }
                }

                public bool IsReturnIndirect
                {
                    get
                    {
                        return ((__Internal*) __Instance)->IsReturnIndirect != 0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->IsReturnIndirect = (byte) (value ? 1 : 0);
                    }
                }

                public bool HasThisReturn
                {
                    get
                    {
                        return ((__Internal*) __Instance)->HasThisReturn != 0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->HasThisReturn = (byte) (value ? 1 : 0);
                    }
                }

                public bool IsVariadic
                {
                    get
                    {
                        return ((__Internal*) __Instance)->IsVariadic != 0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->IsVariadic = (byte) (value ? 1 : 0);
                    }
                }

                public bool IsInline
                {
                    get
                    {
                        return ((__Internal*) __Instance)->IsInline != 0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->IsInline = (byte) (value ? 1 : 0);
                    }
                }

                public bool IsPure
                {
                    get
                    {
                        return ((__Internal*) __Instance)->IsPure != 0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->IsPure = (byte) (value ? 1 : 0);
                    }
                }

                public bool IsDeleted
                {
                    get
                    {
                        return ((__Internal*) __Instance)->IsDeleted != 0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->IsDeleted = (byte) (value ? 1 : 0);
                    }
                }

                public global::CppSharp.Parser.AST.CXXOperatorKind OperatorKind
                {
                    get
                    {
                        return ((__Internal*) __Instance)->OperatorKind;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->OperatorKind = value;
                    }
                }

                public global::CppSharp.Parser.AST.CallingConvention CallingConvention
                {
                    get
                    {
                        return ((__Internal*) __Instance)->CallingConvention;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->CallingConvention = value;
                    }
                }

                public global::CppSharp.Parser.AST.FunctionTemplateSpecialization SpecializationInfo
                {
                    get
                    {
                        global::CppSharp.Parser.AST.FunctionTemplateSpecialization __result0;
                        if (((__Internal*) __Instance)->SpecializationInfo == IntPtr.Zero) __result0 = null;
                        else if (global::CppSharp.Parser.AST.FunctionTemplateSpecialization.NativeToManagedMap.ContainsKey(((__Internal*) __Instance)->SpecializationInfo))
                            __result0 = (global::CppSharp.Parser.AST.FunctionTemplateSpecialization) global::CppSharp.Parser.AST.FunctionTemplateSpecialization.NativeToManagedMap[((__Internal*) __Instance)->SpecializationInfo];
                        else __result0 = global::CppSharp.Parser.AST.FunctionTemplateSpecialization.__CreateInstance(((__Internal*) __Instance)->SpecializationInfo);
                        return __result0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->SpecializationInfo = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public global::CppSharp.Parser.AST.Function InstantiatedFrom
                {
                    get
                    {
                        global::CppSharp.Parser.AST.Function __result0;
                        if (((__Internal*) __Instance)->InstantiatedFrom == IntPtr.Zero) __result0 = null;
                        else if (global::CppSharp.Parser.AST.Function.NativeToManagedMap.ContainsKey(((__Internal*) __Instance)->InstantiatedFrom))
                            __result0 = (global::CppSharp.Parser.AST.Function) global::CppSharp.Parser.AST.Function.NativeToManagedMap[((__Internal*) __Instance)->InstantiatedFrom];
                        else __result0 = global::CppSharp.Parser.AST.Function.__CreateInstance(((__Internal*) __Instance)->InstantiatedFrom);
                        return __result0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->InstantiatedFrom = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public string Mangled
                {
                    get
                    {
                        var __ret = __Internal.Mangled_0((__Instance + __PointerAdjustment));
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var __arg0 = value;
                        __Internal.SetMangled_0((__Instance + __PointerAdjustment), __arg0);
                    }
                }

                public string Signature
                {
                    get
                    {
                        var __ret = __Internal.Signature_0((__Instance + __PointerAdjustment));
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var __arg0 = value;
                        __Internal.SetSignature_0((__Instance + __PointerAdjustment), __arg0);
                    }
                }

                public uint ParametersCount
                {
                    get
                    {
                        var __ret = __Internal.GetParametersCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }
            }

            public unsafe partial class Method : global::CppSharp.Parser.AST.Function, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 248)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public global::CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public global::CppSharp.Parser.SourceLocation.__Internal Location;

                    [FieldOffset(16)]
                    public int LineNumberStart;

                    [FieldOffset(20)]
                    public int LineNumberEnd;

                    [FieldOffset(24)]
                    public global::Std.BasicString.__Internal Name;

                    [FieldOffset(48)]
                    public global::Std.BasicString.__Internal USR;

                    [FieldOffset(72)]
                    public global::Std.BasicString.__Internal DebugText;

                    [FieldOffset(96)]
                    public byte IsIncomplete;

                    [FieldOffset(97)]
                    public byte IsDependent;

                    [FieldOffset(98)]
                    public byte IsImplicit;

                    [FieldOffset(100)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(104)]
                    public uint DefinitionOrder;

                    [FieldOffset(108)]
                    internal global::Std.Vector.__Internal PreprocessedEntities;

                    [FieldOffset(120)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(124)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(128)]
                    public global::CppSharp.Parser.AST.QualifiedType.__Internal ReturnType;

                    [FieldOffset(136)]
                    public byte IsReturnIndirect;

                    [FieldOffset(137)]
                    public byte HasThisReturn;

                    [FieldOffset(138)]
                    public byte IsVariadic;

                    [FieldOffset(139)]
                    public byte IsInline;

                    [FieldOffset(140)]
                    public byte IsPure;

                    [FieldOffset(141)]
                    public byte IsDeleted;

                    [FieldOffset(144)]
                    public global::CppSharp.Parser.AST.CXXOperatorKind OperatorKind;

                    [FieldOffset(148)]
                    public global::Std.BasicString.__Internal Mangled;

                    [FieldOffset(172)]
                    public global::Std.BasicString.__Internal Signature;

                    [FieldOffset(196)]
                    public global::CppSharp.Parser.AST.CallingConvention CallingConvention;

                    [FieldOffset(200)]
                    internal global::Std.Vector.__Internal Parameters;

                    [FieldOffset(212)]
                    public global::System.IntPtr SpecializationInfo;

                    [FieldOffset(216)]
                    public global::System.IntPtr InstantiatedFrom;

                    [FieldOffset(220)]
                    public byte IsVirtual;

                    [FieldOffset(221)]
                    public byte IsStatic;

                    [FieldOffset(222)]
                    public byte IsConst;

                    [FieldOffset(223)]
                    public byte IsExplicit;

                    [FieldOffset(224)]
                    public byte IsOverride;

                    [FieldOffset(228)]
                    public global::CppSharp.Parser.AST.CXXMethodKind MethodKind;

                    [FieldOffset(232)]
                    public byte IsDefaultConstructor;

                    [FieldOffset(233)]
                    public byte IsCopyConstructor;

                    [FieldOffset(234)]
                    public byte IsMoveConstructor;

                    [FieldOffset(236)]
                    public global::CppSharp.Parser.AST.QualifiedType.__Internal ConversionType;

                    [FieldOffset(244)]
                    public global::CppSharp.Parser.AST.RefQualifierKind RefQualifier;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Method@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Method@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1Method@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);
                }

                public static new Method __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new Method(native.ToPointer(), skipVTables);
                }

                public static Method __CreateInstance(Method.__Internal native, bool skipVTables = false)
                {
                    return new Method(native, skipVTables);
                }

                private static void* __CopyValue(Method.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(248);
                    global::CppSharp.Parser.AST.Method.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private Method(Method.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected Method(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public Method()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(248);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public Method(global::CppSharp.Parser.AST.Method _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(248);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public override void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Declaration __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public bool IsVirtual
                {
                    get
                    {
                        return ((__Internal*) __Instance)->IsVirtual != 0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->IsVirtual = (byte) (value ? 1 : 0);
                    }
                }

                public bool IsStatic
                {
                    get
                    {
                        return ((__Internal*) __Instance)->IsStatic != 0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->IsStatic = (byte) (value ? 1 : 0);
                    }
                }

                public bool IsConst
                {
                    get
                    {
                        return ((__Internal*) __Instance)->IsConst != 0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->IsConst = (byte) (value ? 1 : 0);
                    }
                }

                public bool IsExplicit
                {
                    get
                    {
                        return ((__Internal*) __Instance)->IsExplicit != 0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->IsExplicit = (byte) (value ? 1 : 0);
                    }
                }

                public bool IsOverride
                {
                    get
                    {
                        return ((__Internal*) __Instance)->IsOverride != 0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->IsOverride = (byte) (value ? 1 : 0);
                    }
                }

                public global::CppSharp.Parser.AST.CXXMethodKind MethodKind
                {
                    get
                    {
                        return ((__Internal*) __Instance)->MethodKind;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->MethodKind = value;
                    }
                }

                public bool IsDefaultConstructor
                {
                    get
                    {
                        return ((__Internal*) __Instance)->IsDefaultConstructor != 0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->IsDefaultConstructor = (byte) (value ? 1 : 0);
                    }
                }

                public bool IsCopyConstructor
                {
                    get
                    {
                        return ((__Internal*) __Instance)->IsCopyConstructor != 0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->IsCopyConstructor = (byte) (value ? 1 : 0);
                    }
                }

                public bool IsMoveConstructor
                {
                    get
                    {
                        return ((__Internal*) __Instance)->IsMoveConstructor != 0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->IsMoveConstructor = (byte) (value ? 1 : 0);
                    }
                }

                public global::CppSharp.Parser.AST.QualifiedType ConversionType
                {
                    get
                    {
                        return global::CppSharp.Parser.AST.QualifiedType.__CreateInstance(((__Internal*) __Instance)->ConversionType);
                    }

                    set
                    {
                        ((__Internal*) __Instance)->ConversionType = ReferenceEquals(value, null) ? new global::CppSharp.Parser.AST.QualifiedType.__Internal() : *(global::CppSharp.Parser.AST.QualifiedType.__Internal*) value.__Instance;
                    }
                }

                public global::CppSharp.Parser.AST.RefQualifierKind RefQualifier
                {
                    get
                    {
                        return ((__Internal*) __Instance)->RefQualifier;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->RefQualifier = value;
                    }
                }
            }

            public unsafe partial class Enumeration : global::CppSharp.Parser.AST.DeclarationContext, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 272)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public global::CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public global::CppSharp.Parser.SourceLocation.__Internal Location;

                    [FieldOffset(16)]
                    public int LineNumberStart;

                    [FieldOffset(20)]
                    public int LineNumberEnd;

                    [FieldOffset(24)]
                    public global::Std.BasicString.__Internal Name;

                    [FieldOffset(48)]
                    public global::Std.BasicString.__Internal USR;

                    [FieldOffset(72)]
                    public global::Std.BasicString.__Internal DebugText;

                    [FieldOffset(96)]
                    public byte IsIncomplete;

                    [FieldOffset(97)]
                    public byte IsDependent;

                    [FieldOffset(98)]
                    public byte IsImplicit;

                    [FieldOffset(100)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(104)]
                    public uint DefinitionOrder;

                    [FieldOffset(108)]
                    internal global::Std.Vector.__Internal PreprocessedEntities;

                    [FieldOffset(120)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(124)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(128)]
                    internal global::Std.Vector.__Internal Namespaces;

                    [FieldOffset(140)]
                    internal global::Std.Vector.__Internal Enums;

                    [FieldOffset(152)]
                    internal global::Std.Vector.__Internal Functions;

                    [FieldOffset(164)]
                    internal global::Std.Vector.__Internal Classes;

                    [FieldOffset(176)]
                    internal global::Std.Vector.__Internal Templates;

                    [FieldOffset(188)]
                    internal global::Std.Vector.__Internal Typedefs;

                    [FieldOffset(200)]
                    internal global::Std.Vector.__Internal TypeAliases;

                    [FieldOffset(212)]
                    internal global::Std.Vector.__Internal Variables;

                    [FieldOffset(224)]
                    internal global::Std.Vector.__Internal Friends;

                    [FieldOffset(236)]
                    internal global::Std.Map.__Internal Anonymous;

                    [FieldOffset(244)]
                    public byte IsAnonymous;

                    [FieldOffset(248)]
                    public global::CppSharp.Parser.AST.Enumeration.EnumModifiers Modifiers;

                    [FieldOffset(252)]
                    public global::System.IntPtr Type;

                    [FieldOffset(256)]
                    public global::System.IntPtr BuiltinType;

                    [FieldOffset(260)]
                    internal global::Std.Vector.__Internal Items;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Enumeration@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Enumeration@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1Enumeration@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getItems@Enumeration@AST@CppParser@CppSharp@@QAEPAVItem@1234@I@Z")]
                    internal static extern global::System.IntPtr GetItems_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addItems@Enumeration@AST@CppParser@CppSharp@@QAEXAAPAVItem@1234@@Z")]
                    internal static extern void AddItems_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearItems@Enumeration@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void ClearItems_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getItemsCount@Enumeration@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint GetItemsCount_0(global::System.IntPtr instance);
                }

                [Flags]
                public enum EnumModifiers
                {
                    Anonymous = 1,
                    Scoped = 2,
                    Flags = 4
                }

                public unsafe partial class Item : global::CppSharp.Parser.AST.Declaration, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 160)]
                    public new partial struct __Internal
                    {
                        [FieldOffset(0)]
                        public global::CppSharp.Parser.AST.DeclarationKind Kind;

                        [FieldOffset(4)]
                        public global::CppSharp.Parser.AST.AccessSpecifier Access;

                        [FieldOffset(8)]
                        public global::System.IntPtr _Namespace;

                        [FieldOffset(12)]
                        public global::CppSharp.Parser.SourceLocation.__Internal Location;

                        [FieldOffset(16)]
                        public int LineNumberStart;

                        [FieldOffset(20)]
                        public int LineNumberEnd;

                        [FieldOffset(24)]
                        public global::Std.BasicString.__Internal Name;

                        [FieldOffset(48)]
                        public global::Std.BasicString.__Internal USR;

                        [FieldOffset(72)]
                        public global::Std.BasicString.__Internal DebugText;

                        [FieldOffset(96)]
                        public byte IsIncomplete;

                        [FieldOffset(97)]
                        public byte IsDependent;

                        [FieldOffset(98)]
                        public byte IsImplicit;

                        [FieldOffset(100)]
                        public global::System.IntPtr CompleteDeclaration;

                        [FieldOffset(104)]
                        public uint DefinitionOrder;

                        [FieldOffset(108)]
                        internal global::Std.Vector.__Internal PreprocessedEntities;

                        [FieldOffset(120)]
                        public global::System.IntPtr OriginalPtr;

                        [FieldOffset(124)]
                        public global::System.IntPtr Comment;

                        [FieldOffset(128)]
                        public global::Std.BasicString.__Internal Expression;

                        [FieldOffset(152)]
                        public ulong Value;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                            EntryPoint="??0Item@Enumeration@AST@CppParser@CppSharp@@QAE@XZ")]
                        internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                            EntryPoint="??0Item@Enumeration@AST@CppParser@CppSharp@@QAE@ABV01234@@Z")]
                        internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                            EntryPoint="??1Item@Enumeration@AST@CppParser@CppSharp@@QAE@XZ")]
                        internal static extern void dtor_0(global::System.IntPtr instance, int delete);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                            EntryPoint="?getExpression@Item@Enumeration@AST@CppParser@CppSharp@@QAEPBDXZ")]
                        internal static extern global::System.IntPtr Expression_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                            EntryPoint="?setExpression@Item@Enumeration@AST@CppParser@CppSharp@@QAEXPBD@Z")]
                        internal static extern void SetExpression_0(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string s);
                    }

                    public static new Item __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                    {
                        return new Item(native.ToPointer(), skipVTables);
                    }

                    public static Item __CreateInstance(Item.__Internal native, bool skipVTables = false)
                    {
                        return new Item(native, skipVTables);
                    }

                    private static void* __CopyValue(Item.__Internal native)
                    {
                        var ret = Marshal.AllocHGlobal(160);
                        global::CppSharp.Parser.AST.Enumeration.Item.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                        return ret.ToPointer();
                    }

                    private Item(Item.__Internal native, bool skipVTables = false)
                        : this(__CopyValue(native), skipVTables)
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected Item(void* native, bool skipVTables = false)
                        : base((void*) null)
                    {
                        __PointerAdjustment = 0;
                        if (native == null)
                            return;
                        __Instance = new global::System.IntPtr(native);
                    }

                    public Item()
                        : this((void*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(160);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        __Internal.ctor_0((__Instance + __PointerAdjustment));
                    }

                    public Item(global::CppSharp.Parser.AST.Enumeration.Item _0)
                        : this((void*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(160);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        if (ReferenceEquals(_0, null))
                            throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                        var __arg0 = _0.__Instance;
                        __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                    }

                    public override void Dispose(bool disposing)
                    {
                        global::CppSharp.Parser.AST.Declaration __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (disposing)
                            __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public ulong Value
                    {
                        get
                        {
                            return ((__Internal*) __Instance)->Value;
                        }

                        set
                        {
                            ((__Internal*) __Instance)->Value = value;
                        }
                    }

                    public string Expression
                    {
                        get
                        {
                            var __ret = __Internal.Expression_0((__Instance + __PointerAdjustment));
                            return Marshal.PtrToStringAnsi(__ret);
                        }

                        set
                        {
                            var __arg0 = value;
                            __Internal.SetExpression_0((__Instance + __PointerAdjustment), __arg0);
                        }
                    }
                }

                public static new Enumeration __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new Enumeration(native.ToPointer(), skipVTables);
                }

                public static Enumeration __CreateInstance(Enumeration.__Internal native, bool skipVTables = false)
                {
                    return new Enumeration(native, skipVTables);
                }

                private static void* __CopyValue(Enumeration.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(272);
                    global::CppSharp.Parser.AST.Enumeration.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private Enumeration(Enumeration.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected Enumeration(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public Enumeration()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(272);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public Enumeration(global::CppSharp.Parser.AST.Enumeration _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(272);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public override void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Declaration __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public global::CppSharp.Parser.AST.Enumeration.Item GetItems(uint i)
                {
                    var __ret = __Internal.GetItems_0((__Instance + __PointerAdjustment), i);
                    global::CppSharp.Parser.AST.Enumeration.Item __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (global::CppSharp.Parser.AST.Enumeration.Item.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (global::CppSharp.Parser.AST.Enumeration.Item) global::CppSharp.Parser.AST.Enumeration.Item.NativeToManagedMap[__ret];
                    else __result0 = global::CppSharp.Parser.AST.Enumeration.Item.__CreateInstance(__ret);
                    return __result0;
                }

                public void AddItems(global::CppSharp.Parser.AST.Enumeration.Item s)
                {
                    if (ReferenceEquals(s, null))
                        throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = s.__Instance;
                    __Internal.AddItems_0((__Instance + __PointerAdjustment), __arg0);
                }

                public void ClearItems()
                {
                    __Internal.ClearItems_0((__Instance + __PointerAdjustment));
                }

                public global::CppSharp.Parser.AST.Enumeration.EnumModifiers Modifiers
                {
                    get
                    {
                        return ((__Internal*) __Instance)->Modifiers;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Modifiers = value;
                    }
                }

                public global::CppSharp.Parser.AST.Type Type
                {
                    get
                    {
                        global::CppSharp.Parser.AST.Type __result0;
                        if (((__Internal*) __Instance)->Type == IntPtr.Zero) __result0 = null;
                        else if (global::CppSharp.Parser.AST.Type.NativeToManagedMap.ContainsKey(((__Internal*) __Instance)->Type))
                            __result0 = (global::CppSharp.Parser.AST.Type) global::CppSharp.Parser.AST.Type.NativeToManagedMap[((__Internal*) __Instance)->Type];
                        else __result0 = global::CppSharp.Parser.AST.Type.__CreateInstance(((__Internal*) __Instance)->Type);
                        return __result0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Type = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public global::CppSharp.Parser.AST.BuiltinType BuiltinType
                {
                    get
                    {
                        global::CppSharp.Parser.AST.BuiltinType __result0;
                        if (((__Internal*) __Instance)->BuiltinType == IntPtr.Zero) __result0 = null;
                        else if (global::CppSharp.Parser.AST.BuiltinType.NativeToManagedMap.ContainsKey(((__Internal*) __Instance)->BuiltinType))
                            __result0 = (global::CppSharp.Parser.AST.BuiltinType) global::CppSharp.Parser.AST.BuiltinType.NativeToManagedMap[((__Internal*) __Instance)->BuiltinType];
                        else __result0 = global::CppSharp.Parser.AST.BuiltinType.__CreateInstance(((__Internal*) __Instance)->BuiltinType);
                        return __result0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->BuiltinType = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public uint ItemsCount
                {
                    get
                    {
                        var __ret = __Internal.GetItemsCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }
            }

            public unsafe partial class Variable : global::CppSharp.Parser.AST.Declaration, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 160)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public global::CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public global::CppSharp.Parser.SourceLocation.__Internal Location;

                    [FieldOffset(16)]
                    public int LineNumberStart;

                    [FieldOffset(20)]
                    public int LineNumberEnd;

                    [FieldOffset(24)]
                    public global::Std.BasicString.__Internal Name;

                    [FieldOffset(48)]
                    public global::Std.BasicString.__Internal USR;

                    [FieldOffset(72)]
                    public global::Std.BasicString.__Internal DebugText;

                    [FieldOffset(96)]
                    public byte IsIncomplete;

                    [FieldOffset(97)]
                    public byte IsDependent;

                    [FieldOffset(98)]
                    public byte IsImplicit;

                    [FieldOffset(100)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(104)]
                    public uint DefinitionOrder;

                    [FieldOffset(108)]
                    internal global::Std.Vector.__Internal PreprocessedEntities;

                    [FieldOffset(120)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(124)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(128)]
                    public global::Std.BasicString.__Internal Mangled;

                    [FieldOffset(152)]
                    public global::CppSharp.Parser.AST.QualifiedType.__Internal QualifiedType;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Variable@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Variable@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1Variable@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getMangled@Variable@AST@CppParser@CppSharp@@QAEPBDXZ")]
                    internal static extern global::System.IntPtr Mangled_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?setMangled@Variable@AST@CppParser@CppSharp@@QAEXPBD@Z")]
                    internal static extern void SetMangled_0(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string s);
                }

                public static new Variable __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new Variable(native.ToPointer(), skipVTables);
                }

                public static Variable __CreateInstance(Variable.__Internal native, bool skipVTables = false)
                {
                    return new Variable(native, skipVTables);
                }

                private static void* __CopyValue(Variable.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(160);
                    global::CppSharp.Parser.AST.Variable.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private Variable(Variable.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected Variable(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public Variable()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(160);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public Variable(global::CppSharp.Parser.AST.Variable _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(160);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public override void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Declaration __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public global::CppSharp.Parser.AST.QualifiedType QualifiedType
                {
                    get
                    {
                        return global::CppSharp.Parser.AST.QualifiedType.__CreateInstance(((__Internal*) __Instance)->QualifiedType);
                    }

                    set
                    {
                        ((__Internal*) __Instance)->QualifiedType = ReferenceEquals(value, null) ? new global::CppSharp.Parser.AST.QualifiedType.__Internal() : *(global::CppSharp.Parser.AST.QualifiedType.__Internal*) value.__Instance;
                    }
                }

                public string Mangled
                {
                    get
                    {
                        var __ret = __Internal.Mangled_0((__Instance + __PointerAdjustment));
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var __arg0 = value;
                        __Internal.SetMangled_0((__Instance + __PointerAdjustment), __arg0);
                    }
                }
            }

            public unsafe partial class BaseClassSpecifier : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 16)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(4)]
                    public byte IsVirtual;

                    [FieldOffset(8)]
                    public global::System.IntPtr Type;

                    [FieldOffset(12)]
                    public int Offset;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0BaseClassSpecifier@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0BaseClassSpecifier@AST@CppParser@CppSharp@@QAE@ABU0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                protected int __PointerAdjustment;
                public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, BaseClassSpecifier> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, BaseClassSpecifier>();
                protected void*[] __OriginalVTables;

                protected bool __ownsNativeInstance;

                public static BaseClassSpecifier __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new BaseClassSpecifier(native.ToPointer(), skipVTables);
                }

                public static BaseClassSpecifier __CreateInstance(BaseClassSpecifier.__Internal native, bool skipVTables = false)
                {
                    return new BaseClassSpecifier(native, skipVTables);
                }

                private static void* __CopyValue(BaseClassSpecifier.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(16);
                    *(BaseClassSpecifier.__Internal*) ret = native;
                    return ret.ToPointer();
                }

                private BaseClassSpecifier(BaseClassSpecifier.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected BaseClassSpecifier(void* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public BaseClassSpecifier()
                {
                    __Instance = Marshal.AllocHGlobal(16);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public BaseClassSpecifier(global::CppSharp.Parser.AST.BaseClassSpecifier _0)
                {
                    __Instance = Marshal.AllocHGlobal(16);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    *((BaseClassSpecifier.__Internal*) __Instance) = *((BaseClassSpecifier.__Internal*) _0.__Instance);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                public virtual void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.BaseClassSpecifier __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public global::CppSharp.Parser.AST.AccessSpecifier Access
                {
                    get
                    {
                        return ((__Internal*) __Instance)->Access;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Access = value;
                    }
                }

                public bool IsVirtual
                {
                    get
                    {
                        return ((__Internal*) __Instance)->IsVirtual != 0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->IsVirtual = (byte) (value ? 1 : 0);
                    }
                }

                public global::CppSharp.Parser.AST.Type Type
                {
                    get
                    {
                        global::CppSharp.Parser.AST.Type __result0;
                        if (((__Internal*) __Instance)->Type == IntPtr.Zero) __result0 = null;
                        else if (global::CppSharp.Parser.AST.Type.NativeToManagedMap.ContainsKey(((__Internal*) __Instance)->Type))
                            __result0 = (global::CppSharp.Parser.AST.Type) global::CppSharp.Parser.AST.Type.NativeToManagedMap[((__Internal*) __Instance)->Type];
                        else __result0 = global::CppSharp.Parser.AST.Type.__CreateInstance(((__Internal*) __Instance)->Type);
                        return __result0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Type = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public int Offset
                {
                    get
                    {
                        return ((__Internal*) __Instance)->Offset;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Offset = value;
                    }
                }
            }

            public unsafe partial class Field : global::CppSharp.Parser.AST.Declaration, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 148)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public global::CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public global::CppSharp.Parser.SourceLocation.__Internal Location;

                    [FieldOffset(16)]
                    public int LineNumberStart;

                    [FieldOffset(20)]
                    public int LineNumberEnd;

                    [FieldOffset(24)]
                    public global::Std.BasicString.__Internal Name;

                    [FieldOffset(48)]
                    public global::Std.BasicString.__Internal USR;

                    [FieldOffset(72)]
                    public global::Std.BasicString.__Internal DebugText;

                    [FieldOffset(96)]
                    public byte IsIncomplete;

                    [FieldOffset(97)]
                    public byte IsDependent;

                    [FieldOffset(98)]
                    public byte IsImplicit;

                    [FieldOffset(100)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(104)]
                    public uint DefinitionOrder;

                    [FieldOffset(108)]
                    internal global::Std.Vector.__Internal PreprocessedEntities;

                    [FieldOffset(120)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(124)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(128)]
                    public global::CppSharp.Parser.AST.QualifiedType.__Internal QualifiedType;

                    [FieldOffset(136)]
                    public global::System.IntPtr Class;

                    [FieldOffset(140)]
                    public byte IsBitField;

                    [FieldOffset(144)]
                    public uint BitWidth;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Field@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Field@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1Field@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);
                }

                public static new Field __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new Field(native.ToPointer(), skipVTables);
                }

                public static Field __CreateInstance(Field.__Internal native, bool skipVTables = false)
                {
                    return new Field(native, skipVTables);
                }

                private static void* __CopyValue(Field.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(148);
                    global::CppSharp.Parser.AST.Field.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private Field(Field.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected Field(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public Field()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(148);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public Field(global::CppSharp.Parser.AST.Field _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(148);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public override void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Declaration __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public global::CppSharp.Parser.AST.QualifiedType QualifiedType
                {
                    get
                    {
                        return global::CppSharp.Parser.AST.QualifiedType.__CreateInstance(((__Internal*) __Instance)->QualifiedType);
                    }

                    set
                    {
                        ((__Internal*) __Instance)->QualifiedType = ReferenceEquals(value, null) ? new global::CppSharp.Parser.AST.QualifiedType.__Internal() : *(global::CppSharp.Parser.AST.QualifiedType.__Internal*) value.__Instance;
                    }
                }

                public global::CppSharp.Parser.AST.Class Class
                {
                    get
                    {
                        global::CppSharp.Parser.AST.Class __result0;
                        if (((__Internal*) __Instance)->Class == IntPtr.Zero) __result0 = null;
                        else if (global::CppSharp.Parser.AST.Class.NativeToManagedMap.ContainsKey(((__Internal*) __Instance)->Class))
                            __result0 = (global::CppSharp.Parser.AST.Class) global::CppSharp.Parser.AST.Class.NativeToManagedMap[((__Internal*) __Instance)->Class];
                        else __result0 = global::CppSharp.Parser.AST.Class.__CreateInstance(((__Internal*) __Instance)->Class);
                        return __result0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Class = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public bool IsBitField
                {
                    get
                    {
                        return ((__Internal*) __Instance)->IsBitField != 0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->IsBitField = (byte) (value ? 1 : 0);
                    }
                }

                public uint BitWidth
                {
                    get
                    {
                        return ((__Internal*) __Instance)->BitWidth;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->BitWidth = value;
                    }
                }
            }

            public unsafe partial class AccessSpecifierDecl : global::CppSharp.Parser.AST.Declaration, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 128)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public global::CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public global::CppSharp.Parser.SourceLocation.__Internal Location;

                    [FieldOffset(16)]
                    public int LineNumberStart;

                    [FieldOffset(20)]
                    public int LineNumberEnd;

                    [FieldOffset(24)]
                    public global::Std.BasicString.__Internal Name;

                    [FieldOffset(48)]
                    public global::Std.BasicString.__Internal USR;

                    [FieldOffset(72)]
                    public global::Std.BasicString.__Internal DebugText;

                    [FieldOffset(96)]
                    public byte IsIncomplete;

                    [FieldOffset(97)]
                    public byte IsDependent;

                    [FieldOffset(98)]
                    public byte IsImplicit;

                    [FieldOffset(100)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(104)]
                    public uint DefinitionOrder;

                    [FieldOffset(108)]
                    internal global::Std.Vector.__Internal PreprocessedEntities;

                    [FieldOffset(120)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(124)]
                    public global::System.IntPtr Comment;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0AccessSpecifierDecl@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0AccessSpecifierDecl@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1AccessSpecifierDecl@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);
                }

                public static new AccessSpecifierDecl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new AccessSpecifierDecl(native.ToPointer(), skipVTables);
                }

                public static AccessSpecifierDecl __CreateInstance(AccessSpecifierDecl.__Internal native, bool skipVTables = false)
                {
                    return new AccessSpecifierDecl(native, skipVTables);
                }

                private static void* __CopyValue(AccessSpecifierDecl.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(128);
                    global::CppSharp.Parser.AST.AccessSpecifierDecl.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private AccessSpecifierDecl(AccessSpecifierDecl.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected AccessSpecifierDecl(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public AccessSpecifierDecl()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(128);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public AccessSpecifierDecl(global::CppSharp.Parser.AST.AccessSpecifierDecl _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(128);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public override void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Declaration __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }
            }

            public unsafe partial class Class : global::CppSharp.Parser.AST.DeclarationContext, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 312)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public global::CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public global::CppSharp.Parser.SourceLocation.__Internal Location;

                    [FieldOffset(16)]
                    public int LineNumberStart;

                    [FieldOffset(20)]
                    public int LineNumberEnd;

                    [FieldOffset(24)]
                    public global::Std.BasicString.__Internal Name;

                    [FieldOffset(48)]
                    public global::Std.BasicString.__Internal USR;

                    [FieldOffset(72)]
                    public global::Std.BasicString.__Internal DebugText;

                    [FieldOffset(96)]
                    public byte IsIncomplete;

                    [FieldOffset(97)]
                    public byte IsDependent;

                    [FieldOffset(98)]
                    public byte IsImplicit;

                    [FieldOffset(100)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(104)]
                    public uint DefinitionOrder;

                    [FieldOffset(108)]
                    internal global::Std.Vector.__Internal PreprocessedEntities;

                    [FieldOffset(120)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(124)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(128)]
                    internal global::Std.Vector.__Internal Namespaces;

                    [FieldOffset(140)]
                    internal global::Std.Vector.__Internal Enums;

                    [FieldOffset(152)]
                    internal global::Std.Vector.__Internal Functions;

                    [FieldOffset(164)]
                    internal global::Std.Vector.__Internal Classes;

                    [FieldOffset(176)]
                    internal global::Std.Vector.__Internal Templates;

                    [FieldOffset(188)]
                    internal global::Std.Vector.__Internal Typedefs;

                    [FieldOffset(200)]
                    internal global::Std.Vector.__Internal TypeAliases;

                    [FieldOffset(212)]
                    internal global::Std.Vector.__Internal Variables;

                    [FieldOffset(224)]
                    internal global::Std.Vector.__Internal Friends;

                    [FieldOffset(236)]
                    internal global::Std.Map.__Internal Anonymous;

                    [FieldOffset(244)]
                    public byte IsAnonymous;

                    [FieldOffset(248)]
                    internal global::Std.Vector.__Internal Bases;

                    [FieldOffset(260)]
                    internal global::Std.Vector.__Internal Fields;

                    [FieldOffset(272)]
                    internal global::Std.Vector.__Internal Methods;

                    [FieldOffset(284)]
                    internal global::Std.Vector.__Internal Specifiers;

                    [FieldOffset(296)]
                    public byte IsPOD;

                    [FieldOffset(297)]
                    public byte IsAbstract;

                    [FieldOffset(298)]
                    public byte IsUnion;

                    [FieldOffset(299)]
                    public byte IsDynamic;

                    [FieldOffset(300)]
                    public byte IsPolymorphic;

                    [FieldOffset(301)]
                    public byte HasNonTrivialDefaultConstructor;

                    [FieldOffset(302)]
                    public byte HasNonTrivialCopyConstructor;

                    [FieldOffset(303)]
                    public byte HasNonTrivialDestructor;

                    [FieldOffset(304)]
                    public byte IsExternCContext;

                    [FieldOffset(308)]
                    public global::System.IntPtr Layout;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Class@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Class@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1Class@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getBases@Class@AST@CppParser@CppSharp@@QAEPAUBaseClassSpecifier@234@I@Z")]
                    internal static extern global::System.IntPtr GetBases_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addBases@Class@AST@CppParser@CppSharp@@QAEXAAPAUBaseClassSpecifier@234@@Z")]
                    internal static extern void AddBases_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearBases@Class@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void ClearBases_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getFields@Class@AST@CppParser@CppSharp@@QAEPAVField@234@I@Z")]
                    internal static extern global::System.IntPtr GetFields_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addFields@Class@AST@CppParser@CppSharp@@QAEXAAPAVField@234@@Z")]
                    internal static extern void AddFields_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearFields@Class@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void ClearFields_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getMethods@Class@AST@CppParser@CppSharp@@QAEPAVMethod@234@I@Z")]
                    internal static extern global::System.IntPtr GetMethods_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addMethods@Class@AST@CppParser@CppSharp@@QAEXAAPAVMethod@234@@Z")]
                    internal static extern void AddMethods_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearMethods@Class@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void ClearMethods_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getSpecifiers@Class@AST@CppParser@CppSharp@@QAEPAVAccessSpecifierDecl@234@I@Z")]
                    internal static extern global::System.IntPtr GetSpecifiers_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addSpecifiers@Class@AST@CppParser@CppSharp@@QAEXAAPAVAccessSpecifierDecl@234@@Z")]
                    internal static extern void AddSpecifiers_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearSpecifiers@Class@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void ClearSpecifiers_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getBasesCount@Class@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint GetBasesCount_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getFieldsCount@Class@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint GetFieldsCount_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getMethodsCount@Class@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint GetMethodsCount_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getSpecifiersCount@Class@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint GetSpecifiersCount_0(global::System.IntPtr instance);
                }

                public static new Class __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new Class(native.ToPointer(), skipVTables);
                }

                public static Class __CreateInstance(Class.__Internal native, bool skipVTables = false)
                {
                    return new Class(native, skipVTables);
                }

                private static void* __CopyValue(Class.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(312);
                    global::CppSharp.Parser.AST.Class.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private Class(Class.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected Class(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public Class()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(312);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public Class(global::CppSharp.Parser.AST.Class _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(312);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public override void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Declaration __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public global::CppSharp.Parser.AST.BaseClassSpecifier GetBases(uint i)
                {
                    var __ret = __Internal.GetBases_0((__Instance + __PointerAdjustment), i);
                    global::CppSharp.Parser.AST.BaseClassSpecifier __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (global::CppSharp.Parser.AST.BaseClassSpecifier.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (global::CppSharp.Parser.AST.BaseClassSpecifier) global::CppSharp.Parser.AST.BaseClassSpecifier.NativeToManagedMap[__ret];
                    else __result0 = global::CppSharp.Parser.AST.BaseClassSpecifier.__CreateInstance(__ret);
                    return __result0;
                }

                public void AddBases(global::CppSharp.Parser.AST.BaseClassSpecifier s)
                {
                    if (ReferenceEquals(s, null))
                        throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = s.__Instance;
                    __Internal.AddBases_0((__Instance + __PointerAdjustment), __arg0);
                }

                public void ClearBases()
                {
                    __Internal.ClearBases_0((__Instance + __PointerAdjustment));
                }

                public global::CppSharp.Parser.AST.Field GetFields(uint i)
                {
                    var __ret = __Internal.GetFields_0((__Instance + __PointerAdjustment), i);
                    global::CppSharp.Parser.AST.Field __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (global::CppSharp.Parser.AST.Field.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (global::CppSharp.Parser.AST.Field) global::CppSharp.Parser.AST.Field.NativeToManagedMap[__ret];
                    else __result0 = global::CppSharp.Parser.AST.Field.__CreateInstance(__ret);
                    return __result0;
                }

                public void AddFields(global::CppSharp.Parser.AST.Field s)
                {
                    if (ReferenceEquals(s, null))
                        throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = s.__Instance;
                    __Internal.AddFields_0((__Instance + __PointerAdjustment), __arg0);
                }

                public void ClearFields()
                {
                    __Internal.ClearFields_0((__Instance + __PointerAdjustment));
                }

                public global::CppSharp.Parser.AST.Method GetMethods(uint i)
                {
                    var __ret = __Internal.GetMethods_0((__Instance + __PointerAdjustment), i);
                    global::CppSharp.Parser.AST.Method __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (global::CppSharp.Parser.AST.Method.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (global::CppSharp.Parser.AST.Method) global::CppSharp.Parser.AST.Method.NativeToManagedMap[__ret];
                    else __result0 = global::CppSharp.Parser.AST.Method.__CreateInstance(__ret);
                    return __result0;
                }

                public void AddMethods(global::CppSharp.Parser.AST.Method s)
                {
                    if (ReferenceEquals(s, null))
                        throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = s.__Instance;
                    __Internal.AddMethods_0((__Instance + __PointerAdjustment), __arg0);
                }

                public void ClearMethods()
                {
                    __Internal.ClearMethods_0((__Instance + __PointerAdjustment));
                }

                public global::CppSharp.Parser.AST.AccessSpecifierDecl GetSpecifiers(uint i)
                {
                    var __ret = __Internal.GetSpecifiers_0((__Instance + __PointerAdjustment), i);
                    global::CppSharp.Parser.AST.AccessSpecifierDecl __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (global::CppSharp.Parser.AST.AccessSpecifierDecl.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (global::CppSharp.Parser.AST.AccessSpecifierDecl) global::CppSharp.Parser.AST.AccessSpecifierDecl.NativeToManagedMap[__ret];
                    else __result0 = global::CppSharp.Parser.AST.AccessSpecifierDecl.__CreateInstance(__ret);
                    return __result0;
                }

                public void AddSpecifiers(global::CppSharp.Parser.AST.AccessSpecifierDecl s)
                {
                    if (ReferenceEquals(s, null))
                        throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = s.__Instance;
                    __Internal.AddSpecifiers_0((__Instance + __PointerAdjustment), __arg0);
                }

                public void ClearSpecifiers()
                {
                    __Internal.ClearSpecifiers_0((__Instance + __PointerAdjustment));
                }

                public bool IsPOD
                {
                    get
                    {
                        return ((__Internal*) __Instance)->IsPOD != 0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->IsPOD = (byte) (value ? 1 : 0);
                    }
                }

                public bool IsAbstract
                {
                    get
                    {
                        return ((__Internal*) __Instance)->IsAbstract != 0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->IsAbstract = (byte) (value ? 1 : 0);
                    }
                }

                public bool IsUnion
                {
                    get
                    {
                        return ((__Internal*) __Instance)->IsUnion != 0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->IsUnion = (byte) (value ? 1 : 0);
                    }
                }

                public bool IsDynamic
                {
                    get
                    {
                        return ((__Internal*) __Instance)->IsDynamic != 0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->IsDynamic = (byte) (value ? 1 : 0);
                    }
                }

                public bool IsPolymorphic
                {
                    get
                    {
                        return ((__Internal*) __Instance)->IsPolymorphic != 0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->IsPolymorphic = (byte) (value ? 1 : 0);
                    }
                }

                public bool HasNonTrivialDefaultConstructor
                {
                    get
                    {
                        return ((__Internal*) __Instance)->HasNonTrivialDefaultConstructor != 0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->HasNonTrivialDefaultConstructor = (byte) (value ? 1 : 0);
                    }
                }

                public bool HasNonTrivialCopyConstructor
                {
                    get
                    {
                        return ((__Internal*) __Instance)->HasNonTrivialCopyConstructor != 0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->HasNonTrivialCopyConstructor = (byte) (value ? 1 : 0);
                    }
                }

                public bool HasNonTrivialDestructor
                {
                    get
                    {
                        return ((__Internal*) __Instance)->HasNonTrivialDestructor != 0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->HasNonTrivialDestructor = (byte) (value ? 1 : 0);
                    }
                }

                public bool IsExternCContext
                {
                    get
                    {
                        return ((__Internal*) __Instance)->IsExternCContext != 0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->IsExternCContext = (byte) (value ? 1 : 0);
                    }
                }

                public global::CppSharp.Parser.AST.ClassLayout Layout
                {
                    get
                    {
                        global::CppSharp.Parser.AST.ClassLayout __result0;
                        if (((__Internal*) __Instance)->Layout == IntPtr.Zero) __result0 = null;
                        else if (global::CppSharp.Parser.AST.ClassLayout.NativeToManagedMap.ContainsKey(((__Internal*) __Instance)->Layout))
                            __result0 = (global::CppSharp.Parser.AST.ClassLayout) global::CppSharp.Parser.AST.ClassLayout.NativeToManagedMap[((__Internal*) __Instance)->Layout];
                        else __result0 = global::CppSharp.Parser.AST.ClassLayout.__CreateInstance(((__Internal*) __Instance)->Layout);
                        return __result0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Layout = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public uint BasesCount
                {
                    get
                    {
                        var __ret = __Internal.GetBasesCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }

                public uint FieldsCount
                {
                    get
                    {
                        var __ret = __Internal.GetFieldsCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }

                public uint MethodsCount
                {
                    get
                    {
                        var __ret = __Internal.GetMethodsCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }

                public uint SpecifiersCount
                {
                    get
                    {
                        var __ret = __Internal.GetSpecifiersCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }
            }

            public unsafe partial class Template : global::CppSharp.Parser.AST.Declaration, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 144)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public global::CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public global::CppSharp.Parser.SourceLocation.__Internal Location;

                    [FieldOffset(16)]
                    public int LineNumberStart;

                    [FieldOffset(20)]
                    public int LineNumberEnd;

                    [FieldOffset(24)]
                    public global::Std.BasicString.__Internal Name;

                    [FieldOffset(48)]
                    public global::Std.BasicString.__Internal USR;

                    [FieldOffset(72)]
                    public global::Std.BasicString.__Internal DebugText;

                    [FieldOffset(96)]
                    public byte IsIncomplete;

                    [FieldOffset(97)]
                    public byte IsDependent;

                    [FieldOffset(98)]
                    public byte IsImplicit;

                    [FieldOffset(100)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(104)]
                    public uint DefinitionOrder;

                    [FieldOffset(108)]
                    internal global::Std.Vector.__Internal PreprocessedEntities;

                    [FieldOffset(120)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(124)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(128)]
                    public global::System.IntPtr TemplatedDecl;

                    [FieldOffset(132)]
                    internal global::Std.Vector.__Internal Parameters;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Template@AST@CppParser@CppSharp@@QAE@W4DeclarationKind@123@@Z")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance, global::CppSharp.Parser.AST.DeclarationKind kind);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Template@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_1(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Template@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_3(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1Template@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getParameters@Template@AST@CppParser@CppSharp@@QAEPAVDeclaration@234@I@Z")]
                    internal static extern global::System.IntPtr GetParameters_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addParameters@Template@AST@CppParser@CppSharp@@QAEXAAPAVDeclaration@234@@Z")]
                    internal static extern void AddParameters_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearParameters@Template@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void ClearParameters_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getParametersCount@Template@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint GetParametersCount_0(global::System.IntPtr instance);
                }

                public static new Template __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new Template(native.ToPointer(), skipVTables);
                }

                public static Template __CreateInstance(Template.__Internal native, bool skipVTables = false)
                {
                    return new Template(native, skipVTables);
                }

                private static void* __CopyValue(Template.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(144);
                    global::CppSharp.Parser.AST.Template.__Internal.cctor_3(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private Template(Template.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected Template(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public Template(global::CppSharp.Parser.AST.DeclarationKind kind)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(144);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var __arg0 = kind;
                    __Internal.ctor_0((__Instance + __PointerAdjustment), __arg0);
                }

                public Template()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(144);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_1((__Instance + __PointerAdjustment));
                }

                public Template(global::CppSharp.Parser.AST.Template _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(144);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_3((__Instance + __PointerAdjustment), __arg0);
                }

                public override void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Declaration __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public global::CppSharp.Parser.AST.Declaration GetParameters(uint i)
                {
                    var __ret = __Internal.GetParameters_0((__Instance + __PointerAdjustment), i);
                    global::CppSharp.Parser.AST.Declaration __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (global::CppSharp.Parser.AST.Declaration.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (global::CppSharp.Parser.AST.Declaration) global::CppSharp.Parser.AST.Declaration.NativeToManagedMap[__ret];
                    else __result0 = global::CppSharp.Parser.AST.Declaration.__CreateInstance(__ret);
                    return __result0;
                }

                public void AddParameters(global::CppSharp.Parser.AST.Declaration s)
                {
                    if (ReferenceEquals(s, null))
                        throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = s.__Instance;
                    __Internal.AddParameters_0((__Instance + __PointerAdjustment), __arg0);
                }

                public void ClearParameters()
                {
                    __Internal.ClearParameters_0((__Instance + __PointerAdjustment));
                }

                public static implicit operator global::CppSharp.Parser.AST.Template(global::CppSharp.Parser.AST.DeclarationKind kind)
                {
                    return new global::CppSharp.Parser.AST.Template(kind);
                }

                public global::CppSharp.Parser.AST.Declaration TemplatedDecl
                {
                    get
                    {
                        global::CppSharp.Parser.AST.Declaration __result0;
                        if (((__Internal*) __Instance)->TemplatedDecl == IntPtr.Zero) __result0 = null;
                        else if (global::CppSharp.Parser.AST.Declaration.NativeToManagedMap.ContainsKey(((__Internal*) __Instance)->TemplatedDecl))
                            __result0 = (global::CppSharp.Parser.AST.Declaration) global::CppSharp.Parser.AST.Declaration.NativeToManagedMap[((__Internal*) __Instance)->TemplatedDecl];
                        else __result0 = global::CppSharp.Parser.AST.Declaration.__CreateInstance(((__Internal*) __Instance)->TemplatedDecl);
                        return __result0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->TemplatedDecl = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public uint ParametersCount
                {
                    get
                    {
                        var __ret = __Internal.GetParametersCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }
            }

            public unsafe partial class TypeAliasTemplate : global::CppSharp.Parser.AST.Template, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 144)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public global::CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public global::CppSharp.Parser.SourceLocation.__Internal Location;

                    [FieldOffset(16)]
                    public int LineNumberStart;

                    [FieldOffset(20)]
                    public int LineNumberEnd;

                    [FieldOffset(24)]
                    public global::Std.BasicString.__Internal Name;

                    [FieldOffset(48)]
                    public global::Std.BasicString.__Internal USR;

                    [FieldOffset(72)]
                    public global::Std.BasicString.__Internal DebugText;

                    [FieldOffset(96)]
                    public byte IsIncomplete;

                    [FieldOffset(97)]
                    public byte IsDependent;

                    [FieldOffset(98)]
                    public byte IsImplicit;

                    [FieldOffset(100)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(104)]
                    public uint DefinitionOrder;

                    [FieldOffset(108)]
                    internal global::Std.Vector.__Internal PreprocessedEntities;

                    [FieldOffset(120)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(124)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(128)]
                    public global::System.IntPtr TemplatedDecl;

                    [FieldOffset(132)]
                    internal global::Std.Vector.__Internal Parameters;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TypeAliasTemplate@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TypeAliasTemplate@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1TypeAliasTemplate@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);
                }

                public static new TypeAliasTemplate __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new TypeAliasTemplate(native.ToPointer(), skipVTables);
                }

                public static TypeAliasTemplate __CreateInstance(TypeAliasTemplate.__Internal native, bool skipVTables = false)
                {
                    return new TypeAliasTemplate(native, skipVTables);
                }

                private static void* __CopyValue(TypeAliasTemplate.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(144);
                    global::CppSharp.Parser.AST.TypeAliasTemplate.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private TypeAliasTemplate(TypeAliasTemplate.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected TypeAliasTemplate(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public TypeAliasTemplate()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(144);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public TypeAliasTemplate(global::CppSharp.Parser.AST.TypeAliasTemplate _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(144);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public override void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Declaration __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }
            }

            public unsafe partial class TemplateParameter : global::CppSharp.Parser.AST.Declaration, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 140)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public global::CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public global::CppSharp.Parser.SourceLocation.__Internal Location;

                    [FieldOffset(16)]
                    public int LineNumberStart;

                    [FieldOffset(20)]
                    public int LineNumberEnd;

                    [FieldOffset(24)]
                    public global::Std.BasicString.__Internal Name;

                    [FieldOffset(48)]
                    public global::Std.BasicString.__Internal USR;

                    [FieldOffset(72)]
                    public global::Std.BasicString.__Internal DebugText;

                    [FieldOffset(96)]
                    public byte IsIncomplete;

                    [FieldOffset(97)]
                    public byte IsDependent;

                    [FieldOffset(98)]
                    public byte IsImplicit;

                    [FieldOffset(100)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(104)]
                    public uint DefinitionOrder;

                    [FieldOffset(108)]
                    internal global::Std.Vector.__Internal PreprocessedEntities;

                    [FieldOffset(120)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(124)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(128)]
                    public uint Depth;

                    [FieldOffset(132)]
                    public uint Index;

                    [FieldOffset(136)]
                    public byte IsParameterPack;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TemplateParameter@AST@CppParser@CppSharp@@QAE@W4DeclarationKind@123@@Z")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance, global::CppSharp.Parser.AST.DeclarationKind kind);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TemplateParameter@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1TemplateParameter@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);
                }

                public static new TemplateParameter __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new TemplateParameter(native.ToPointer(), skipVTables);
                }

                public static TemplateParameter __CreateInstance(TemplateParameter.__Internal native, bool skipVTables = false)
                {
                    return new TemplateParameter(native, skipVTables);
                }

                private static void* __CopyValue(TemplateParameter.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(140);
                    global::CppSharp.Parser.AST.TemplateParameter.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private TemplateParameter(TemplateParameter.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected TemplateParameter(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public TemplateParameter(global::CppSharp.Parser.AST.DeclarationKind kind)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(140);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var __arg0 = kind;
                    __Internal.ctor_0((__Instance + __PointerAdjustment), __arg0);
                }

                public TemplateParameter(global::CppSharp.Parser.AST.TemplateParameter _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(140);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public override void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Declaration __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public static implicit operator global::CppSharp.Parser.AST.TemplateParameter(global::CppSharp.Parser.AST.DeclarationKind kind)
                {
                    return new global::CppSharp.Parser.AST.TemplateParameter(kind);
                }

                public uint Depth
                {
                    get
                    {
                        return ((__Internal*) __Instance)->Depth;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Depth = value;
                    }
                }

                public uint Index
                {
                    get
                    {
                        return ((__Internal*) __Instance)->Index;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Index = value;
                    }
                }

                public bool IsParameterPack
                {
                    get
                    {
                        return ((__Internal*) __Instance)->IsParameterPack != 0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->IsParameterPack = (byte) (value ? 1 : 0);
                    }
                }
            }

            public unsafe partial class TemplateTemplateParameter : global::CppSharp.Parser.AST.Template, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 148)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public global::CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public global::CppSharp.Parser.SourceLocation.__Internal Location;

                    [FieldOffset(16)]
                    public int LineNumberStart;

                    [FieldOffset(20)]
                    public int LineNumberEnd;

                    [FieldOffset(24)]
                    public global::Std.BasicString.__Internal Name;

                    [FieldOffset(48)]
                    public global::Std.BasicString.__Internal USR;

                    [FieldOffset(72)]
                    public global::Std.BasicString.__Internal DebugText;

                    [FieldOffset(96)]
                    public byte IsIncomplete;

                    [FieldOffset(97)]
                    public byte IsDependent;

                    [FieldOffset(98)]
                    public byte IsImplicit;

                    [FieldOffset(100)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(104)]
                    public uint DefinitionOrder;

                    [FieldOffset(108)]
                    internal global::Std.Vector.__Internal PreprocessedEntities;

                    [FieldOffset(120)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(124)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(128)]
                    public global::System.IntPtr TemplatedDecl;

                    [FieldOffset(132)]
                    internal global::Std.Vector.__Internal Parameters;

                    [FieldOffset(144)]
                    public byte IsParameterPack;

                    [FieldOffset(145)]
                    public byte IsPackExpansion;

                    [FieldOffset(146)]
                    public byte IsExpandedParameterPack;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TemplateTemplateParameter@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TemplateTemplateParameter@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1TemplateTemplateParameter@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);
                }

                public static new TemplateTemplateParameter __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new TemplateTemplateParameter(native.ToPointer(), skipVTables);
                }

                public static TemplateTemplateParameter __CreateInstance(TemplateTemplateParameter.__Internal native, bool skipVTables = false)
                {
                    return new TemplateTemplateParameter(native, skipVTables);
                }

                private static void* __CopyValue(TemplateTemplateParameter.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(148);
                    global::CppSharp.Parser.AST.TemplateTemplateParameter.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private TemplateTemplateParameter(TemplateTemplateParameter.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected TemplateTemplateParameter(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public TemplateTemplateParameter()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(148);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public TemplateTemplateParameter(global::CppSharp.Parser.AST.TemplateTemplateParameter _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(148);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public override void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Declaration __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public bool IsParameterPack
                {
                    get
                    {
                        return ((__Internal*) __Instance)->IsParameterPack != 0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->IsParameterPack = (byte) (value ? 1 : 0);
                    }
                }

                public bool IsPackExpansion
                {
                    get
                    {
                        return ((__Internal*) __Instance)->IsPackExpansion != 0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->IsPackExpansion = (byte) (value ? 1 : 0);
                    }
                }

                public bool IsExpandedParameterPack
                {
                    get
                    {
                        return ((__Internal*) __Instance)->IsExpandedParameterPack != 0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->IsExpandedParameterPack = (byte) (value ? 1 : 0);
                    }
                }
            }

            public unsafe partial class TypeTemplateParameter : global::CppSharp.Parser.AST.TemplateParameter, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 148)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public global::CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public global::CppSharp.Parser.SourceLocation.__Internal Location;

                    [FieldOffset(16)]
                    public int LineNumberStart;

                    [FieldOffset(20)]
                    public int LineNumberEnd;

                    [FieldOffset(24)]
                    public global::Std.BasicString.__Internal Name;

                    [FieldOffset(48)]
                    public global::Std.BasicString.__Internal USR;

                    [FieldOffset(72)]
                    public global::Std.BasicString.__Internal DebugText;

                    [FieldOffset(96)]
                    public byte IsIncomplete;

                    [FieldOffset(97)]
                    public byte IsDependent;

                    [FieldOffset(98)]
                    public byte IsImplicit;

                    [FieldOffset(100)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(104)]
                    public uint DefinitionOrder;

                    [FieldOffset(108)]
                    internal global::Std.Vector.__Internal PreprocessedEntities;

                    [FieldOffset(120)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(124)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(128)]
                    public uint Depth;

                    [FieldOffset(132)]
                    public uint Index;

                    [FieldOffset(136)]
                    public byte IsParameterPack;

                    [FieldOffset(140)]
                    public global::CppSharp.Parser.AST.QualifiedType.__Internal DefaultArgument;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TypeTemplateParameter@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TypeTemplateParameter@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1TypeTemplateParameter@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);
                }

                public static new TypeTemplateParameter __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new TypeTemplateParameter(native.ToPointer(), skipVTables);
                }

                public static TypeTemplateParameter __CreateInstance(TypeTemplateParameter.__Internal native, bool skipVTables = false)
                {
                    return new TypeTemplateParameter(native, skipVTables);
                }

                private static void* __CopyValue(TypeTemplateParameter.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(148);
                    global::CppSharp.Parser.AST.TypeTemplateParameter.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private TypeTemplateParameter(TypeTemplateParameter.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected TypeTemplateParameter(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public TypeTemplateParameter()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(148);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public TypeTemplateParameter(global::CppSharp.Parser.AST.TypeTemplateParameter _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(148);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public override void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Declaration __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public global::CppSharp.Parser.AST.QualifiedType DefaultArgument
                {
                    get
                    {
                        return global::CppSharp.Parser.AST.QualifiedType.__CreateInstance(((__Internal*) __Instance)->DefaultArgument);
                    }

                    set
                    {
                        ((__Internal*) __Instance)->DefaultArgument = ReferenceEquals(value, null) ? new global::CppSharp.Parser.AST.QualifiedType.__Internal() : *(global::CppSharp.Parser.AST.QualifiedType.__Internal*) value.__Instance;
                    }
                }
            }

            public unsafe partial class NonTypeTemplateParameter : global::CppSharp.Parser.AST.TemplateParameter, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 152)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public global::CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public global::CppSharp.Parser.SourceLocation.__Internal Location;

                    [FieldOffset(16)]
                    public int LineNumberStart;

                    [FieldOffset(20)]
                    public int LineNumberEnd;

                    [FieldOffset(24)]
                    public global::Std.BasicString.__Internal Name;

                    [FieldOffset(48)]
                    public global::Std.BasicString.__Internal USR;

                    [FieldOffset(72)]
                    public global::Std.BasicString.__Internal DebugText;

                    [FieldOffset(96)]
                    public byte IsIncomplete;

                    [FieldOffset(97)]
                    public byte IsDependent;

                    [FieldOffset(98)]
                    public byte IsImplicit;

                    [FieldOffset(100)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(104)]
                    public uint DefinitionOrder;

                    [FieldOffset(108)]
                    internal global::Std.Vector.__Internal PreprocessedEntities;

                    [FieldOffset(120)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(124)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(128)]
                    public uint Depth;

                    [FieldOffset(132)]
                    public uint Index;

                    [FieldOffset(136)]
                    public byte IsParameterPack;

                    [FieldOffset(140)]
                    public global::System.IntPtr DefaultArgument;

                    [FieldOffset(144)]
                    public uint Position;

                    [FieldOffset(148)]
                    public byte IsPackExpansion;

                    [FieldOffset(149)]
                    public byte IsExpandedParameterPack;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0NonTypeTemplateParameter@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0NonTypeTemplateParameter@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1NonTypeTemplateParameter@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);
                }

                public static new NonTypeTemplateParameter __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new NonTypeTemplateParameter(native.ToPointer(), skipVTables);
                }

                public static NonTypeTemplateParameter __CreateInstance(NonTypeTemplateParameter.__Internal native, bool skipVTables = false)
                {
                    return new NonTypeTemplateParameter(native, skipVTables);
                }

                private static void* __CopyValue(NonTypeTemplateParameter.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(152);
                    global::CppSharp.Parser.AST.NonTypeTemplateParameter.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private NonTypeTemplateParameter(NonTypeTemplateParameter.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected NonTypeTemplateParameter(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public NonTypeTemplateParameter()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(152);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public NonTypeTemplateParameter(global::CppSharp.Parser.AST.NonTypeTemplateParameter _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(152);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public override void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Declaration __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public global::CppSharp.Parser.AST.Expression DefaultArgument
                {
                    get
                    {
                        global::CppSharp.Parser.AST.Expression __result0;
                        if (((__Internal*) __Instance)->DefaultArgument == IntPtr.Zero) __result0 = null;
                        else if (global::CppSharp.Parser.AST.Expression.NativeToManagedMap.ContainsKey(((__Internal*) __Instance)->DefaultArgument))
                            __result0 = (global::CppSharp.Parser.AST.Expression) global::CppSharp.Parser.AST.Expression.NativeToManagedMap[((__Internal*) __Instance)->DefaultArgument];
                        else __result0 = global::CppSharp.Parser.AST.Expression.__CreateInstance(((__Internal*) __Instance)->DefaultArgument);
                        return __result0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->DefaultArgument = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public uint Position
                {
                    get
                    {
                        return ((__Internal*) __Instance)->Position;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Position = value;
                    }
                }

                public bool IsPackExpansion
                {
                    get
                    {
                        return ((__Internal*) __Instance)->IsPackExpansion != 0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->IsPackExpansion = (byte) (value ? 1 : 0);
                    }
                }

                public bool IsExpandedParameterPack
                {
                    get
                    {
                        return ((__Internal*) __Instance)->IsExpandedParameterPack != 0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->IsExpandedParameterPack = (byte) (value ? 1 : 0);
                    }
                }
            }

            public unsafe partial class ClassTemplate : global::CppSharp.Parser.AST.Template, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 156)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public global::CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public global::CppSharp.Parser.SourceLocation.__Internal Location;

                    [FieldOffset(16)]
                    public int LineNumberStart;

                    [FieldOffset(20)]
                    public int LineNumberEnd;

                    [FieldOffset(24)]
                    public global::Std.BasicString.__Internal Name;

                    [FieldOffset(48)]
                    public global::Std.BasicString.__Internal USR;

                    [FieldOffset(72)]
                    public global::Std.BasicString.__Internal DebugText;

                    [FieldOffset(96)]
                    public byte IsIncomplete;

                    [FieldOffset(97)]
                    public byte IsDependent;

                    [FieldOffset(98)]
                    public byte IsImplicit;

                    [FieldOffset(100)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(104)]
                    public uint DefinitionOrder;

                    [FieldOffset(108)]
                    internal global::Std.Vector.__Internal PreprocessedEntities;

                    [FieldOffset(120)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(124)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(128)]
                    public global::System.IntPtr TemplatedDecl;

                    [FieldOffset(132)]
                    internal global::Std.Vector.__Internal Parameters;

                    [FieldOffset(144)]
                    internal global::Std.Vector.__Internal Specializations;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0ClassTemplate@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0ClassTemplate@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1ClassTemplate@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getSpecializations@ClassTemplate@AST@CppParser@CppSharp@@QAEPAVClassTemplateSpecialization@234@I@Z")]
                    internal static extern global::System.IntPtr GetSpecializations_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addSpecializations@ClassTemplate@AST@CppParser@CppSharp@@QAEXAAPAVClassTemplateSpecialization@234@@Z")]
                    internal static extern void AddSpecializations_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearSpecializations@ClassTemplate@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void ClearSpecializations_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getSpecializationsCount@ClassTemplate@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint GetSpecializationsCount_0(global::System.IntPtr instance);
                }

                public static new ClassTemplate __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new ClassTemplate(native.ToPointer(), skipVTables);
                }

                public static ClassTemplate __CreateInstance(ClassTemplate.__Internal native, bool skipVTables = false)
                {
                    return new ClassTemplate(native, skipVTables);
                }

                private static void* __CopyValue(ClassTemplate.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(156);
                    global::CppSharp.Parser.AST.ClassTemplate.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private ClassTemplate(ClassTemplate.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected ClassTemplate(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public ClassTemplate()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(156);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public ClassTemplate(global::CppSharp.Parser.AST.ClassTemplate _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(156);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public override void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Declaration __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public global::CppSharp.Parser.AST.ClassTemplateSpecialization GetSpecializations(uint i)
                {
                    var __ret = __Internal.GetSpecializations_0((__Instance + __PointerAdjustment), i);
                    global::CppSharp.Parser.AST.ClassTemplateSpecialization __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (global::CppSharp.Parser.AST.ClassTemplateSpecialization.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (global::CppSharp.Parser.AST.ClassTemplateSpecialization) global::CppSharp.Parser.AST.ClassTemplateSpecialization.NativeToManagedMap[__ret];
                    else __result0 = global::CppSharp.Parser.AST.ClassTemplateSpecialization.__CreateInstance(__ret);
                    return __result0;
                }

                public void AddSpecializations(global::CppSharp.Parser.AST.ClassTemplateSpecialization s)
                {
                    if (ReferenceEquals(s, null))
                        throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = s.__Instance;
                    __Internal.AddSpecializations_0((__Instance + __PointerAdjustment), __arg0);
                }

                public void ClearSpecializations()
                {
                    __Internal.ClearSpecializations_0((__Instance + __PointerAdjustment));
                }

                public uint SpecializationsCount
                {
                    get
                    {
                        var __ret = __Internal.GetSpecializationsCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }
            }

            public unsafe partial class ClassTemplateSpecialization : global::CppSharp.Parser.AST.Class, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 332)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public global::CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public global::CppSharp.Parser.SourceLocation.__Internal Location;

                    [FieldOffset(16)]
                    public int LineNumberStart;

                    [FieldOffset(20)]
                    public int LineNumberEnd;

                    [FieldOffset(24)]
                    public global::Std.BasicString.__Internal Name;

                    [FieldOffset(48)]
                    public global::Std.BasicString.__Internal USR;

                    [FieldOffset(72)]
                    public global::Std.BasicString.__Internal DebugText;

                    [FieldOffset(96)]
                    public byte IsIncomplete;

                    [FieldOffset(97)]
                    public byte IsDependent;

                    [FieldOffset(98)]
                    public byte IsImplicit;

                    [FieldOffset(100)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(104)]
                    public uint DefinitionOrder;

                    [FieldOffset(108)]
                    internal global::Std.Vector.__Internal PreprocessedEntities;

                    [FieldOffset(120)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(124)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(128)]
                    internal global::Std.Vector.__Internal Namespaces;

                    [FieldOffset(140)]
                    internal global::Std.Vector.__Internal Enums;

                    [FieldOffset(152)]
                    internal global::Std.Vector.__Internal Functions;

                    [FieldOffset(164)]
                    internal global::Std.Vector.__Internal Classes;

                    [FieldOffset(176)]
                    internal global::Std.Vector.__Internal Templates;

                    [FieldOffset(188)]
                    internal global::Std.Vector.__Internal Typedefs;

                    [FieldOffset(200)]
                    internal global::Std.Vector.__Internal TypeAliases;

                    [FieldOffset(212)]
                    internal global::Std.Vector.__Internal Variables;

                    [FieldOffset(224)]
                    internal global::Std.Vector.__Internal Friends;

                    [FieldOffset(236)]
                    internal global::Std.Map.__Internal Anonymous;

                    [FieldOffset(244)]
                    public byte IsAnonymous;

                    [FieldOffset(248)]
                    internal global::Std.Vector.__Internal Bases;

                    [FieldOffset(260)]
                    internal global::Std.Vector.__Internal Fields;

                    [FieldOffset(272)]
                    internal global::Std.Vector.__Internal Methods;

                    [FieldOffset(284)]
                    internal global::Std.Vector.__Internal Specifiers;

                    [FieldOffset(296)]
                    public byte IsPOD;

                    [FieldOffset(297)]
                    public byte IsAbstract;

                    [FieldOffset(298)]
                    public byte IsUnion;

                    [FieldOffset(299)]
                    public byte IsDynamic;

                    [FieldOffset(300)]
                    public byte IsPolymorphic;

                    [FieldOffset(301)]
                    public byte HasNonTrivialDefaultConstructor;

                    [FieldOffset(302)]
                    public byte HasNonTrivialCopyConstructor;

                    [FieldOffset(303)]
                    public byte HasNonTrivialDestructor;

                    [FieldOffset(304)]
                    public byte IsExternCContext;

                    [FieldOffset(308)]
                    public global::System.IntPtr Layout;

                    [FieldOffset(312)]
                    public global::System.IntPtr TemplatedDecl;

                    [FieldOffset(316)]
                    internal global::Std.Vector.__Internal Arguments;

                    [FieldOffset(328)]
                    public global::CppSharp.Parser.AST.TemplateSpecializationKind SpecializationKind;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0ClassTemplateSpecialization@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0ClassTemplateSpecialization@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1ClassTemplateSpecialization@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getArguments@ClassTemplateSpecialization@AST@CppParser@CppSharp@@QAE?AUTemplateArgument@234@I@Z")]
                    internal static extern void GetArguments_0(global::System.IntPtr instance, global::System.IntPtr @return, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addArguments@ClassTemplateSpecialization@AST@CppParser@CppSharp@@QAEXAAUTemplateArgument@234@@Z")]
                    internal static extern void AddArguments_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearArguments@ClassTemplateSpecialization@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void ClearArguments_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getArgumentsCount@ClassTemplateSpecialization@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint GetArgumentsCount_0(global::System.IntPtr instance);
                }

                public static new ClassTemplateSpecialization __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new ClassTemplateSpecialization(native.ToPointer(), skipVTables);
                }

                public static ClassTemplateSpecialization __CreateInstance(ClassTemplateSpecialization.__Internal native, bool skipVTables = false)
                {
                    return new ClassTemplateSpecialization(native, skipVTables);
                }

                private static void* __CopyValue(ClassTemplateSpecialization.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(332);
                    global::CppSharp.Parser.AST.ClassTemplateSpecialization.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private ClassTemplateSpecialization(ClassTemplateSpecialization.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected ClassTemplateSpecialization(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public ClassTemplateSpecialization()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(332);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public ClassTemplateSpecialization(global::CppSharp.Parser.AST.ClassTemplateSpecialization _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(332);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public override void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Declaration __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public global::CppSharp.Parser.AST.TemplateArgument GetArguments(uint i)
                {
                    var __ret = new global::CppSharp.Parser.AST.TemplateArgument.__Internal();
                    __Internal.GetArguments_0((__Instance + __PointerAdjustment), new IntPtr(&__ret), i);
                    return global::CppSharp.Parser.AST.TemplateArgument.__CreateInstance(__ret);
                }

                public void AddArguments(global::CppSharp.Parser.AST.TemplateArgument s)
                {
                    if (ReferenceEquals(s, null))
                        throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = s.__Instance;
                    __Internal.AddArguments_0((__Instance + __PointerAdjustment), __arg0);
                }

                public void ClearArguments()
                {
                    __Internal.ClearArguments_0((__Instance + __PointerAdjustment));
                }

                public global::CppSharp.Parser.AST.ClassTemplate TemplatedDecl
                {
                    get
                    {
                        global::CppSharp.Parser.AST.ClassTemplate __result0;
                        if (((__Internal*) __Instance)->TemplatedDecl == IntPtr.Zero) __result0 = null;
                        else if (global::CppSharp.Parser.AST.ClassTemplate.NativeToManagedMap.ContainsKey(((__Internal*) __Instance)->TemplatedDecl))
                            __result0 = (global::CppSharp.Parser.AST.ClassTemplate) global::CppSharp.Parser.AST.ClassTemplate.NativeToManagedMap[((__Internal*) __Instance)->TemplatedDecl];
                        else __result0 = global::CppSharp.Parser.AST.ClassTemplate.__CreateInstance(((__Internal*) __Instance)->TemplatedDecl);
                        return __result0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->TemplatedDecl = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public global::CppSharp.Parser.AST.TemplateSpecializationKind SpecializationKind
                {
                    get
                    {
                        return ((__Internal*) __Instance)->SpecializationKind;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->SpecializationKind = value;
                    }
                }

                public uint ArgumentsCount
                {
                    get
                    {
                        var __ret = __Internal.GetArgumentsCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }
            }

            public unsafe partial class ClassTemplatePartialSpecialization : global::CppSharp.Parser.AST.ClassTemplateSpecialization, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 332)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public global::CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public global::CppSharp.Parser.SourceLocation.__Internal Location;

                    [FieldOffset(16)]
                    public int LineNumberStart;

                    [FieldOffset(20)]
                    public int LineNumberEnd;

                    [FieldOffset(24)]
                    public global::Std.BasicString.__Internal Name;

                    [FieldOffset(48)]
                    public global::Std.BasicString.__Internal USR;

                    [FieldOffset(72)]
                    public global::Std.BasicString.__Internal DebugText;

                    [FieldOffset(96)]
                    public byte IsIncomplete;

                    [FieldOffset(97)]
                    public byte IsDependent;

                    [FieldOffset(98)]
                    public byte IsImplicit;

                    [FieldOffset(100)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(104)]
                    public uint DefinitionOrder;

                    [FieldOffset(108)]
                    internal global::Std.Vector.__Internal PreprocessedEntities;

                    [FieldOffset(120)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(124)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(128)]
                    internal global::Std.Vector.__Internal Namespaces;

                    [FieldOffset(140)]
                    internal global::Std.Vector.__Internal Enums;

                    [FieldOffset(152)]
                    internal global::Std.Vector.__Internal Functions;

                    [FieldOffset(164)]
                    internal global::Std.Vector.__Internal Classes;

                    [FieldOffset(176)]
                    internal global::Std.Vector.__Internal Templates;

                    [FieldOffset(188)]
                    internal global::Std.Vector.__Internal Typedefs;

                    [FieldOffset(200)]
                    internal global::Std.Vector.__Internal TypeAliases;

                    [FieldOffset(212)]
                    internal global::Std.Vector.__Internal Variables;

                    [FieldOffset(224)]
                    internal global::Std.Vector.__Internal Friends;

                    [FieldOffset(236)]
                    internal global::Std.Map.__Internal Anonymous;

                    [FieldOffset(244)]
                    public byte IsAnonymous;

                    [FieldOffset(248)]
                    internal global::Std.Vector.__Internal Bases;

                    [FieldOffset(260)]
                    internal global::Std.Vector.__Internal Fields;

                    [FieldOffset(272)]
                    internal global::Std.Vector.__Internal Methods;

                    [FieldOffset(284)]
                    internal global::Std.Vector.__Internal Specifiers;

                    [FieldOffset(296)]
                    public byte IsPOD;

                    [FieldOffset(297)]
                    public byte IsAbstract;

                    [FieldOffset(298)]
                    public byte IsUnion;

                    [FieldOffset(299)]
                    public byte IsDynamic;

                    [FieldOffset(300)]
                    public byte IsPolymorphic;

                    [FieldOffset(301)]
                    public byte HasNonTrivialDefaultConstructor;

                    [FieldOffset(302)]
                    public byte HasNonTrivialCopyConstructor;

                    [FieldOffset(303)]
                    public byte HasNonTrivialDestructor;

                    [FieldOffset(304)]
                    public byte IsExternCContext;

                    [FieldOffset(308)]
                    public global::System.IntPtr Layout;

                    [FieldOffset(312)]
                    public global::System.IntPtr TemplatedDecl;

                    [FieldOffset(316)]
                    internal global::Std.Vector.__Internal Arguments;

                    [FieldOffset(328)]
                    public global::CppSharp.Parser.AST.TemplateSpecializationKind SpecializationKind;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0ClassTemplatePartialSpecialization@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0ClassTemplatePartialSpecialization@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1ClassTemplatePartialSpecialization@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);
                }

                public static new ClassTemplatePartialSpecialization __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new ClassTemplatePartialSpecialization(native.ToPointer(), skipVTables);
                }

                public static ClassTemplatePartialSpecialization __CreateInstance(ClassTemplatePartialSpecialization.__Internal native, bool skipVTables = false)
                {
                    return new ClassTemplatePartialSpecialization(native, skipVTables);
                }

                private static void* __CopyValue(ClassTemplatePartialSpecialization.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(332);
                    global::CppSharp.Parser.AST.ClassTemplatePartialSpecialization.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private ClassTemplatePartialSpecialization(ClassTemplatePartialSpecialization.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected ClassTemplatePartialSpecialization(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public ClassTemplatePartialSpecialization()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(332);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public ClassTemplatePartialSpecialization(global::CppSharp.Parser.AST.ClassTemplatePartialSpecialization _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(332);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public override void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Declaration __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }
            }

            public unsafe partial class FunctionTemplate : global::CppSharp.Parser.AST.Template, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 156)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public global::CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public global::CppSharp.Parser.SourceLocation.__Internal Location;

                    [FieldOffset(16)]
                    public int LineNumberStart;

                    [FieldOffset(20)]
                    public int LineNumberEnd;

                    [FieldOffset(24)]
                    public global::Std.BasicString.__Internal Name;

                    [FieldOffset(48)]
                    public global::Std.BasicString.__Internal USR;

                    [FieldOffset(72)]
                    public global::Std.BasicString.__Internal DebugText;

                    [FieldOffset(96)]
                    public byte IsIncomplete;

                    [FieldOffset(97)]
                    public byte IsDependent;

                    [FieldOffset(98)]
                    public byte IsImplicit;

                    [FieldOffset(100)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(104)]
                    public uint DefinitionOrder;

                    [FieldOffset(108)]
                    internal global::Std.Vector.__Internal PreprocessedEntities;

                    [FieldOffset(120)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(124)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(128)]
                    public global::System.IntPtr TemplatedDecl;

                    [FieldOffset(132)]
                    internal global::Std.Vector.__Internal Parameters;

                    [FieldOffset(144)]
                    internal global::Std.Vector.__Internal Specializations;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0FunctionTemplate@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0FunctionTemplate@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1FunctionTemplate@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getSpecializations@FunctionTemplate@AST@CppParser@CppSharp@@QAEPAVFunctionTemplateSpecialization@234@I@Z")]
                    internal static extern global::System.IntPtr GetSpecializations_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addSpecializations@FunctionTemplate@AST@CppParser@CppSharp@@QAEXAAPAVFunctionTemplateSpecialization@234@@Z")]
                    internal static extern void AddSpecializations_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearSpecializations@FunctionTemplate@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void ClearSpecializations_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getSpecializationsCount@FunctionTemplate@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint GetSpecializationsCount_0(global::System.IntPtr instance);
                }

                public static new FunctionTemplate __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new FunctionTemplate(native.ToPointer(), skipVTables);
                }

                public static FunctionTemplate __CreateInstance(FunctionTemplate.__Internal native, bool skipVTables = false)
                {
                    return new FunctionTemplate(native, skipVTables);
                }

                private static void* __CopyValue(FunctionTemplate.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(156);
                    global::CppSharp.Parser.AST.FunctionTemplate.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private FunctionTemplate(FunctionTemplate.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected FunctionTemplate(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public FunctionTemplate()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(156);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public FunctionTemplate(global::CppSharp.Parser.AST.FunctionTemplate _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(156);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public override void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Declaration __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public global::CppSharp.Parser.AST.FunctionTemplateSpecialization GetSpecializations(uint i)
                {
                    var __ret = __Internal.GetSpecializations_0((__Instance + __PointerAdjustment), i);
                    global::CppSharp.Parser.AST.FunctionTemplateSpecialization __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (global::CppSharp.Parser.AST.FunctionTemplateSpecialization.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (global::CppSharp.Parser.AST.FunctionTemplateSpecialization) global::CppSharp.Parser.AST.FunctionTemplateSpecialization.NativeToManagedMap[__ret];
                    else __result0 = global::CppSharp.Parser.AST.FunctionTemplateSpecialization.__CreateInstance(__ret);
                    return __result0;
                }

                public void AddSpecializations(global::CppSharp.Parser.AST.FunctionTemplateSpecialization s)
                {
                    if (ReferenceEquals(s, null))
                        throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = s.__Instance;
                    __Internal.AddSpecializations_0((__Instance + __PointerAdjustment), __arg0);
                }

                public void ClearSpecializations()
                {
                    __Internal.ClearSpecializations_0((__Instance + __PointerAdjustment));
                }

                public uint SpecializationsCount
                {
                    get
                    {
                        var __ret = __Internal.GetSpecializationsCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }
            }

            public unsafe partial class FunctionTemplateSpecialization : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 24)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::System.IntPtr Template;

                    [FieldOffset(4)]
                    internal global::Std.Vector.__Internal Arguments;

                    [FieldOffset(16)]
                    public global::System.IntPtr SpecializedFunction;

                    [FieldOffset(20)]
                    public global::CppSharp.Parser.AST.TemplateSpecializationKind SpecializationKind;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0FunctionTemplateSpecialization@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0FunctionTemplateSpecialization@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1FunctionTemplateSpecialization@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getArguments@FunctionTemplateSpecialization@AST@CppParser@CppSharp@@QAE?AUTemplateArgument@234@I@Z")]
                    internal static extern void GetArguments_0(global::System.IntPtr instance, global::System.IntPtr @return, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addArguments@FunctionTemplateSpecialization@AST@CppParser@CppSharp@@QAEXAAUTemplateArgument@234@@Z")]
                    internal static extern void AddArguments_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearArguments@FunctionTemplateSpecialization@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void ClearArguments_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getArgumentsCount@FunctionTemplateSpecialization@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint GetArgumentsCount_0(global::System.IntPtr instance);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                protected int __PointerAdjustment;
                public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, FunctionTemplateSpecialization> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, FunctionTemplateSpecialization>();
                protected void*[] __OriginalVTables;

                protected bool __ownsNativeInstance;

                public static FunctionTemplateSpecialization __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new FunctionTemplateSpecialization(native.ToPointer(), skipVTables);
                }

                public static FunctionTemplateSpecialization __CreateInstance(FunctionTemplateSpecialization.__Internal native, bool skipVTables = false)
                {
                    return new FunctionTemplateSpecialization(native, skipVTables);
                }

                private static void* __CopyValue(FunctionTemplateSpecialization.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(24);
                    global::CppSharp.Parser.AST.FunctionTemplateSpecialization.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private FunctionTemplateSpecialization(FunctionTemplateSpecialization.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected FunctionTemplateSpecialization(void* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public FunctionTemplateSpecialization()
                {
                    __Instance = Marshal.AllocHGlobal(24);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public FunctionTemplateSpecialization(global::CppSharp.Parser.AST.FunctionTemplateSpecialization _0)
                {
                    __Instance = Marshal.AllocHGlobal(24);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                public virtual void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.FunctionTemplateSpecialization __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public global::CppSharp.Parser.AST.TemplateArgument GetArguments(uint i)
                {
                    var __ret = new global::CppSharp.Parser.AST.TemplateArgument.__Internal();
                    __Internal.GetArguments_0((__Instance + __PointerAdjustment), new IntPtr(&__ret), i);
                    return global::CppSharp.Parser.AST.TemplateArgument.__CreateInstance(__ret);
                }

                public void AddArguments(global::CppSharp.Parser.AST.TemplateArgument s)
                {
                    if (ReferenceEquals(s, null))
                        throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = s.__Instance;
                    __Internal.AddArguments_0((__Instance + __PointerAdjustment), __arg0);
                }

                public void ClearArguments()
                {
                    __Internal.ClearArguments_0((__Instance + __PointerAdjustment));
                }

                public global::CppSharp.Parser.AST.FunctionTemplate Template
                {
                    get
                    {
                        global::CppSharp.Parser.AST.FunctionTemplate __result0;
                        if (((__Internal*) __Instance)->Template == IntPtr.Zero) __result0 = null;
                        else if (global::CppSharp.Parser.AST.FunctionTemplate.NativeToManagedMap.ContainsKey(((__Internal*) __Instance)->Template))
                            __result0 = (global::CppSharp.Parser.AST.FunctionTemplate) global::CppSharp.Parser.AST.FunctionTemplate.NativeToManagedMap[((__Internal*) __Instance)->Template];
                        else __result0 = global::CppSharp.Parser.AST.FunctionTemplate.__CreateInstance(((__Internal*) __Instance)->Template);
                        return __result0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Template = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public global::CppSharp.Parser.AST.Function SpecializedFunction
                {
                    get
                    {
                        global::CppSharp.Parser.AST.Function __result0;
                        if (((__Internal*) __Instance)->SpecializedFunction == IntPtr.Zero) __result0 = null;
                        else if (global::CppSharp.Parser.AST.Function.NativeToManagedMap.ContainsKey(((__Internal*) __Instance)->SpecializedFunction))
                            __result0 = (global::CppSharp.Parser.AST.Function) global::CppSharp.Parser.AST.Function.NativeToManagedMap[((__Internal*) __Instance)->SpecializedFunction];
                        else __result0 = global::CppSharp.Parser.AST.Function.__CreateInstance(((__Internal*) __Instance)->SpecializedFunction);
                        return __result0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->SpecializedFunction = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public global::CppSharp.Parser.AST.TemplateSpecializationKind SpecializationKind
                {
                    get
                    {
                        return ((__Internal*) __Instance)->SpecializationKind;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->SpecializationKind = value;
                    }
                }

                public uint ArgumentsCount
                {
                    get
                    {
                        var __ret = __Internal.GetArgumentsCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }
            }

            public unsafe partial class VarTemplate : global::CppSharp.Parser.AST.Template, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 156)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public global::CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public global::CppSharp.Parser.SourceLocation.__Internal Location;

                    [FieldOffset(16)]
                    public int LineNumberStart;

                    [FieldOffset(20)]
                    public int LineNumberEnd;

                    [FieldOffset(24)]
                    public global::Std.BasicString.__Internal Name;

                    [FieldOffset(48)]
                    public global::Std.BasicString.__Internal USR;

                    [FieldOffset(72)]
                    public global::Std.BasicString.__Internal DebugText;

                    [FieldOffset(96)]
                    public byte IsIncomplete;

                    [FieldOffset(97)]
                    public byte IsDependent;

                    [FieldOffset(98)]
                    public byte IsImplicit;

                    [FieldOffset(100)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(104)]
                    public uint DefinitionOrder;

                    [FieldOffset(108)]
                    internal global::Std.Vector.__Internal PreprocessedEntities;

                    [FieldOffset(120)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(124)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(128)]
                    public global::System.IntPtr TemplatedDecl;

                    [FieldOffset(132)]
                    internal global::Std.Vector.__Internal Parameters;

                    [FieldOffset(144)]
                    internal global::Std.Vector.__Internal Specializations;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0VarTemplate@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0VarTemplate@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1VarTemplate@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getSpecializations@VarTemplate@AST@CppParser@CppSharp@@QAEPAVVarTemplateSpecialization@234@I@Z")]
                    internal static extern global::System.IntPtr GetSpecializations_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addSpecializations@VarTemplate@AST@CppParser@CppSharp@@QAEXAAPAVVarTemplateSpecialization@234@@Z")]
                    internal static extern void AddSpecializations_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearSpecializations@VarTemplate@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void ClearSpecializations_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getSpecializationsCount@VarTemplate@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint GetSpecializationsCount_0(global::System.IntPtr instance);
                }

                public static new VarTemplate __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new VarTemplate(native.ToPointer(), skipVTables);
                }

                public static VarTemplate __CreateInstance(VarTemplate.__Internal native, bool skipVTables = false)
                {
                    return new VarTemplate(native, skipVTables);
                }

                private static void* __CopyValue(VarTemplate.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(156);
                    global::CppSharp.Parser.AST.VarTemplate.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private VarTemplate(VarTemplate.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected VarTemplate(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public VarTemplate()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(156);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public VarTemplate(global::CppSharp.Parser.AST.VarTemplate _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(156);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public override void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Declaration __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public global::CppSharp.Parser.AST.VarTemplateSpecialization GetSpecializations(uint i)
                {
                    var __ret = __Internal.GetSpecializations_0((__Instance + __PointerAdjustment), i);
                    global::CppSharp.Parser.AST.VarTemplateSpecialization __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (global::CppSharp.Parser.AST.VarTemplateSpecialization.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (global::CppSharp.Parser.AST.VarTemplateSpecialization) global::CppSharp.Parser.AST.VarTemplateSpecialization.NativeToManagedMap[__ret];
                    else __result0 = global::CppSharp.Parser.AST.VarTemplateSpecialization.__CreateInstance(__ret);
                    return __result0;
                }

                public void AddSpecializations(global::CppSharp.Parser.AST.VarTemplateSpecialization s)
                {
                    if (ReferenceEquals(s, null))
                        throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = s.__Instance;
                    __Internal.AddSpecializations_0((__Instance + __PointerAdjustment), __arg0);
                }

                public void ClearSpecializations()
                {
                    __Internal.ClearSpecializations_0((__Instance + __PointerAdjustment));
                }

                public uint SpecializationsCount
                {
                    get
                    {
                        var __ret = __Internal.GetSpecializationsCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }
            }

            public unsafe partial class VarTemplateSpecialization : global::CppSharp.Parser.AST.Variable, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 180)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public global::CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public global::CppSharp.Parser.SourceLocation.__Internal Location;

                    [FieldOffset(16)]
                    public int LineNumberStart;

                    [FieldOffset(20)]
                    public int LineNumberEnd;

                    [FieldOffset(24)]
                    public global::Std.BasicString.__Internal Name;

                    [FieldOffset(48)]
                    public global::Std.BasicString.__Internal USR;

                    [FieldOffset(72)]
                    public global::Std.BasicString.__Internal DebugText;

                    [FieldOffset(96)]
                    public byte IsIncomplete;

                    [FieldOffset(97)]
                    public byte IsDependent;

                    [FieldOffset(98)]
                    public byte IsImplicit;

                    [FieldOffset(100)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(104)]
                    public uint DefinitionOrder;

                    [FieldOffset(108)]
                    internal global::Std.Vector.__Internal PreprocessedEntities;

                    [FieldOffset(120)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(124)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(128)]
                    public global::Std.BasicString.__Internal Mangled;

                    [FieldOffset(152)]
                    public global::CppSharp.Parser.AST.QualifiedType.__Internal QualifiedType;

                    [FieldOffset(160)]
                    public global::System.IntPtr TemplatedDecl;

                    [FieldOffset(164)]
                    internal global::Std.Vector.__Internal Arguments;

                    [FieldOffset(176)]
                    public global::CppSharp.Parser.AST.TemplateSpecializationKind SpecializationKind;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0VarTemplateSpecialization@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0VarTemplateSpecialization@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1VarTemplateSpecialization@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getArguments@VarTemplateSpecialization@AST@CppParser@CppSharp@@QAE?AUTemplateArgument@234@I@Z")]
                    internal static extern void GetArguments_0(global::System.IntPtr instance, global::System.IntPtr @return, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addArguments@VarTemplateSpecialization@AST@CppParser@CppSharp@@QAEXAAUTemplateArgument@234@@Z")]
                    internal static extern void AddArguments_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearArguments@VarTemplateSpecialization@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void ClearArguments_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getArgumentsCount@VarTemplateSpecialization@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint GetArgumentsCount_0(global::System.IntPtr instance);
                }

                public static new VarTemplateSpecialization __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new VarTemplateSpecialization(native.ToPointer(), skipVTables);
                }

                public static VarTemplateSpecialization __CreateInstance(VarTemplateSpecialization.__Internal native, bool skipVTables = false)
                {
                    return new VarTemplateSpecialization(native, skipVTables);
                }

                private static void* __CopyValue(VarTemplateSpecialization.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(180);
                    global::CppSharp.Parser.AST.VarTemplateSpecialization.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private VarTemplateSpecialization(VarTemplateSpecialization.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected VarTemplateSpecialization(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public VarTemplateSpecialization()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(180);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public VarTemplateSpecialization(global::CppSharp.Parser.AST.VarTemplateSpecialization _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(180);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public override void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Declaration __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public global::CppSharp.Parser.AST.TemplateArgument GetArguments(uint i)
                {
                    var __ret = new global::CppSharp.Parser.AST.TemplateArgument.__Internal();
                    __Internal.GetArguments_0((__Instance + __PointerAdjustment), new IntPtr(&__ret), i);
                    return global::CppSharp.Parser.AST.TemplateArgument.__CreateInstance(__ret);
                }

                public void AddArguments(global::CppSharp.Parser.AST.TemplateArgument s)
                {
                    if (ReferenceEquals(s, null))
                        throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = s.__Instance;
                    __Internal.AddArguments_0((__Instance + __PointerAdjustment), __arg0);
                }

                public void ClearArguments()
                {
                    __Internal.ClearArguments_0((__Instance + __PointerAdjustment));
                }

                public global::CppSharp.Parser.AST.VarTemplate TemplatedDecl
                {
                    get
                    {
                        global::CppSharp.Parser.AST.VarTemplate __result0;
                        if (((__Internal*) __Instance)->TemplatedDecl == IntPtr.Zero) __result0 = null;
                        else if (global::CppSharp.Parser.AST.VarTemplate.NativeToManagedMap.ContainsKey(((__Internal*) __Instance)->TemplatedDecl))
                            __result0 = (global::CppSharp.Parser.AST.VarTemplate) global::CppSharp.Parser.AST.VarTemplate.NativeToManagedMap[((__Internal*) __Instance)->TemplatedDecl];
                        else __result0 = global::CppSharp.Parser.AST.VarTemplate.__CreateInstance(((__Internal*) __Instance)->TemplatedDecl);
                        return __result0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->TemplatedDecl = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public global::CppSharp.Parser.AST.TemplateSpecializationKind SpecializationKind
                {
                    get
                    {
                        return ((__Internal*) __Instance)->SpecializationKind;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->SpecializationKind = value;
                    }
                }

                public uint ArgumentsCount
                {
                    get
                    {
                        var __ret = __Internal.GetArgumentsCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }
            }

            public unsafe partial class VarTemplatePartialSpecialization : global::CppSharp.Parser.AST.VarTemplateSpecialization, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 180)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public global::CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public global::CppSharp.Parser.SourceLocation.__Internal Location;

                    [FieldOffset(16)]
                    public int LineNumberStart;

                    [FieldOffset(20)]
                    public int LineNumberEnd;

                    [FieldOffset(24)]
                    public global::Std.BasicString.__Internal Name;

                    [FieldOffset(48)]
                    public global::Std.BasicString.__Internal USR;

                    [FieldOffset(72)]
                    public global::Std.BasicString.__Internal DebugText;

                    [FieldOffset(96)]
                    public byte IsIncomplete;

                    [FieldOffset(97)]
                    public byte IsDependent;

                    [FieldOffset(98)]
                    public byte IsImplicit;

                    [FieldOffset(100)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(104)]
                    public uint DefinitionOrder;

                    [FieldOffset(108)]
                    internal global::Std.Vector.__Internal PreprocessedEntities;

                    [FieldOffset(120)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(124)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(128)]
                    public global::Std.BasicString.__Internal Mangled;

                    [FieldOffset(152)]
                    public global::CppSharp.Parser.AST.QualifiedType.__Internal QualifiedType;

                    [FieldOffset(160)]
                    public global::System.IntPtr TemplatedDecl;

                    [FieldOffset(164)]
                    internal global::Std.Vector.__Internal Arguments;

                    [FieldOffset(176)]
                    public global::CppSharp.Parser.AST.TemplateSpecializationKind SpecializationKind;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0VarTemplatePartialSpecialization@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0VarTemplatePartialSpecialization@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1VarTemplatePartialSpecialization@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);
                }

                public static new VarTemplatePartialSpecialization __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new VarTemplatePartialSpecialization(native.ToPointer(), skipVTables);
                }

                public static VarTemplatePartialSpecialization __CreateInstance(VarTemplatePartialSpecialization.__Internal native, bool skipVTables = false)
                {
                    return new VarTemplatePartialSpecialization(native, skipVTables);
                }

                private static void* __CopyValue(VarTemplatePartialSpecialization.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(180);
                    global::CppSharp.Parser.AST.VarTemplatePartialSpecialization.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private VarTemplatePartialSpecialization(VarTemplatePartialSpecialization.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected VarTemplatePartialSpecialization(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public VarTemplatePartialSpecialization()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(180);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public VarTemplatePartialSpecialization(global::CppSharp.Parser.AST.VarTemplatePartialSpecialization _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(180);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public override void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Declaration __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }
            }

            public unsafe partial class Namespace : global::CppSharp.Parser.AST.DeclarationContext, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 252)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public global::CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public global::CppSharp.Parser.SourceLocation.__Internal Location;

                    [FieldOffset(16)]
                    public int LineNumberStart;

                    [FieldOffset(20)]
                    public int LineNumberEnd;

                    [FieldOffset(24)]
                    public global::Std.BasicString.__Internal Name;

                    [FieldOffset(48)]
                    public global::Std.BasicString.__Internal USR;

                    [FieldOffset(72)]
                    public global::Std.BasicString.__Internal DebugText;

                    [FieldOffset(96)]
                    public byte IsIncomplete;

                    [FieldOffset(97)]
                    public byte IsDependent;

                    [FieldOffset(98)]
                    public byte IsImplicit;

                    [FieldOffset(100)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(104)]
                    public uint DefinitionOrder;

                    [FieldOffset(108)]
                    internal global::Std.Vector.__Internal PreprocessedEntities;

                    [FieldOffset(120)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(124)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(128)]
                    internal global::Std.Vector.__Internal Namespaces;

                    [FieldOffset(140)]
                    internal global::Std.Vector.__Internal Enums;

                    [FieldOffset(152)]
                    internal global::Std.Vector.__Internal Functions;

                    [FieldOffset(164)]
                    internal global::Std.Vector.__Internal Classes;

                    [FieldOffset(176)]
                    internal global::Std.Vector.__Internal Templates;

                    [FieldOffset(188)]
                    internal global::Std.Vector.__Internal Typedefs;

                    [FieldOffset(200)]
                    internal global::Std.Vector.__Internal TypeAliases;

                    [FieldOffset(212)]
                    internal global::Std.Vector.__Internal Variables;

                    [FieldOffset(224)]
                    internal global::Std.Vector.__Internal Friends;

                    [FieldOffset(236)]
                    internal global::Std.Map.__Internal Anonymous;

                    [FieldOffset(244)]
                    public byte IsAnonymous;

                    [FieldOffset(248)]
                    public byte IsInline;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Namespace@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Namespace@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1Namespace@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);
                }

                public static new Namespace __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new Namespace(native.ToPointer(), skipVTables);
                }

                public static Namespace __CreateInstance(Namespace.__Internal native, bool skipVTables = false)
                {
                    return new Namespace(native, skipVTables);
                }

                private static void* __CopyValue(Namespace.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(252);
                    global::CppSharp.Parser.AST.Namespace.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private Namespace(Namespace.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected Namespace(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public Namespace()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(252);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public Namespace(global::CppSharp.Parser.AST.Namespace _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(252);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public override void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Declaration __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public bool IsInline
                {
                    get
                    {
                        return ((__Internal*) __Instance)->IsInline != 0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->IsInline = (byte) (value ? 1 : 0);
                    }
                }
            }

            public unsafe partial class PreprocessedEntity : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 12)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.MacroLocation MacroLocation;

                    [FieldOffset(4)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(8)]
                    public global::CppSharp.Parser.AST.DeclarationKind Kind;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0PreprocessedEntity@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0PreprocessedEntity@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                protected int __PointerAdjustment;
                public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, PreprocessedEntity> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, PreprocessedEntity>();
                protected void*[] __OriginalVTables;

                protected bool __ownsNativeInstance;

                public static PreprocessedEntity __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new PreprocessedEntity(native.ToPointer(), skipVTables);
                }

                public static PreprocessedEntity __CreateInstance(PreprocessedEntity.__Internal native, bool skipVTables = false)
                {
                    return new PreprocessedEntity(native, skipVTables);
                }

                private static void* __CopyValue(PreprocessedEntity.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(12);
                    *(PreprocessedEntity.__Internal*) ret = native;
                    return ret.ToPointer();
                }

                private PreprocessedEntity(PreprocessedEntity.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected PreprocessedEntity(void* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public PreprocessedEntity()
                {
                    __Instance = Marshal.AllocHGlobal(12);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public PreprocessedEntity(global::CppSharp.Parser.AST.PreprocessedEntity _0)
                {
                    __Instance = Marshal.AllocHGlobal(12);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    *((PreprocessedEntity.__Internal*) __Instance) = *((PreprocessedEntity.__Internal*) _0.__Instance);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                public virtual void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.PreprocessedEntity __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public global::CppSharp.Parser.AST.MacroLocation MacroLocation
                {
                    get
                    {
                        return ((__Internal*) __Instance)->MacroLocation;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->MacroLocation = value;
                    }
                }

                public global::System.IntPtr OriginalPtr
                {
                    get
                    {
                        return ((__Internal*) __Instance)->OriginalPtr;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->OriginalPtr = (global::System.IntPtr) value;
                    }
                }

                public global::CppSharp.Parser.AST.DeclarationKind Kind
                {
                    get
                    {
                        return ((__Internal*) __Instance)->Kind;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Kind = value;
                    }
                }
            }

            public unsafe partial class MacroDefinition : global::CppSharp.Parser.AST.PreprocessedEntity, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 68)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.MacroLocation MacroLocation;

                    [FieldOffset(4)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(8)]
                    public global::CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(12)]
                    public global::Std.BasicString.__Internal Name;

                    [FieldOffset(36)]
                    public global::Std.BasicString.__Internal Expression;

                    [FieldOffset(60)]
                    public int LineNumberStart;

                    [FieldOffset(64)]
                    public int LineNumberEnd;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0MacroDefinition@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0MacroDefinition@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1MacroDefinition@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getName@MacroDefinition@AST@CppParser@CppSharp@@QAEPBDXZ")]
                    internal static extern global::System.IntPtr Name_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?setName@MacroDefinition@AST@CppParser@CppSharp@@QAEXPBD@Z")]
                    internal static extern void SetName_0(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getExpression@MacroDefinition@AST@CppParser@CppSharp@@QAEPBDXZ")]
                    internal static extern global::System.IntPtr Expression_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?setExpression@MacroDefinition@AST@CppParser@CppSharp@@QAEXPBD@Z")]
                    internal static extern void SetExpression_0(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string s);
                }

                public static new MacroDefinition __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new MacroDefinition(native.ToPointer(), skipVTables);
                }

                public static MacroDefinition __CreateInstance(MacroDefinition.__Internal native, bool skipVTables = false)
                {
                    return new MacroDefinition(native, skipVTables);
                }

                private static void* __CopyValue(MacroDefinition.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(68);
                    global::CppSharp.Parser.AST.MacroDefinition.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private MacroDefinition(MacroDefinition.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected MacroDefinition(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public MacroDefinition()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(68);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public MacroDefinition(global::CppSharp.Parser.AST.MacroDefinition _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(68);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public override void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.PreprocessedEntity __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public int LineNumberStart
                {
                    get
                    {
                        return ((__Internal*) __Instance)->LineNumberStart;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->LineNumberStart = value;
                    }
                }

                public int LineNumberEnd
                {
                    get
                    {
                        return ((__Internal*) __Instance)->LineNumberEnd;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->LineNumberEnd = value;
                    }
                }

                public string Name
                {
                    get
                    {
                        var __ret = __Internal.Name_0((__Instance + __PointerAdjustment));
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var __arg0 = value;
                        __Internal.SetName_0((__Instance + __PointerAdjustment), __arg0);
                    }
                }

                public string Expression
                {
                    get
                    {
                        var __ret = __Internal.Expression_0((__Instance + __PointerAdjustment));
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var __arg0 = value;
                        __Internal.SetExpression_0((__Instance + __PointerAdjustment), __arg0);
                    }
                }
            }

            public unsafe partial class MacroExpansion : global::CppSharp.Parser.AST.PreprocessedEntity, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 64)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.MacroLocation MacroLocation;

                    [FieldOffset(4)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(8)]
                    public global::CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(12)]
                    public global::Std.BasicString.__Internal Name;

                    [FieldOffset(36)]
                    public global::Std.BasicString.__Internal Text;

                    [FieldOffset(60)]
                    public global::System.IntPtr Definition;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0MacroExpansion@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0MacroExpansion@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1MacroExpansion@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getName@MacroExpansion@AST@CppParser@CppSharp@@QAEPBDXZ")]
                    internal static extern global::System.IntPtr Name_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?setName@MacroExpansion@AST@CppParser@CppSharp@@QAEXPBD@Z")]
                    internal static extern void SetName_0(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getText@MacroExpansion@AST@CppParser@CppSharp@@QAEPBDXZ")]
                    internal static extern global::System.IntPtr Text_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?setText@MacroExpansion@AST@CppParser@CppSharp@@QAEXPBD@Z")]
                    internal static extern void SetText_0(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string s);
                }

                public static new MacroExpansion __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new MacroExpansion(native.ToPointer(), skipVTables);
                }

                public static MacroExpansion __CreateInstance(MacroExpansion.__Internal native, bool skipVTables = false)
                {
                    return new MacroExpansion(native, skipVTables);
                }

                private static void* __CopyValue(MacroExpansion.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(64);
                    global::CppSharp.Parser.AST.MacroExpansion.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private MacroExpansion(MacroExpansion.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected MacroExpansion(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public MacroExpansion()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(64);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public MacroExpansion(global::CppSharp.Parser.AST.MacroExpansion _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(64);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public override void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.PreprocessedEntity __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public global::CppSharp.Parser.AST.MacroDefinition Definition
                {
                    get
                    {
                        global::CppSharp.Parser.AST.MacroDefinition __result0;
                        if (((__Internal*) __Instance)->Definition == IntPtr.Zero) __result0 = null;
                        else if (global::CppSharp.Parser.AST.MacroDefinition.NativeToManagedMap.ContainsKey(((__Internal*) __Instance)->Definition))
                            __result0 = (global::CppSharp.Parser.AST.MacroDefinition) global::CppSharp.Parser.AST.MacroDefinition.NativeToManagedMap[((__Internal*) __Instance)->Definition];
                        else __result0 = global::CppSharp.Parser.AST.MacroDefinition.__CreateInstance(((__Internal*) __Instance)->Definition);
                        return __result0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Definition = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public string Name
                {
                    get
                    {
                        var __ret = __Internal.Name_0((__Instance + __PointerAdjustment));
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var __arg0 = value;
                        __Internal.SetName_0((__Instance + __PointerAdjustment), __arg0);
                    }
                }

                public string Text
                {
                    get
                    {
                        var __ret = __Internal.Text_0((__Instance + __PointerAdjustment));
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var __arg0 = value;
                        __Internal.SetText_0((__Instance + __PointerAdjustment), __arg0);
                    }
                }
            }

            public unsafe partial class TranslationUnit : global::CppSharp.Parser.AST.Namespace, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 292)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public global::CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public global::CppSharp.Parser.SourceLocation.__Internal Location;

                    [FieldOffset(16)]
                    public int LineNumberStart;

                    [FieldOffset(20)]
                    public int LineNumberEnd;

                    [FieldOffset(24)]
                    public global::Std.BasicString.__Internal Name;

                    [FieldOffset(48)]
                    public global::Std.BasicString.__Internal USR;

                    [FieldOffset(72)]
                    public global::Std.BasicString.__Internal DebugText;

                    [FieldOffset(96)]
                    public byte IsIncomplete;

                    [FieldOffset(97)]
                    public byte IsDependent;

                    [FieldOffset(98)]
                    public byte IsImplicit;

                    [FieldOffset(100)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(104)]
                    public uint DefinitionOrder;

                    [FieldOffset(108)]
                    internal global::Std.Vector.__Internal PreprocessedEntities;

                    [FieldOffset(120)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(124)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(128)]
                    internal global::Std.Vector.__Internal Namespaces;

                    [FieldOffset(140)]
                    internal global::Std.Vector.__Internal Enums;

                    [FieldOffset(152)]
                    internal global::Std.Vector.__Internal Functions;

                    [FieldOffset(164)]
                    internal global::Std.Vector.__Internal Classes;

                    [FieldOffset(176)]
                    internal global::Std.Vector.__Internal Templates;

                    [FieldOffset(188)]
                    internal global::Std.Vector.__Internal Typedefs;

                    [FieldOffset(200)]
                    internal global::Std.Vector.__Internal TypeAliases;

                    [FieldOffset(212)]
                    internal global::Std.Vector.__Internal Variables;

                    [FieldOffset(224)]
                    internal global::Std.Vector.__Internal Friends;

                    [FieldOffset(236)]
                    internal global::Std.Map.__Internal Anonymous;

                    [FieldOffset(244)]
                    public byte IsAnonymous;

                    [FieldOffset(248)]
                    public byte IsInline;

                    [FieldOffset(252)]
                    public global::Std.BasicString.__Internal FileName;

                    [FieldOffset(276)]
                    public byte IsSystemHeader;

                    [FieldOffset(280)]
                    internal global::Std.Vector.__Internal Macros;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TranslationUnit@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TranslationUnit@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1TranslationUnit@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getMacros@TranslationUnit@AST@CppParser@CppSharp@@QAEPAVMacroDefinition@234@I@Z")]
                    internal static extern global::System.IntPtr GetMacros_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addMacros@TranslationUnit@AST@CppParser@CppSharp@@QAEXAAPAVMacroDefinition@234@@Z")]
                    internal static extern void AddMacros_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearMacros@TranslationUnit@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void ClearMacros_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getFileName@TranslationUnit@AST@CppParser@CppSharp@@QAEPBDXZ")]
                    internal static extern global::System.IntPtr FileName_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?setFileName@TranslationUnit@AST@CppParser@CppSharp@@QAEXPBD@Z")]
                    internal static extern void SetFileName_0(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getMacrosCount@TranslationUnit@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint GetMacrosCount_0(global::System.IntPtr instance);
                }

                public static new TranslationUnit __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new TranslationUnit(native.ToPointer(), skipVTables);
                }

                public static TranslationUnit __CreateInstance(TranslationUnit.__Internal native, bool skipVTables = false)
                {
                    return new TranslationUnit(native, skipVTables);
                }

                private static void* __CopyValue(TranslationUnit.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(292);
                    global::CppSharp.Parser.AST.TranslationUnit.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private TranslationUnit(TranslationUnit.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected TranslationUnit(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public TranslationUnit()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(292);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public TranslationUnit(global::CppSharp.Parser.AST.TranslationUnit _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(292);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public override void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Declaration __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public global::CppSharp.Parser.AST.MacroDefinition GetMacros(uint i)
                {
                    var __ret = __Internal.GetMacros_0((__Instance + __PointerAdjustment), i);
                    global::CppSharp.Parser.AST.MacroDefinition __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (global::CppSharp.Parser.AST.MacroDefinition.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (global::CppSharp.Parser.AST.MacroDefinition) global::CppSharp.Parser.AST.MacroDefinition.NativeToManagedMap[__ret];
                    else __result0 = global::CppSharp.Parser.AST.MacroDefinition.__CreateInstance(__ret);
                    return __result0;
                }

                public void AddMacros(global::CppSharp.Parser.AST.MacroDefinition s)
                {
                    if (ReferenceEquals(s, null))
                        throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = s.__Instance;
                    __Internal.AddMacros_0((__Instance + __PointerAdjustment), __arg0);
                }

                public void ClearMacros()
                {
                    __Internal.ClearMacros_0((__Instance + __PointerAdjustment));
                }

                public bool IsSystemHeader
                {
                    get
                    {
                        return ((__Internal*) __Instance)->IsSystemHeader != 0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->IsSystemHeader = (byte) (value ? 1 : 0);
                    }
                }

                public string FileName
                {
                    get
                    {
                        var __ret = __Internal.FileName_0((__Instance + __PointerAdjustment));
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var __arg0 = value;
                        __Internal.SetFileName_0((__Instance + __PointerAdjustment), __arg0);
                    }
                }

                public uint MacrosCount
                {
                    get
                    {
                        var __ret = __Internal.GetMacrosCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }
            }

            public unsafe partial class NativeLibrary : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 52)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::Std.BasicString.__Internal FileName;

                    [FieldOffset(24)]
                    public global::CppSharp.Parser.AST.ArchType ArchType;

                    [FieldOffset(28)]
                    internal global::Std.Vector.__Internal Symbols;

                    [FieldOffset(40)]
                    internal global::Std.Vector.__Internal Dependencies;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0NativeLibrary@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0NativeLibrary@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1NativeLibrary@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getSymbols@NativeLibrary@AST@CppParser@CppSharp@@QAEPBDI@Z")]
                    internal static extern global::System.IntPtr GetSymbols_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addSymbols@NativeLibrary@AST@CppParser@CppSharp@@QAEXPBD@Z")]
                    internal static extern void AddSymbols_0(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearSymbols@NativeLibrary@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void ClearSymbols_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getDependencies@NativeLibrary@AST@CppParser@CppSharp@@QAEPBDI@Z")]
                    internal static extern global::System.IntPtr GetDependencies_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addDependencies@NativeLibrary@AST@CppParser@CppSharp@@QAEXPBD@Z")]
                    internal static extern void AddDependencies_0(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearDependencies@NativeLibrary@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void ClearDependencies_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getFileName@NativeLibrary@AST@CppParser@CppSharp@@QAEPBDXZ")]
                    internal static extern global::System.IntPtr FileName_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?setFileName@NativeLibrary@AST@CppParser@CppSharp@@QAEXPBD@Z")]
                    internal static extern void SetFileName_0(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getSymbolsCount@NativeLibrary@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint GetSymbolsCount_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getDependenciesCount@NativeLibrary@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint GetDependenciesCount_0(global::System.IntPtr instance);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                protected int __PointerAdjustment;
                public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, NativeLibrary> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, NativeLibrary>();
                protected void*[] __OriginalVTables;

                protected bool __ownsNativeInstance;

                public static NativeLibrary __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new NativeLibrary(native.ToPointer(), skipVTables);
                }

                public static NativeLibrary __CreateInstance(NativeLibrary.__Internal native, bool skipVTables = false)
                {
                    return new NativeLibrary(native, skipVTables);
                }

                private static void* __CopyValue(NativeLibrary.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(52);
                    global::CppSharp.Parser.AST.NativeLibrary.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private NativeLibrary(NativeLibrary.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected NativeLibrary(void* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public NativeLibrary()
                {
                    __Instance = Marshal.AllocHGlobal(52);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public NativeLibrary(global::CppSharp.Parser.AST.NativeLibrary _0)
                {
                    __Instance = Marshal.AllocHGlobal(52);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                public virtual void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.NativeLibrary __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public string GetSymbols(uint i)
                {
                    var __ret = __Internal.GetSymbols_0((__Instance + __PointerAdjustment), i);
                    return Marshal.PtrToStringAnsi(__ret);
                }

                public void AddSymbols(string s)
                {
                    var __arg0 = s;
                    __Internal.AddSymbols_0((__Instance + __PointerAdjustment), __arg0);
                }

                public void ClearSymbols()
                {
                    __Internal.ClearSymbols_0((__Instance + __PointerAdjustment));
                }

                public string GetDependencies(uint i)
                {
                    var __ret = __Internal.GetDependencies_0((__Instance + __PointerAdjustment), i);
                    return Marshal.PtrToStringAnsi(__ret);
                }

                public void AddDependencies(string s)
                {
                    var __arg0 = s;
                    __Internal.AddDependencies_0((__Instance + __PointerAdjustment), __arg0);
                }

                public void ClearDependencies()
                {
                    __Internal.ClearDependencies_0((__Instance + __PointerAdjustment));
                }

                public global::CppSharp.Parser.AST.ArchType ArchType
                {
                    get
                    {
                        return ((__Internal*) __Instance)->ArchType;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->ArchType = value;
                    }
                }

                public string FileName
                {
                    get
                    {
                        var __ret = __Internal.FileName_0((__Instance + __PointerAdjustment));
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var __arg0 = value;
                        __Internal.SetFileName_0((__Instance + __PointerAdjustment), __arg0);
                    }
                }

                public uint SymbolsCount
                {
                    get
                    {
                        var __ret = __Internal.GetSymbolsCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }

                public uint DependenciesCount
                {
                    get
                    {
                        var __ret = __Internal.GetDependenciesCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }
            }

            public unsafe partial class ASTContext : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 12)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    internal global::Std.Vector.__Internal TranslationUnits;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0ASTContext@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0ASTContext@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1ASTContext@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getTranslationUnits@ASTContext@AST@CppParser@CppSharp@@QAEPAVTranslationUnit@234@I@Z")]
                    internal static extern global::System.IntPtr GetTranslationUnits_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addTranslationUnits@ASTContext@AST@CppParser@CppSharp@@QAEXAAPAVTranslationUnit@234@@Z")]
                    internal static extern void AddTranslationUnits_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearTranslationUnits@ASTContext@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void ClearTranslationUnits_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getTranslationUnitsCount@ASTContext@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint GetTranslationUnitsCount_0(global::System.IntPtr instance);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                protected int __PointerAdjustment;
                public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, ASTContext> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, ASTContext>();
                protected void*[] __OriginalVTables;

                protected bool __ownsNativeInstance;

                public static ASTContext __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new ASTContext(native.ToPointer(), skipVTables);
                }

                public static ASTContext __CreateInstance(ASTContext.__Internal native, bool skipVTables = false)
                {
                    return new ASTContext(native, skipVTables);
                }

                private static void* __CopyValue(ASTContext.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(12);
                    global::CppSharp.Parser.AST.ASTContext.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private ASTContext(ASTContext.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected ASTContext(void* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public ASTContext()
                {
                    __Instance = Marshal.AllocHGlobal(12);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public ASTContext(global::CppSharp.Parser.AST.ASTContext _0)
                {
                    __Instance = Marshal.AllocHGlobal(12);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                public virtual void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.ASTContext __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public global::CppSharp.Parser.AST.TranslationUnit GetTranslationUnits(uint i)
                {
                    var __ret = __Internal.GetTranslationUnits_0((__Instance + __PointerAdjustment), i);
                    global::CppSharp.Parser.AST.TranslationUnit __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (global::CppSharp.Parser.AST.TranslationUnit.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (global::CppSharp.Parser.AST.TranslationUnit) global::CppSharp.Parser.AST.TranslationUnit.NativeToManagedMap[__ret];
                    else __result0 = global::CppSharp.Parser.AST.TranslationUnit.__CreateInstance(__ret);
                    return __result0;
                }

                public void AddTranslationUnits(global::CppSharp.Parser.AST.TranslationUnit s)
                {
                    if (ReferenceEquals(s, null))
                        throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = s.__Instance;
                    __Internal.AddTranslationUnits_0((__Instance + __PointerAdjustment), __arg0);
                }

                public void ClearTranslationUnits()
                {
                    __Internal.ClearTranslationUnits_0((__Instance + __PointerAdjustment));
                }

                public uint TranslationUnitsCount
                {
                    get
                    {
                        var __ret = __Internal.GetTranslationUnitsCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }
            }

            public unsafe partial class Comment : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 4)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.CommentKind Kind;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Comment@AST@CppParser@CppSharp@@QAE@W4CommentKind@123@@Z")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance, global::CppSharp.Parser.AST.CommentKind kind);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Comment@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                protected int __PointerAdjustment;
                public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Comment> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Comment>();
                protected void*[] __OriginalVTables;

                protected bool __ownsNativeInstance;

                public static Comment __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new Comment(native.ToPointer(), skipVTables);
                }

                public static Comment __CreateInstance(Comment.__Internal native, bool skipVTables = false)
                {
                    return new Comment(native, skipVTables);
                }

                private static void* __CopyValue(Comment.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(4);
                    *(Comment.__Internal*) ret = native;
                    return ret.ToPointer();
                }

                private Comment(Comment.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected Comment(void* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public Comment(global::CppSharp.Parser.AST.CommentKind kind)
                {
                    __Instance = Marshal.AllocHGlobal(4);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var __arg0 = kind;
                    __Internal.ctor_0((__Instance + __PointerAdjustment), __arg0);
                }

                public Comment(global::CppSharp.Parser.AST.Comment _0)
                {
                    __Instance = Marshal.AllocHGlobal(4);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    *((Comment.__Internal*) __Instance) = *((Comment.__Internal*) _0.__Instance);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                public virtual void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Comment __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public static implicit operator global::CppSharp.Parser.AST.Comment(global::CppSharp.Parser.AST.CommentKind kind)
                {
                    return new global::CppSharp.Parser.AST.Comment(kind);
                }

                public global::CppSharp.Parser.AST.CommentKind Kind
                {
                    get
                    {
                        return ((__Internal*) __Instance)->Kind;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Kind = value;
                    }
                }
            }

            public unsafe partial class BlockContentComment : global::CppSharp.Parser.AST.Comment, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 4)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.CommentKind Kind;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0BlockContentComment@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0BlockContentComment@AST@CppParser@CppSharp@@QAE@W4CommentKind@123@@Z")]
                    internal static extern global::System.IntPtr ctor_1(global::System.IntPtr instance, global::CppSharp.Parser.AST.CommentKind Kind);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0BlockContentComment@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public static new BlockContentComment __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new BlockContentComment(native.ToPointer(), skipVTables);
                }

                public static BlockContentComment __CreateInstance(BlockContentComment.__Internal native, bool skipVTables = false)
                {
                    return new BlockContentComment(native, skipVTables);
                }

                private static void* __CopyValue(BlockContentComment.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(4);
                    *(BlockContentComment.__Internal*) ret = native;
                    return ret.ToPointer();
                }

                private BlockContentComment(BlockContentComment.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected BlockContentComment(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public BlockContentComment()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(4);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public BlockContentComment(global::CppSharp.Parser.AST.CommentKind Kind)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(4);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var __arg0 = Kind;
                    __Internal.ctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public BlockContentComment(global::CppSharp.Parser.AST.BlockContentComment _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(4);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    *((BlockContentComment.__Internal*) __Instance) = *((BlockContentComment.__Internal*) _0.__Instance);
                }

                public static implicit operator global::CppSharp.Parser.AST.BlockContentComment(global::CppSharp.Parser.AST.CommentKind Kind)
                {
                    return new global::CppSharp.Parser.AST.BlockContentComment(Kind);
                }
            }

            public unsafe partial class FullComment : global::CppSharp.Parser.AST.Comment, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 16)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.CommentKind Kind;

                    [FieldOffset(4)]
                    internal global::Std.Vector.__Internal Blocks;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0FullComment@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0FullComment@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1FullComment@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getBlocks@FullComment@AST@CppParser@CppSharp@@QAEPAVBlockContentComment@234@I@Z")]
                    internal static extern global::System.IntPtr GetBlocks_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addBlocks@FullComment@AST@CppParser@CppSharp@@QAEXAAPAVBlockContentComment@234@@Z")]
                    internal static extern void AddBlocks_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearBlocks@FullComment@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void ClearBlocks_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getBlocksCount@FullComment@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint GetBlocksCount_0(global::System.IntPtr instance);
                }

                public static new FullComment __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new FullComment(native.ToPointer(), skipVTables);
                }

                public static FullComment __CreateInstance(FullComment.__Internal native, bool skipVTables = false)
                {
                    return new FullComment(native, skipVTables);
                }

                private static void* __CopyValue(FullComment.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(16);
                    global::CppSharp.Parser.AST.FullComment.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private FullComment(FullComment.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected FullComment(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public FullComment()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(16);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public FullComment(global::CppSharp.Parser.AST.FullComment _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(16);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public override void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Comment __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public global::CppSharp.Parser.AST.BlockContentComment GetBlocks(uint i)
                {
                    var __ret = __Internal.GetBlocks_0((__Instance + __PointerAdjustment), i);
                    global::CppSharp.Parser.AST.BlockContentComment __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (global::CppSharp.Parser.AST.BlockContentComment.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (global::CppSharp.Parser.AST.BlockContentComment) global::CppSharp.Parser.AST.BlockContentComment.NativeToManagedMap[__ret];
                    else __result0 = global::CppSharp.Parser.AST.BlockContentComment.__CreateInstance(__ret);
                    return __result0;
                }

                public void AddBlocks(global::CppSharp.Parser.AST.BlockContentComment s)
                {
                    if (ReferenceEquals(s, null))
                        throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = s.__Instance;
                    __Internal.AddBlocks_0((__Instance + __PointerAdjustment), __arg0);
                }

                public void ClearBlocks()
                {
                    __Internal.ClearBlocks_0((__Instance + __PointerAdjustment));
                }

                public uint BlocksCount
                {
                    get
                    {
                        var __ret = __Internal.GetBlocksCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }
            }

            public unsafe partial class InlineContentComment : global::CppSharp.Parser.AST.Comment, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 8)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.CommentKind Kind;

                    [FieldOffset(4)]
                    public byte HasTrailingNewline;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0InlineContentComment@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0InlineContentComment@AST@CppParser@CppSharp@@QAE@W4CommentKind@123@@Z")]
                    internal static extern global::System.IntPtr ctor_1(global::System.IntPtr instance, global::CppSharp.Parser.AST.CommentKind Kind);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0InlineContentComment@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public static new InlineContentComment __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new InlineContentComment(native.ToPointer(), skipVTables);
                }

                public static InlineContentComment __CreateInstance(InlineContentComment.__Internal native, bool skipVTables = false)
                {
                    return new InlineContentComment(native, skipVTables);
                }

                private static void* __CopyValue(InlineContentComment.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(8);
                    *(InlineContentComment.__Internal*) ret = native;
                    return ret.ToPointer();
                }

                private InlineContentComment(InlineContentComment.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected InlineContentComment(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public InlineContentComment()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(8);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public InlineContentComment(global::CppSharp.Parser.AST.CommentKind Kind)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(8);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var __arg0 = Kind;
                    __Internal.ctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public InlineContentComment(global::CppSharp.Parser.AST.InlineContentComment _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(8);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    *((InlineContentComment.__Internal*) __Instance) = *((InlineContentComment.__Internal*) _0.__Instance);
                }

                public static implicit operator global::CppSharp.Parser.AST.InlineContentComment(global::CppSharp.Parser.AST.CommentKind Kind)
                {
                    return new global::CppSharp.Parser.AST.InlineContentComment(Kind);
                }

                public bool HasTrailingNewline
                {
                    get
                    {
                        return ((__Internal*) __Instance)->HasTrailingNewline != 0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->HasTrailingNewline = (byte) (value ? 1 : 0);
                    }
                }
            }

            public unsafe partial class ParagraphComment : global::CppSharp.Parser.AST.BlockContentComment, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 20)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.CommentKind Kind;

                    [FieldOffset(4)]
                    public byte IsWhitespace;

                    [FieldOffset(8)]
                    internal global::Std.Vector.__Internal Content;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0ParagraphComment@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0ParagraphComment@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1ParagraphComment@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getContent@ParagraphComment@AST@CppParser@CppSharp@@QAEPAVInlineContentComment@234@I@Z")]
                    internal static extern global::System.IntPtr GetContent_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addContent@ParagraphComment@AST@CppParser@CppSharp@@QAEXAAPAVInlineContentComment@234@@Z")]
                    internal static extern void AddContent_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearContent@ParagraphComment@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void ClearContent_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getContentCount@ParagraphComment@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint GetContentCount_0(global::System.IntPtr instance);
                }

                public static new ParagraphComment __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new ParagraphComment(native.ToPointer(), skipVTables);
                }

                public static ParagraphComment __CreateInstance(ParagraphComment.__Internal native, bool skipVTables = false)
                {
                    return new ParagraphComment(native, skipVTables);
                }

                private static void* __CopyValue(ParagraphComment.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(20);
                    global::CppSharp.Parser.AST.ParagraphComment.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private ParagraphComment(ParagraphComment.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected ParagraphComment(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public ParagraphComment()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(20);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public ParagraphComment(global::CppSharp.Parser.AST.ParagraphComment _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(20);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public override void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Comment __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public global::CppSharp.Parser.AST.InlineContentComment GetContent(uint i)
                {
                    var __ret = __Internal.GetContent_0((__Instance + __PointerAdjustment), i);
                    global::CppSharp.Parser.AST.InlineContentComment __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (global::CppSharp.Parser.AST.InlineContentComment.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (global::CppSharp.Parser.AST.InlineContentComment) global::CppSharp.Parser.AST.InlineContentComment.NativeToManagedMap[__ret];
                    else __result0 = global::CppSharp.Parser.AST.InlineContentComment.__CreateInstance(__ret);
                    return __result0;
                }

                public void AddContent(global::CppSharp.Parser.AST.InlineContentComment s)
                {
                    if (ReferenceEquals(s, null))
                        throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = s.__Instance;
                    __Internal.AddContent_0((__Instance + __PointerAdjustment), __arg0);
                }

                public void ClearContent()
                {
                    __Internal.ClearContent_0((__Instance + __PointerAdjustment));
                }

                public bool IsWhitespace
                {
                    get
                    {
                        return ((__Internal*) __Instance)->IsWhitespace != 0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->IsWhitespace = (byte) (value ? 1 : 0);
                    }
                }

                public uint ContentCount
                {
                    get
                    {
                        var __ret = __Internal.GetContentCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }
            }

            public unsafe partial class BlockCommandComment : global::CppSharp.Parser.AST.BlockContentComment, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 24)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.CommentKind Kind;

                    [FieldOffset(4)]
                    public uint CommandId;

                    [FieldOffset(8)]
                    public global::System.IntPtr ParagraphComment;

                    [FieldOffset(12)]
                    internal global::Std.Vector.__Internal Arguments;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0BlockCommandComment@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0BlockCommandComment@AST@CppParser@CppSharp@@QAE@W4CommentKind@123@@Z")]
                    internal static extern global::System.IntPtr ctor_1(global::System.IntPtr instance, global::CppSharp.Parser.AST.CommentKind Kind);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0BlockCommandComment@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1BlockCommandComment@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getArguments@BlockCommandComment@AST@CppParser@CppSharp@@QAE?AVArgument@1234@I@Z")]
                    internal static extern void GetArguments_0(global::System.IntPtr instance, global::System.IntPtr @return, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addArguments@BlockCommandComment@AST@CppParser@CppSharp@@QAEXAAVArgument@1234@@Z")]
                    internal static extern void AddArguments_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearArguments@BlockCommandComment@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void ClearArguments_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getArgumentsCount@BlockCommandComment@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint GetArgumentsCount_0(global::System.IntPtr instance);
                }

                public unsafe partial class Argument : IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 24)]
                    public partial struct __Internal
                    {
                        [FieldOffset(0)]
                        public global::Std.BasicString.__Internal Text;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                            EntryPoint="??0Argument@BlockCommandComment@AST@CppParser@CppSharp@@QAE@XZ")]
                        internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                            EntryPoint="??0Argument@BlockCommandComment@AST@CppParser@CppSharp@@QAE@ABV01234@@Z")]
                        internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                            EntryPoint="??1Argument@BlockCommandComment@AST@CppParser@CppSharp@@QAE@XZ")]
                        internal static extern void dtor_0(global::System.IntPtr instance, int delete);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                            EntryPoint="?getText@Argument@BlockCommandComment@AST@CppParser@CppSharp@@QAEPBDXZ")]
                        internal static extern global::System.IntPtr Text_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                            EntryPoint="?setText@Argument@BlockCommandComment@AST@CppParser@CppSharp@@QAEXPBD@Z")]
                        internal static extern void SetText_0(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string s);
                    }

                    public global::System.IntPtr __Instance { get; protected set; }

                    protected int __PointerAdjustment;
                    public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Argument> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Argument>();
                    protected void*[] __OriginalVTables;

                    protected bool __ownsNativeInstance;

                    public static Argument __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                    {
                        return new Argument(native.ToPointer(), skipVTables);
                    }

                    public static Argument __CreateInstance(Argument.__Internal native, bool skipVTables = false)
                    {
                        return new Argument(native, skipVTables);
                    }

                    private static void* __CopyValue(Argument.__Internal native)
                    {
                        var ret = Marshal.AllocHGlobal(24);
                        global::CppSharp.Parser.AST.BlockCommandComment.Argument.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                        return ret.ToPointer();
                    }

                    private Argument(Argument.__Internal native, bool skipVTables = false)
                        : this(__CopyValue(native), skipVTables)
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected Argument(void* native, bool skipVTables = false)
                    {
                        if (native == null)
                            return;
                        __Instance = new global::System.IntPtr(native);
                    }

                    public Argument()
                    {
                        __Instance = Marshal.AllocHGlobal(24);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        __Internal.ctor_0((__Instance + __PointerAdjustment));
                    }

                    public Argument(global::CppSharp.Parser.AST.BlockCommandComment.Argument _0)
                    {
                        __Instance = Marshal.AllocHGlobal(24);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        if (ReferenceEquals(_0, null))
                            throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                        var __arg0 = _0.__Instance;
                        __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                    }

                    public void Dispose()
                    {
                        Dispose(disposing: true);
                    }

                    public virtual void Dispose(bool disposing)
                    {
                        global::CppSharp.Parser.AST.BlockCommandComment.Argument __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (disposing)
                            __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public string Text
                    {
                        get
                        {
                            var __ret = __Internal.Text_0((__Instance + __PointerAdjustment));
                            return Marshal.PtrToStringAnsi(__ret);
                        }

                        set
                        {
                            var __arg0 = value;
                            __Internal.SetText_0((__Instance + __PointerAdjustment), __arg0);
                        }
                    }
                }

                public static new BlockCommandComment __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new BlockCommandComment(native.ToPointer(), skipVTables);
                }

                public static BlockCommandComment __CreateInstance(BlockCommandComment.__Internal native, bool skipVTables = false)
                {
                    return new BlockCommandComment(native, skipVTables);
                }

                private static void* __CopyValue(BlockCommandComment.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(24);
                    global::CppSharp.Parser.AST.BlockCommandComment.__Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private BlockCommandComment(BlockCommandComment.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected BlockCommandComment(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public BlockCommandComment()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(24);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public BlockCommandComment(global::CppSharp.Parser.AST.CommentKind Kind)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(24);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var __arg0 = Kind;
                    __Internal.ctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public BlockCommandComment(global::CppSharp.Parser.AST.BlockCommandComment _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(24);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_2((__Instance + __PointerAdjustment), __arg0);
                }

                public override void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Comment __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public global::CppSharp.Parser.AST.BlockCommandComment.Argument GetArguments(uint i)
                {
                    var __ret = new global::CppSharp.Parser.AST.BlockCommandComment.Argument.__Internal();
                    __Internal.GetArguments_0((__Instance + __PointerAdjustment), new IntPtr(&__ret), i);
                    return global::CppSharp.Parser.AST.BlockCommandComment.Argument.__CreateInstance(__ret);
                }

                public void AddArguments(global::CppSharp.Parser.AST.BlockCommandComment.Argument s)
                {
                    if (ReferenceEquals(s, null))
                        throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = s.__Instance;
                    __Internal.AddArguments_0((__Instance + __PointerAdjustment), __arg0);
                }

                public void ClearArguments()
                {
                    __Internal.ClearArguments_0((__Instance + __PointerAdjustment));
                }

                public static implicit operator global::CppSharp.Parser.AST.BlockCommandComment(global::CppSharp.Parser.AST.CommentKind Kind)
                {
                    return new global::CppSharp.Parser.AST.BlockCommandComment(Kind);
                }

                public uint CommandId
                {
                    get
                    {
                        return ((__Internal*) __Instance)->CommandId;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->CommandId = value;
                    }
                }

                public global::CppSharp.Parser.AST.ParagraphComment ParagraphComment
                {
                    get
                    {
                        global::CppSharp.Parser.AST.ParagraphComment __result0;
                        if (((__Internal*) __Instance)->ParagraphComment == IntPtr.Zero) __result0 = null;
                        else if (global::CppSharp.Parser.AST.ParagraphComment.NativeToManagedMap.ContainsKey(((__Internal*) __Instance)->ParagraphComment))
                            __result0 = (global::CppSharp.Parser.AST.ParagraphComment) global::CppSharp.Parser.AST.ParagraphComment.NativeToManagedMap[((__Internal*) __Instance)->ParagraphComment];
                        else __result0 = global::CppSharp.Parser.AST.ParagraphComment.__CreateInstance(((__Internal*) __Instance)->ParagraphComment);
                        return __result0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->ParagraphComment = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public uint ArgumentsCount
                {
                    get
                    {
                        var __ret = __Internal.GetArgumentsCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }
            }

            public unsafe partial class ParamCommandComment : global::CppSharp.Parser.AST.BlockCommandComment, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 32)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.CommentKind Kind;

                    [FieldOffset(4)]
                    public uint CommandId;

                    [FieldOffset(8)]
                    public global::System.IntPtr ParagraphComment;

                    [FieldOffset(12)]
                    internal global::Std.Vector.__Internal Arguments;

                    [FieldOffset(24)]
                    public global::CppSharp.Parser.AST.ParamCommandComment.PassDirection Direction;

                    [FieldOffset(28)]
                    public uint ParamIndex;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0ParamCommandComment@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0ParamCommandComment@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1ParamCommandComment@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);
                }

                public enum PassDirection
                {
                    In = 0,
                    Out = 1,
                    InOut = 2
                }

                public static new ParamCommandComment __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new ParamCommandComment(native.ToPointer(), skipVTables);
                }

                public static ParamCommandComment __CreateInstance(ParamCommandComment.__Internal native, bool skipVTables = false)
                {
                    return new ParamCommandComment(native, skipVTables);
                }

                private static void* __CopyValue(ParamCommandComment.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(32);
                    global::CppSharp.Parser.AST.ParamCommandComment.__Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private ParamCommandComment(ParamCommandComment.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected ParamCommandComment(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public ParamCommandComment()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(32);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public ParamCommandComment(global::CppSharp.Parser.AST.ParamCommandComment _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(32);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_2((__Instance + __PointerAdjustment), __arg0);
                }

                public override void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Comment __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public global::CppSharp.Parser.AST.ParamCommandComment.PassDirection Direction
                {
                    get
                    {
                        return ((__Internal*) __Instance)->Direction;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Direction = value;
                    }
                }

                public uint ParamIndex
                {
                    get
                    {
                        return ((__Internal*) __Instance)->ParamIndex;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->ParamIndex = value;
                    }
                }
            }

            public unsafe partial class TParamCommandComment : global::CppSharp.Parser.AST.BlockCommandComment, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 36)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.CommentKind Kind;

                    [FieldOffset(4)]
                    public uint CommandId;

                    [FieldOffset(8)]
                    public global::System.IntPtr ParagraphComment;

                    [FieldOffset(12)]
                    internal global::Std.Vector.__Internal Arguments;

                    [FieldOffset(24)]
                    internal global::Std.Vector.__Internal Position;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TParamCommandComment@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TParamCommandComment@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1TParamCommandComment@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getPosition@TParamCommandComment@AST@CppParser@CppSharp@@QAEII@Z")]
                    internal static extern uint GetPosition_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addPosition@TParamCommandComment@AST@CppParser@CppSharp@@QAEXAAI@Z")]
                    internal static extern void AddPosition_0(global::System.IntPtr instance, uint* s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearPosition@TParamCommandComment@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void ClearPosition_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getPositionCount@TParamCommandComment@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint GetPositionCount_0(global::System.IntPtr instance);
                }

                public static new TParamCommandComment __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new TParamCommandComment(native.ToPointer(), skipVTables);
                }

                public static TParamCommandComment __CreateInstance(TParamCommandComment.__Internal native, bool skipVTables = false)
                {
                    return new TParamCommandComment(native, skipVTables);
                }

                private static void* __CopyValue(TParamCommandComment.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(36);
                    global::CppSharp.Parser.AST.TParamCommandComment.__Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private TParamCommandComment(TParamCommandComment.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected TParamCommandComment(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public TParamCommandComment()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(36);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public TParamCommandComment(global::CppSharp.Parser.AST.TParamCommandComment _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(36);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_2((__Instance + __PointerAdjustment), __arg0);
                }

                public override void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Comment __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public uint GetPosition(uint i)
                {
                    var __ret = __Internal.GetPosition_0((__Instance + __PointerAdjustment), i);
                    return __ret;
                }

                public void AddPosition(ref uint s)
                {
                    fixed (uint* __refParamPtr0 = &s)
                    {
                        var __arg0 = __refParamPtr0;
                        __Internal.AddPosition_0((__Instance + __PointerAdjustment), __arg0);
                    }
                }

                public void ClearPosition()
                {
                    __Internal.ClearPosition_0((__Instance + __PointerAdjustment));
                }

                public uint PositionCount
                {
                    get
                    {
                        var __ret = __Internal.GetPositionCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }
            }

            public unsafe partial class VerbatimBlockLineComment : global::CppSharp.Parser.AST.Comment, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 28)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.CommentKind Kind;

                    [FieldOffset(4)]
                    public global::Std.BasicString.__Internal Text;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0VerbatimBlockLineComment@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0VerbatimBlockLineComment@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1VerbatimBlockLineComment@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getText@VerbatimBlockLineComment@AST@CppParser@CppSharp@@QAEPBDXZ")]
                    internal static extern global::System.IntPtr Text_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?setText@VerbatimBlockLineComment@AST@CppParser@CppSharp@@QAEXPBD@Z")]
                    internal static extern void SetText_0(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string s);
                }

                public static new VerbatimBlockLineComment __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new VerbatimBlockLineComment(native.ToPointer(), skipVTables);
                }

                public static VerbatimBlockLineComment __CreateInstance(VerbatimBlockLineComment.__Internal native, bool skipVTables = false)
                {
                    return new VerbatimBlockLineComment(native, skipVTables);
                }

                private static void* __CopyValue(VerbatimBlockLineComment.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(28);
                    global::CppSharp.Parser.AST.VerbatimBlockLineComment.__Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private VerbatimBlockLineComment(VerbatimBlockLineComment.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected VerbatimBlockLineComment(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public VerbatimBlockLineComment()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(28);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public VerbatimBlockLineComment(global::CppSharp.Parser.AST.VerbatimBlockLineComment _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(28);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_2((__Instance + __PointerAdjustment), __arg0);
                }

                public override void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Comment __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public string Text
                {
                    get
                    {
                        var __ret = __Internal.Text_0((__Instance + __PointerAdjustment));
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var __arg0 = value;
                        __Internal.SetText_0((__Instance + __PointerAdjustment), __arg0);
                    }
                }
            }

            public unsafe partial class VerbatimBlockComment : global::CppSharp.Parser.AST.BlockCommandComment, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 36)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.CommentKind Kind;

                    [FieldOffset(4)]
                    public uint CommandId;

                    [FieldOffset(8)]
                    public global::System.IntPtr ParagraphComment;

                    [FieldOffset(12)]
                    internal global::Std.Vector.__Internal Arguments;

                    [FieldOffset(24)]
                    internal global::Std.Vector.__Internal Lines;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0VerbatimBlockComment@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0VerbatimBlockComment@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1VerbatimBlockComment@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getLines@VerbatimBlockComment@AST@CppParser@CppSharp@@QAEPAVVerbatimBlockLineComment@234@I@Z")]
                    internal static extern global::System.IntPtr GetLines_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addLines@VerbatimBlockComment@AST@CppParser@CppSharp@@QAEXAAPAVVerbatimBlockLineComment@234@@Z")]
                    internal static extern void AddLines_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearLines@VerbatimBlockComment@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void ClearLines_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getLinesCount@VerbatimBlockComment@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint GetLinesCount_0(global::System.IntPtr instance);
                }

                public static new VerbatimBlockComment __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new VerbatimBlockComment(native.ToPointer(), skipVTables);
                }

                public static VerbatimBlockComment __CreateInstance(VerbatimBlockComment.__Internal native, bool skipVTables = false)
                {
                    return new VerbatimBlockComment(native, skipVTables);
                }

                private static void* __CopyValue(VerbatimBlockComment.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(36);
                    global::CppSharp.Parser.AST.VerbatimBlockComment.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private VerbatimBlockComment(VerbatimBlockComment.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected VerbatimBlockComment(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public VerbatimBlockComment()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(36);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public VerbatimBlockComment(global::CppSharp.Parser.AST.VerbatimBlockComment _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(36);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public override void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Comment __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public global::CppSharp.Parser.AST.VerbatimBlockLineComment GetLines(uint i)
                {
                    var __ret = __Internal.GetLines_0((__Instance + __PointerAdjustment), i);
                    global::CppSharp.Parser.AST.VerbatimBlockLineComment __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (global::CppSharp.Parser.AST.VerbatimBlockLineComment.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (global::CppSharp.Parser.AST.VerbatimBlockLineComment) global::CppSharp.Parser.AST.VerbatimBlockLineComment.NativeToManagedMap[__ret];
                    else __result0 = global::CppSharp.Parser.AST.VerbatimBlockLineComment.__CreateInstance(__ret);
                    return __result0;
                }

                public void AddLines(global::CppSharp.Parser.AST.VerbatimBlockLineComment s)
                {
                    if (ReferenceEquals(s, null))
                        throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = s.__Instance;
                    __Internal.AddLines_0((__Instance + __PointerAdjustment), __arg0);
                }

                public void ClearLines()
                {
                    __Internal.ClearLines_0((__Instance + __PointerAdjustment));
                }

                public uint LinesCount
                {
                    get
                    {
                        var __ret = __Internal.GetLinesCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }
            }

            public unsafe partial class VerbatimLineComment : global::CppSharp.Parser.AST.BlockCommandComment, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 48)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.CommentKind Kind;

                    [FieldOffset(4)]
                    public uint CommandId;

                    [FieldOffset(8)]
                    public global::System.IntPtr ParagraphComment;

                    [FieldOffset(12)]
                    internal global::Std.Vector.__Internal Arguments;

                    [FieldOffset(24)]
                    public global::Std.BasicString.__Internal Text;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0VerbatimLineComment@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0VerbatimLineComment@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1VerbatimLineComment@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getText@VerbatimLineComment@AST@CppParser@CppSharp@@QAEPBDXZ")]
                    internal static extern global::System.IntPtr Text_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?setText@VerbatimLineComment@AST@CppParser@CppSharp@@QAEXPBD@Z")]
                    internal static extern void SetText_0(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string s);
                }

                public static new VerbatimLineComment __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new VerbatimLineComment(native.ToPointer(), skipVTables);
                }

                public static VerbatimLineComment __CreateInstance(VerbatimLineComment.__Internal native, bool skipVTables = false)
                {
                    return new VerbatimLineComment(native, skipVTables);
                }

                private static void* __CopyValue(VerbatimLineComment.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(48);
                    global::CppSharp.Parser.AST.VerbatimLineComment.__Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private VerbatimLineComment(VerbatimLineComment.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected VerbatimLineComment(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public VerbatimLineComment()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(48);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public VerbatimLineComment(global::CppSharp.Parser.AST.VerbatimLineComment _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(48);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_2((__Instance + __PointerAdjustment), __arg0);
                }

                public override void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Comment __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public string Text
                {
                    get
                    {
                        var __ret = __Internal.Text_0((__Instance + __PointerAdjustment));
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var __arg0 = value;
                        __Internal.SetText_0((__Instance + __PointerAdjustment), __arg0);
                    }
                }
            }

            public unsafe partial class InlineCommandComment : global::CppSharp.Parser.AST.InlineContentComment, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 28)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.CommentKind Kind;

                    [FieldOffset(4)]
                    public byte HasTrailingNewline;

                    [FieldOffset(8)]
                    public uint CommandId;

                    [FieldOffset(12)]
                    public global::CppSharp.Parser.AST.InlineCommandComment.RenderKind CommentRenderKind;

                    [FieldOffset(16)]
                    internal global::Std.Vector.__Internal Arguments;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0InlineCommandComment@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0InlineCommandComment@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1InlineCommandComment@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getArguments@InlineCommandComment@AST@CppParser@CppSharp@@QAE?AVArgument@1234@I@Z")]
                    internal static extern void GetArguments_0(global::System.IntPtr instance, global::System.IntPtr @return, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addArguments@InlineCommandComment@AST@CppParser@CppSharp@@QAEXAAVArgument@1234@@Z")]
                    internal static extern void AddArguments_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearArguments@InlineCommandComment@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void ClearArguments_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getArgumentsCount@InlineCommandComment@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint GetArgumentsCount_0(global::System.IntPtr instance);
                }

                public enum RenderKind
                {
                    RenderNormal = 0,
                    RenderBold = 1,
                    RenderMonospaced = 2,
                    RenderEmphasized = 3
                }

                public unsafe partial class Argument : IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 24)]
                    public partial struct __Internal
                    {
                        [FieldOffset(0)]
                        public global::Std.BasicString.__Internal Text;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                            EntryPoint="??0Argument@InlineCommandComment@AST@CppParser@CppSharp@@QAE@XZ")]
                        internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                            EntryPoint="??0Argument@InlineCommandComment@AST@CppParser@CppSharp@@QAE@ABV01234@@Z")]
                        internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                            EntryPoint="??1Argument@InlineCommandComment@AST@CppParser@CppSharp@@QAE@XZ")]
                        internal static extern void dtor_0(global::System.IntPtr instance, int delete);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                            EntryPoint="?getText@Argument@InlineCommandComment@AST@CppParser@CppSharp@@QAEPBDXZ")]
                        internal static extern global::System.IntPtr Text_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                            EntryPoint="?setText@Argument@InlineCommandComment@AST@CppParser@CppSharp@@QAEXPBD@Z")]
                        internal static extern void SetText_0(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string s);
                    }

                    public global::System.IntPtr __Instance { get; protected set; }

                    protected int __PointerAdjustment;
                    public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Argument> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Argument>();
                    protected void*[] __OriginalVTables;

                    protected bool __ownsNativeInstance;

                    public static Argument __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                    {
                        return new Argument(native.ToPointer(), skipVTables);
                    }

                    public static Argument __CreateInstance(Argument.__Internal native, bool skipVTables = false)
                    {
                        return new Argument(native, skipVTables);
                    }

                    private static void* __CopyValue(Argument.__Internal native)
                    {
                        var ret = Marshal.AllocHGlobal(24);
                        global::CppSharp.Parser.AST.InlineCommandComment.Argument.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                        return ret.ToPointer();
                    }

                    private Argument(Argument.__Internal native, bool skipVTables = false)
                        : this(__CopyValue(native), skipVTables)
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected Argument(void* native, bool skipVTables = false)
                    {
                        if (native == null)
                            return;
                        __Instance = new global::System.IntPtr(native);
                    }

                    public Argument()
                    {
                        __Instance = Marshal.AllocHGlobal(24);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        __Internal.ctor_0((__Instance + __PointerAdjustment));
                    }

                    public Argument(global::CppSharp.Parser.AST.InlineCommandComment.Argument _0)
                    {
                        __Instance = Marshal.AllocHGlobal(24);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        if (ReferenceEquals(_0, null))
                            throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                        var __arg0 = _0.__Instance;
                        __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                    }

                    public void Dispose()
                    {
                        Dispose(disposing: true);
                    }

                    public virtual void Dispose(bool disposing)
                    {
                        global::CppSharp.Parser.AST.InlineCommandComment.Argument __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (disposing)
                            __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public string Text
                    {
                        get
                        {
                            var __ret = __Internal.Text_0((__Instance + __PointerAdjustment));
                            return Marshal.PtrToStringAnsi(__ret);
                        }

                        set
                        {
                            var __arg0 = value;
                            __Internal.SetText_0((__Instance + __PointerAdjustment), __arg0);
                        }
                    }
                }

                public static new InlineCommandComment __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new InlineCommandComment(native.ToPointer(), skipVTables);
                }

                public static InlineCommandComment __CreateInstance(InlineCommandComment.__Internal native, bool skipVTables = false)
                {
                    return new InlineCommandComment(native, skipVTables);
                }

                private static void* __CopyValue(InlineCommandComment.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(28);
                    global::CppSharp.Parser.AST.InlineCommandComment.__Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private InlineCommandComment(InlineCommandComment.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected InlineCommandComment(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public InlineCommandComment()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(28);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public InlineCommandComment(global::CppSharp.Parser.AST.InlineCommandComment _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(28);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_2((__Instance + __PointerAdjustment), __arg0);
                }

                public override void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Comment __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public global::CppSharp.Parser.AST.InlineCommandComment.Argument GetArguments(uint i)
                {
                    var __ret = new global::CppSharp.Parser.AST.InlineCommandComment.Argument.__Internal();
                    __Internal.GetArguments_0((__Instance + __PointerAdjustment), new IntPtr(&__ret), i);
                    return global::CppSharp.Parser.AST.InlineCommandComment.Argument.__CreateInstance(__ret);
                }

                public void AddArguments(global::CppSharp.Parser.AST.InlineCommandComment.Argument s)
                {
                    if (ReferenceEquals(s, null))
                        throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = s.__Instance;
                    __Internal.AddArguments_0((__Instance + __PointerAdjustment), __arg0);
                }

                public void ClearArguments()
                {
                    __Internal.ClearArguments_0((__Instance + __PointerAdjustment));
                }

                public uint CommandId
                {
                    get
                    {
                        return ((__Internal*) __Instance)->CommandId;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->CommandId = value;
                    }
                }

                public global::CppSharp.Parser.AST.InlineCommandComment.RenderKind CommentRenderKind
                {
                    get
                    {
                        return ((__Internal*) __Instance)->CommentRenderKind;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->CommentRenderKind = value;
                    }
                }

                public uint ArgumentsCount
                {
                    get
                    {
                        var __ret = __Internal.GetArgumentsCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }
            }

            public unsafe partial class HTMLTagComment : global::CppSharp.Parser.AST.InlineContentComment, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 8)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.CommentKind Kind;

                    [FieldOffset(4)]
                    public byte HasTrailingNewline;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0HTMLTagComment@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0HTMLTagComment@AST@CppParser@CppSharp@@QAE@W4CommentKind@123@@Z")]
                    internal static extern global::System.IntPtr ctor_1(global::System.IntPtr instance, global::CppSharp.Parser.AST.CommentKind Kind);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0HTMLTagComment@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public static new HTMLTagComment __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new HTMLTagComment(native.ToPointer(), skipVTables);
                }

                public static HTMLTagComment __CreateInstance(HTMLTagComment.__Internal native, bool skipVTables = false)
                {
                    return new HTMLTagComment(native, skipVTables);
                }

                private static void* __CopyValue(HTMLTagComment.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(8);
                    *(HTMLTagComment.__Internal*) ret = native;
                    return ret.ToPointer();
                }

                private HTMLTagComment(HTMLTagComment.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected HTMLTagComment(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public HTMLTagComment()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(8);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public HTMLTagComment(global::CppSharp.Parser.AST.CommentKind Kind)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(8);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var __arg0 = Kind;
                    __Internal.ctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public HTMLTagComment(global::CppSharp.Parser.AST.HTMLTagComment _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(8);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    *((HTMLTagComment.__Internal*) __Instance) = *((HTMLTagComment.__Internal*) _0.__Instance);
                }

                public static implicit operator global::CppSharp.Parser.AST.HTMLTagComment(global::CppSharp.Parser.AST.CommentKind Kind)
                {
                    return new global::CppSharp.Parser.AST.HTMLTagComment(Kind);
                }
            }

            public unsafe partial class HTMLStartTagComment : global::CppSharp.Parser.AST.HTMLTagComment, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 44)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.CommentKind Kind;

                    [FieldOffset(4)]
                    public byte HasTrailingNewline;

                    [FieldOffset(8)]
                    public global::Std.BasicString.__Internal TagName;

                    [FieldOffset(32)]
                    internal global::Std.Vector.__Internal Attributes;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0HTMLStartTagComment@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0HTMLStartTagComment@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1HTMLStartTagComment@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getAttributes@HTMLStartTagComment@AST@CppParser@CppSharp@@QAE?AVAttribute@1234@I@Z")]
                    internal static extern void GetAttributes_0(global::System.IntPtr instance, global::System.IntPtr @return, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addAttributes@HTMLStartTagComment@AST@CppParser@CppSharp@@QAEXAAVAttribute@1234@@Z")]
                    internal static extern void AddAttributes_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearAttributes@HTMLStartTagComment@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void ClearAttributes_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getTagName@HTMLStartTagComment@AST@CppParser@CppSharp@@QAEPBDXZ")]
                    internal static extern global::System.IntPtr TagName_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?setTagName@HTMLStartTagComment@AST@CppParser@CppSharp@@QAEXPBD@Z")]
                    internal static extern void SetTagName_0(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getAttributesCount@HTMLStartTagComment@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint GetAttributesCount_0(global::System.IntPtr instance);
                }

                public unsafe partial class Attribute : IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 48)]
                    public partial struct __Internal
                    {
                        [FieldOffset(0)]
                        public global::Std.BasicString.__Internal Name;

                        [FieldOffset(24)]
                        public global::Std.BasicString.__Internal Value;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                            EntryPoint="??0Attribute@HTMLStartTagComment@AST@CppParser@CppSharp@@QAE@XZ")]
                        internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                            EntryPoint="??0Attribute@HTMLStartTagComment@AST@CppParser@CppSharp@@QAE@ABV01234@@Z")]
                        internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                            EntryPoint="??1Attribute@HTMLStartTagComment@AST@CppParser@CppSharp@@QAE@XZ")]
                        internal static extern void dtor_0(global::System.IntPtr instance, int delete);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                            EntryPoint="?getName@Attribute@HTMLStartTagComment@AST@CppParser@CppSharp@@QAEPBDXZ")]
                        internal static extern global::System.IntPtr Name_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                            EntryPoint="?setName@Attribute@HTMLStartTagComment@AST@CppParser@CppSharp@@QAEXPBD@Z")]
                        internal static extern void SetName_0(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string s);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                            EntryPoint="?getValue@Attribute@HTMLStartTagComment@AST@CppParser@CppSharp@@QAEPBDXZ")]
                        internal static extern global::System.IntPtr Value_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                            EntryPoint="?setValue@Attribute@HTMLStartTagComment@AST@CppParser@CppSharp@@QAEXPBD@Z")]
                        internal static extern void SetValue_0(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string s);
                    }

                    public global::System.IntPtr __Instance { get; protected set; }

                    protected int __PointerAdjustment;
                    public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Attribute> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Attribute>();
                    protected void*[] __OriginalVTables;

                    protected bool __ownsNativeInstance;

                    public static Attribute __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                    {
                        return new Attribute(native.ToPointer(), skipVTables);
                    }

                    public static Attribute __CreateInstance(Attribute.__Internal native, bool skipVTables = false)
                    {
                        return new Attribute(native, skipVTables);
                    }

                    private static void* __CopyValue(Attribute.__Internal native)
                    {
                        var ret = Marshal.AllocHGlobal(48);
                        global::CppSharp.Parser.AST.HTMLStartTagComment.Attribute.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                        return ret.ToPointer();
                    }

                    private Attribute(Attribute.__Internal native, bool skipVTables = false)
                        : this(__CopyValue(native), skipVTables)
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected Attribute(void* native, bool skipVTables = false)
                    {
                        if (native == null)
                            return;
                        __Instance = new global::System.IntPtr(native);
                    }

                    public Attribute()
                    {
                        __Instance = Marshal.AllocHGlobal(48);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        __Internal.ctor_0((__Instance + __PointerAdjustment));
                    }

                    public Attribute(global::CppSharp.Parser.AST.HTMLStartTagComment.Attribute _0)
                    {
                        __Instance = Marshal.AllocHGlobal(48);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        if (ReferenceEquals(_0, null))
                            throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                        var __arg0 = _0.__Instance;
                        __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                    }

                    public void Dispose()
                    {
                        Dispose(disposing: true);
                    }

                    public virtual void Dispose(bool disposing)
                    {
                        global::CppSharp.Parser.AST.HTMLStartTagComment.Attribute __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (disposing)
                            __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public string Name
                    {
                        get
                        {
                            var __ret = __Internal.Name_0((__Instance + __PointerAdjustment));
                            return Marshal.PtrToStringAnsi(__ret);
                        }

                        set
                        {
                            var __arg0 = value;
                            __Internal.SetName_0((__Instance + __PointerAdjustment), __arg0);
                        }
                    }

                    public string Value
                    {
                        get
                        {
                            var __ret = __Internal.Value_0((__Instance + __PointerAdjustment));
                            return Marshal.PtrToStringAnsi(__ret);
                        }

                        set
                        {
                            var __arg0 = value;
                            __Internal.SetValue_0((__Instance + __PointerAdjustment), __arg0);
                        }
                    }
                }

                public static new HTMLStartTagComment __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new HTMLStartTagComment(native.ToPointer(), skipVTables);
                }

                public static HTMLStartTagComment __CreateInstance(HTMLStartTagComment.__Internal native, bool skipVTables = false)
                {
                    return new HTMLStartTagComment(native, skipVTables);
                }

                private static void* __CopyValue(HTMLStartTagComment.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(44);
                    global::CppSharp.Parser.AST.HTMLStartTagComment.__Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private HTMLStartTagComment(HTMLStartTagComment.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected HTMLStartTagComment(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public HTMLStartTagComment()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(44);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public HTMLStartTagComment(global::CppSharp.Parser.AST.HTMLStartTagComment _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(44);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_2((__Instance + __PointerAdjustment), __arg0);
                }

                public override void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Comment __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public global::CppSharp.Parser.AST.HTMLStartTagComment.Attribute GetAttributes(uint i)
                {
                    var __ret = new global::CppSharp.Parser.AST.HTMLStartTagComment.Attribute.__Internal();
                    __Internal.GetAttributes_0((__Instance + __PointerAdjustment), new IntPtr(&__ret), i);
                    return global::CppSharp.Parser.AST.HTMLStartTagComment.Attribute.__CreateInstance(__ret);
                }

                public void AddAttributes(global::CppSharp.Parser.AST.HTMLStartTagComment.Attribute s)
                {
                    if (ReferenceEquals(s, null))
                        throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = s.__Instance;
                    __Internal.AddAttributes_0((__Instance + __PointerAdjustment), __arg0);
                }

                public void ClearAttributes()
                {
                    __Internal.ClearAttributes_0((__Instance + __PointerAdjustment));
                }

                public string TagName
                {
                    get
                    {
                        var __ret = __Internal.TagName_0((__Instance + __PointerAdjustment));
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var __arg0 = value;
                        __Internal.SetTagName_0((__Instance + __PointerAdjustment), __arg0);
                    }
                }

                public uint AttributesCount
                {
                    get
                    {
                        var __ret = __Internal.GetAttributesCount_0((__Instance + __PointerAdjustment));
                        return __ret;
                    }
                }
            }

            public unsafe partial class HTMLEndTagComment : global::CppSharp.Parser.AST.HTMLTagComment, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 32)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.CommentKind Kind;

                    [FieldOffset(4)]
                    public byte HasTrailingNewline;

                    [FieldOffset(8)]
                    public global::Std.BasicString.__Internal TagName;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0HTMLEndTagComment@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0HTMLEndTagComment@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1HTMLEndTagComment@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getTagName@HTMLEndTagComment@AST@CppParser@CppSharp@@QAEPBDXZ")]
                    internal static extern global::System.IntPtr TagName_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?setTagName@HTMLEndTagComment@AST@CppParser@CppSharp@@QAEXPBD@Z")]
                    internal static extern void SetTagName_0(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string s);
                }

                public static new HTMLEndTagComment __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new HTMLEndTagComment(native.ToPointer(), skipVTables);
                }

                public static HTMLEndTagComment __CreateInstance(HTMLEndTagComment.__Internal native, bool skipVTables = false)
                {
                    return new HTMLEndTagComment(native, skipVTables);
                }

                private static void* __CopyValue(HTMLEndTagComment.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(32);
                    global::CppSharp.Parser.AST.HTMLEndTagComment.__Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private HTMLEndTagComment(HTMLEndTagComment.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected HTMLEndTagComment(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public HTMLEndTagComment()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(32);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public HTMLEndTagComment(global::CppSharp.Parser.AST.HTMLEndTagComment _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(32);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_2((__Instance + __PointerAdjustment), __arg0);
                }

                public override void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Comment __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public string TagName
                {
                    get
                    {
                        var __ret = __Internal.TagName_0((__Instance + __PointerAdjustment));
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var __arg0 = value;
                        __Internal.SetTagName_0((__Instance + __PointerAdjustment), __arg0);
                    }
                }
            }

            public unsafe partial class TextComment : global::CppSharp.Parser.AST.InlineContentComment, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 32)]
                public new partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.CommentKind Kind;

                    [FieldOffset(4)]
                    public byte HasTrailingNewline;

                    [FieldOffset(8)]
                    public global::Std.BasicString.__Internal Text;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TextComment@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TextComment@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1TextComment@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getText@TextComment@AST@CppParser@CppSharp@@QAEPBDXZ")]
                    internal static extern global::System.IntPtr Text_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?setText@TextComment@AST@CppParser@CppSharp@@QAEXPBD@Z")]
                    internal static extern void SetText_0(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string s);
                }

                public static new TextComment __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new TextComment(native.ToPointer(), skipVTables);
                }

                public static TextComment __CreateInstance(TextComment.__Internal native, bool skipVTables = false)
                {
                    return new TextComment(native, skipVTables);
                }

                private static void* __CopyValue(TextComment.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(32);
                    global::CppSharp.Parser.AST.TextComment.__Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private TextComment(TextComment.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected TextComment(void* native, bool skipVTables = false)
                    : base((void*) null)
                {
                    __PointerAdjustment = 0;
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public TextComment()
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(32);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public TextComment(global::CppSharp.Parser.AST.TextComment _0)
                    : this((void*) null)
                {
                    __Instance = Marshal.AllocHGlobal(32);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_2((__Instance + __PointerAdjustment), __arg0);
                }

                public override void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.Comment __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public string Text
                {
                    get
                    {
                        var __ret = __Internal.Text_0((__Instance + __PointerAdjustment));
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var __arg0 = value;
                        __Internal.SetText_0((__Instance + __PointerAdjustment), __arg0);
                    }
                }
            }

            public unsafe partial class RawComment : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 56)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    public global::CppSharp.Parser.AST.RawCommentKind Kind;

                    [FieldOffset(4)]
                    public global::Std.BasicString.__Internal Text;

                    [FieldOffset(28)]
                    public global::Std.BasicString.__Internal BriefText;

                    [FieldOffset(52)]
                    public global::System.IntPtr FullCommentBlock;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0RawComment@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0RawComment@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1RawComment@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance, int delete);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getText@RawComment@AST@CppParser@CppSharp@@QAEPBDXZ")]
                    internal static extern global::System.IntPtr Text_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?setText@RawComment@AST@CppParser@CppSharp@@QAEXPBD@Z")]
                    internal static extern void SetText_0(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getBriefText@RawComment@AST@CppParser@CppSharp@@QAEPBDXZ")]
                    internal static extern global::System.IntPtr BriefText_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?setBriefText@RawComment@AST@CppParser@CppSharp@@QAEXPBD@Z")]
                    internal static extern void SetBriefText_0(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string s);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                protected int __PointerAdjustment;
                public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, RawComment> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, RawComment>();
                protected void*[] __OriginalVTables;

                protected bool __ownsNativeInstance;

                public static RawComment __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new RawComment(native.ToPointer(), skipVTables);
                }

                public static RawComment __CreateInstance(RawComment.__Internal native, bool skipVTables = false)
                {
                    return new RawComment(native, skipVTables);
                }

                private static void* __CopyValue(RawComment.__Internal native)
                {
                    var ret = Marshal.AllocHGlobal(56);
                    global::CppSharp.Parser.AST.RawComment.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return ret.ToPointer();
                }

                private RawComment(RawComment.__Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected RawComment(void* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public RawComment()
                {
                    __Instance = Marshal.AllocHGlobal(56);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    __Internal.ctor_0((__Instance + __PointerAdjustment));
                }

                public RawComment(global::CppSharp.Parser.AST.RawComment _0)
                {
                    __Instance = Marshal.AllocHGlobal(56);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    if (ReferenceEquals(_0, null))
                        throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                    var __arg0 = _0.__Instance;
                    __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                public virtual void Dispose(bool disposing)
                {
                    global::CppSharp.Parser.AST.RawComment __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (disposing)
                        __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public global::CppSharp.Parser.AST.RawCommentKind Kind
                {
                    get
                    {
                        return ((__Internal*) __Instance)->Kind;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->Kind = value;
                    }
                }

                public global::CppSharp.Parser.AST.FullComment FullCommentBlock
                {
                    get
                    {
                        global::CppSharp.Parser.AST.FullComment __result0;
                        if (((__Internal*) __Instance)->FullCommentBlock == IntPtr.Zero) __result0 = null;
                        else if (global::CppSharp.Parser.AST.FullComment.NativeToManagedMap.ContainsKey(((__Internal*) __Instance)->FullCommentBlock))
                            __result0 = (global::CppSharp.Parser.AST.FullComment) global::CppSharp.Parser.AST.FullComment.NativeToManagedMap[((__Internal*) __Instance)->FullCommentBlock];
                        else __result0 = global::CppSharp.Parser.AST.FullComment.__CreateInstance(((__Internal*) __Instance)->FullCommentBlock);
                        return __result0;
                    }

                    set
                    {
                        ((__Internal*) __Instance)->FullCommentBlock = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public string Text
                {
                    get
                    {
                        var __ret = __Internal.Text_0((__Instance + __PointerAdjustment));
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var __arg0 = value;
                        __Internal.SetText_0((__Instance + __PointerAdjustment), __arg0);
                    }
                }

                public string BriefText
                {
                    get
                    {
                        var __ret = __Internal.BriefText_0((__Instance + __PointerAdjustment));
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var __arg0 = value;
                        __Internal.SetBriefText_0((__Instance + __PointerAdjustment), __arg0);
                    }
                }
            }
        }
    }
}

namespace CppSharp
{
    namespace Parser
    {
        public unsafe partial struct SourceLocation
        {
            [StructLayout(LayoutKind.Explicit, Size = 4)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                public uint ID;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0SourceLocation@CppParser@CppSharp@@QAE@XZ")]
                internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0SourceLocation@CppParser@CppSharp@@QAE@I@Z")]
                internal static extern global::System.IntPtr ctor_1(global::System.IntPtr instance, uint ID);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0SourceLocation@CppParser@CppSharp@@QAE@ABU012@@Z")]
                internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
            }

            private SourceLocation.__Internal __instance;
            public SourceLocation.__Internal __Instance { get { return __instance; } }

            public static SourceLocation __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new SourceLocation(native.ToPointer(), skipVTables);
            }

            public static SourceLocation __CreateInstance(SourceLocation.__Internal native, bool skipVTables = false)
            {
                return new SourceLocation(native, skipVTables);
            }

            private SourceLocation(SourceLocation.__Internal native, bool skipVTables = false)
                : this()
            {
                __instance = native;
            }

            private SourceLocation(void* native, bool skipVTables = false) : this()
            {
                __instance = *(__Internal*) native;
            }

            public SourceLocation(uint ID)
                : this()
            {
                fixed (__Internal* __instancePtr = &__instance)
                {
                    __Internal.ctor_1(new global::System.IntPtr(__instancePtr), ID);
                }
            }

            public SourceLocation(global::CppSharp.Parser.SourceLocation _0)
                : this()
            {
                var ____arg0 = _0.__Instance;
                var __arg0 = new global::System.IntPtr(&____arg0);
                fixed (__Internal* __instancePtr = &__instance)
                {
                    __Internal.cctor_2(new global::System.IntPtr(__instancePtr), __arg0);
                }
            }

            public static implicit operator global::CppSharp.Parser.SourceLocation(uint ID)
            {
                return new global::CppSharp.Parser.SourceLocation(ID);
            }

            public uint ID
            {
                get
                {
                    return __instance.ID;
                }

                set
                {
                    __instance.ID = value;
                }
            }
        }
    }
}

namespace CppSharp
{
    namespace Parser
    {
        public enum ParserIntType
        {
            NoInt = 0,
            SignedChar = 1,
            UnsignedChar = 2,
            SignedShort = 3,
            UnsignedShort = 4,
            SignedInt = 5,
            UnsignedInt = 6,
            SignedLong = 7,
            UnsignedLong = 8,
            SignedLongLong = 9,
            UnsignedLongLong = 10
        }

        public unsafe partial class ParserTargetInfo : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 176)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                public global::Std.BasicString.__Internal ABI;

                [FieldOffset(24)]
                public global::CppSharp.Parser.ParserIntType Char16Type;

                [FieldOffset(28)]
                public global::CppSharp.Parser.ParserIntType Char32Type;

                [FieldOffset(32)]
                public global::CppSharp.Parser.ParserIntType Int64Type;

                [FieldOffset(36)]
                public global::CppSharp.Parser.ParserIntType IntMaxType;

                [FieldOffset(40)]
                public global::CppSharp.Parser.ParserIntType IntPtrType;

                [FieldOffset(44)]
                public global::CppSharp.Parser.ParserIntType SizeType;

                [FieldOffset(48)]
                public global::CppSharp.Parser.ParserIntType UIntMaxType;

                [FieldOffset(52)]
                public global::CppSharp.Parser.ParserIntType WCharType;

                [FieldOffset(56)]
                public global::CppSharp.Parser.ParserIntType WIntType;

                [FieldOffset(60)]
                public uint BoolAlign;

                [FieldOffset(64)]
                public uint BoolWidth;

                [FieldOffset(68)]
                public uint CharAlign;

                [FieldOffset(72)]
                public uint CharWidth;

                [FieldOffset(76)]
                public uint Char16Align;

                [FieldOffset(80)]
                public uint Char16Width;

                [FieldOffset(84)]
                public uint Char32Align;

                [FieldOffset(88)]
                public uint Char32Width;

                [FieldOffset(92)]
                public uint HalfAlign;

                [FieldOffset(96)]
                public uint HalfWidth;

                [FieldOffset(100)]
                public uint FloatAlign;

                [FieldOffset(104)]
                public uint FloatWidth;

                [FieldOffset(108)]
                public uint DoubleAlign;

                [FieldOffset(112)]
                public uint DoubleWidth;

                [FieldOffset(116)]
                public uint ShortAlign;

                [FieldOffset(120)]
                public uint ShortWidth;

                [FieldOffset(124)]
                public uint IntAlign;

                [FieldOffset(128)]
                public uint IntWidth;

                [FieldOffset(132)]
                public uint IntMaxTWidth;

                [FieldOffset(136)]
                public uint LongAlign;

                [FieldOffset(140)]
                public uint LongWidth;

                [FieldOffset(144)]
                public uint LongDoubleAlign;

                [FieldOffset(148)]
                public uint LongDoubleWidth;

                [FieldOffset(152)]
                public uint LongLongAlign;

                [FieldOffset(156)]
                public uint LongLongWidth;

                [FieldOffset(160)]
                public uint PointerAlign;

                [FieldOffset(164)]
                public uint PointerWidth;

                [FieldOffset(168)]
                public uint WCharAlign;

                [FieldOffset(172)]
                public uint WCharWidth;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0ParserTargetInfo@CppParser@CppSharp@@QAE@XZ")]
                internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0ParserTargetInfo@CppParser@CppSharp@@QAE@ABU012@@Z")]
                internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??1ParserTargetInfo@CppParser@CppSharp@@QAE@XZ")]
                internal static extern void dtor_0(global::System.IntPtr instance, int delete);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getABI@ParserTargetInfo@CppParser@CppSharp@@QAEPBDXZ")]
                internal static extern global::System.IntPtr ABI_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?setABI@ParserTargetInfo@CppParser@CppSharp@@QAEXPBD@Z")]
                internal static extern void SetABI_0(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string s);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, ParserTargetInfo> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, ParserTargetInfo>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static ParserTargetInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new ParserTargetInfo(native.ToPointer(), skipVTables);
            }

            public static ParserTargetInfo __CreateInstance(ParserTargetInfo.__Internal native, bool skipVTables = false)
            {
                return new ParserTargetInfo(native, skipVTables);
            }

            private static void* __CopyValue(ParserTargetInfo.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(176);
                global::CppSharp.Parser.ParserTargetInfo.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                return ret.ToPointer();
            }

            private ParserTargetInfo(ParserTargetInfo.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected ParserTargetInfo(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public ParserTargetInfo()
            {
                __Instance = Marshal.AllocHGlobal(176);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                __Internal.ctor_0((__Instance + __PointerAdjustment));
            }

            public ParserTargetInfo(global::CppSharp.Parser.ParserTargetInfo _0)
            {
                __Instance = Marshal.AllocHGlobal(176);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(_0, null))
                    throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = _0.__Instance;
                __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                global::CppSharp.Parser.ParserTargetInfo __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (disposing)
                    __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public global::CppSharp.Parser.ParserIntType Char16Type
            {
                get
                {
                    return ((__Internal*) __Instance)->Char16Type;
                }

                set
                {
                    ((__Internal*) __Instance)->Char16Type = value;
                }
            }

            public global::CppSharp.Parser.ParserIntType Char32Type
            {
                get
                {
                    return ((__Internal*) __Instance)->Char32Type;
                }

                set
                {
                    ((__Internal*) __Instance)->Char32Type = value;
                }
            }

            public global::CppSharp.Parser.ParserIntType Int64Type
            {
                get
                {
                    return ((__Internal*) __Instance)->Int64Type;
                }

                set
                {
                    ((__Internal*) __Instance)->Int64Type = value;
                }
            }

            public global::CppSharp.Parser.ParserIntType IntMaxType
            {
                get
                {
                    return ((__Internal*) __Instance)->IntMaxType;
                }

                set
                {
                    ((__Internal*) __Instance)->IntMaxType = value;
                }
            }

            public global::CppSharp.Parser.ParserIntType IntPtrType
            {
                get
                {
                    return ((__Internal*) __Instance)->IntPtrType;
                }

                set
                {
                    ((__Internal*) __Instance)->IntPtrType = value;
                }
            }

            public global::CppSharp.Parser.ParserIntType SizeType
            {
                get
                {
                    return ((__Internal*) __Instance)->SizeType;
                }

                set
                {
                    ((__Internal*) __Instance)->SizeType = value;
                }
            }

            public global::CppSharp.Parser.ParserIntType UIntMaxType
            {
                get
                {
                    return ((__Internal*) __Instance)->UIntMaxType;
                }

                set
                {
                    ((__Internal*) __Instance)->UIntMaxType = value;
                }
            }

            public global::CppSharp.Parser.ParserIntType WCharType
            {
                get
                {
                    return ((__Internal*) __Instance)->WCharType;
                }

                set
                {
                    ((__Internal*) __Instance)->WCharType = value;
                }
            }

            public global::CppSharp.Parser.ParserIntType WIntType
            {
                get
                {
                    return ((__Internal*) __Instance)->WIntType;
                }

                set
                {
                    ((__Internal*) __Instance)->WIntType = value;
                }
            }

            public uint BoolAlign
            {
                get
                {
                    return ((__Internal*) __Instance)->BoolAlign;
                }

                set
                {
                    ((__Internal*) __Instance)->BoolAlign = value;
                }
            }

            public uint BoolWidth
            {
                get
                {
                    return ((__Internal*) __Instance)->BoolWidth;
                }

                set
                {
                    ((__Internal*) __Instance)->BoolWidth = value;
                }
            }

            public uint CharAlign
            {
                get
                {
                    return ((__Internal*) __Instance)->CharAlign;
                }

                set
                {
                    ((__Internal*) __Instance)->CharAlign = value;
                }
            }

            public uint CharWidth
            {
                get
                {
                    return ((__Internal*) __Instance)->CharWidth;
                }

                set
                {
                    ((__Internal*) __Instance)->CharWidth = value;
                }
            }

            public uint Char16Align
            {
                get
                {
                    return ((__Internal*) __Instance)->Char16Align;
                }

                set
                {
                    ((__Internal*) __Instance)->Char16Align = value;
                }
            }

            public uint Char16Width
            {
                get
                {
                    return ((__Internal*) __Instance)->Char16Width;
                }

                set
                {
                    ((__Internal*) __Instance)->Char16Width = value;
                }
            }

            public uint Char32Align
            {
                get
                {
                    return ((__Internal*) __Instance)->Char32Align;
                }

                set
                {
                    ((__Internal*) __Instance)->Char32Align = value;
                }
            }

            public uint Char32Width
            {
                get
                {
                    return ((__Internal*) __Instance)->Char32Width;
                }

                set
                {
                    ((__Internal*) __Instance)->Char32Width = value;
                }
            }

            public uint HalfAlign
            {
                get
                {
                    return ((__Internal*) __Instance)->HalfAlign;
                }

                set
                {
                    ((__Internal*) __Instance)->HalfAlign = value;
                }
            }

            public uint HalfWidth
            {
                get
                {
                    return ((__Internal*) __Instance)->HalfWidth;
                }

                set
                {
                    ((__Internal*) __Instance)->HalfWidth = value;
                }
            }

            public uint FloatAlign
            {
                get
                {
                    return ((__Internal*) __Instance)->FloatAlign;
                }

                set
                {
                    ((__Internal*) __Instance)->FloatAlign = value;
                }
            }

            public uint FloatWidth
            {
                get
                {
                    return ((__Internal*) __Instance)->FloatWidth;
                }

                set
                {
                    ((__Internal*) __Instance)->FloatWidth = value;
                }
            }

            public uint DoubleAlign
            {
                get
                {
                    return ((__Internal*) __Instance)->DoubleAlign;
                }

                set
                {
                    ((__Internal*) __Instance)->DoubleAlign = value;
                }
            }

            public uint DoubleWidth
            {
                get
                {
                    return ((__Internal*) __Instance)->DoubleWidth;
                }

                set
                {
                    ((__Internal*) __Instance)->DoubleWidth = value;
                }
            }

            public uint ShortAlign
            {
                get
                {
                    return ((__Internal*) __Instance)->ShortAlign;
                }

                set
                {
                    ((__Internal*) __Instance)->ShortAlign = value;
                }
            }

            public uint ShortWidth
            {
                get
                {
                    return ((__Internal*) __Instance)->ShortWidth;
                }

                set
                {
                    ((__Internal*) __Instance)->ShortWidth = value;
                }
            }

            public uint IntAlign
            {
                get
                {
                    return ((__Internal*) __Instance)->IntAlign;
                }

                set
                {
                    ((__Internal*) __Instance)->IntAlign = value;
                }
            }

            public uint IntWidth
            {
                get
                {
                    return ((__Internal*) __Instance)->IntWidth;
                }

                set
                {
                    ((__Internal*) __Instance)->IntWidth = value;
                }
            }

            public uint IntMaxTWidth
            {
                get
                {
                    return ((__Internal*) __Instance)->IntMaxTWidth;
                }

                set
                {
                    ((__Internal*) __Instance)->IntMaxTWidth = value;
                }
            }

            public uint LongAlign
            {
                get
                {
                    return ((__Internal*) __Instance)->LongAlign;
                }

                set
                {
                    ((__Internal*) __Instance)->LongAlign = value;
                }
            }

            public uint LongWidth
            {
                get
                {
                    return ((__Internal*) __Instance)->LongWidth;
                }

                set
                {
                    ((__Internal*) __Instance)->LongWidth = value;
                }
            }

            public uint LongDoubleAlign
            {
                get
                {
                    return ((__Internal*) __Instance)->LongDoubleAlign;
                }

                set
                {
                    ((__Internal*) __Instance)->LongDoubleAlign = value;
                }
            }

            public uint LongDoubleWidth
            {
                get
                {
                    return ((__Internal*) __Instance)->LongDoubleWidth;
                }

                set
                {
                    ((__Internal*) __Instance)->LongDoubleWidth = value;
                }
            }

            public uint LongLongAlign
            {
                get
                {
                    return ((__Internal*) __Instance)->LongLongAlign;
                }

                set
                {
                    ((__Internal*) __Instance)->LongLongAlign = value;
                }
            }

            public uint LongLongWidth
            {
                get
                {
                    return ((__Internal*) __Instance)->LongLongWidth;
                }

                set
                {
                    ((__Internal*) __Instance)->LongLongWidth = value;
                }
            }

            public uint PointerAlign
            {
                get
                {
                    return ((__Internal*) __Instance)->PointerAlign;
                }

                set
                {
                    ((__Internal*) __Instance)->PointerAlign = value;
                }
            }

            public uint PointerWidth
            {
                get
                {
                    return ((__Internal*) __Instance)->PointerWidth;
                }

                set
                {
                    ((__Internal*) __Instance)->PointerWidth = value;
                }
            }

            public uint WCharAlign
            {
                get
                {
                    return ((__Internal*) __Instance)->WCharAlign;
                }

                set
                {
                    ((__Internal*) __Instance)->WCharAlign = value;
                }
            }

            public uint WCharWidth
            {
                get
                {
                    return ((__Internal*) __Instance)->WCharWidth;
                }

                set
                {
                    ((__Internal*) __Instance)->WCharWidth = value;
                }
            }

            public string ABI
            {
                get
                {
                    var __ret = __Internal.ABI_0((__Instance + __PointerAdjustment));
                    return Marshal.PtrToStringAnsi(__ret);
                }

                set
                {
                    var __arg0 = value;
                    __Internal.SetABI_0((__Instance + __PointerAdjustment), __arg0);
                }
            }
        }
    }
}

namespace CppSharp
{
    namespace Parser
    {
        public enum LanguageVersion
        {
            /// <summary>The C programming language.</summary>
            C = 0,
            /// <summary>The C programming language (GNU version).</summary>
            GNUC = 1,
            /// <summary>The C++ programming language year 1998; supports deprecated constructs.</summary>
            CPlusPlus98 = 2,
            /// <summary>The C++ programming language year 1998; supports deprecated constructs (GNU version).</summary>
            GNUPlusPlus98 = 3,
            /// <summary>The C++ programming language year 2011.</summary>
            CPlusPlus11 = 4,
            /// <summary>The C++ programming language year 2011 (GNU version).</summary>
            GNUPlusPlus11 = 5
        }

        public enum ParserDiagnosticLevel
        {
            Ignored = 0,
            Note = 1,
            Warning = 2,
            Error = 3,
            Fatal = 4
        }

        public enum ParserResultKind
        {
            Success = 0,
            Error = 1,
            FileNotFound = 2
        }

        public enum SourceLocationKind
        {
            Invalid = 0,
            Builtin = 1,
            CommandLine = 2,
            System = 3,
            User = 4
        }

        public unsafe partial class CppParserOptions : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 156)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::Std.Vector.__Internal Arguments;

                [FieldOffset(12)]
                public global::Std.BasicString.__Internal LibraryFile;

                [FieldOffset(36)]
                internal global::Std.Vector.__Internal SourceFiles;

                [FieldOffset(48)]
                internal global::Std.Vector.__Internal IncludeDirs;

                [FieldOffset(60)]
                internal global::Std.Vector.__Internal SystemIncludeDirs;

                [FieldOffset(72)]
                internal global::Std.Vector.__Internal Defines;

                [FieldOffset(84)]
                internal global::Std.Vector.__Internal Undefines;

                [FieldOffset(96)]
                internal global::Std.Vector.__Internal LibraryDirs;

                [FieldOffset(108)]
                public global::System.IntPtr ASTContext;

                [FieldOffset(112)]
                public int ToolSetToUse;

                [FieldOffset(116)]
                public global::Std.BasicString.__Internal TargetTriple;

                [FieldOffset(140)]
                public global::CppSharp.Parser.AST.CppAbi Abi;

                [FieldOffset(144)]
                public byte NoStandardIncludes;

                [FieldOffset(145)]
                public byte NoBuiltinIncludes;

                [FieldOffset(146)]
                public byte MicrosoftMode;

                [FieldOffset(147)]
                public byte Verbose;

                [FieldOffset(148)]
                public global::CppSharp.Parser.LanguageVersion LanguageVersion;

                [FieldOffset(152)]
                public global::System.IntPtr TargetInfo;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0CppParserOptions@CppParser@CppSharp@@QAE@XZ")]
                internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0CppParserOptions@CppParser@CppSharp@@QAE@ABU012@@Z")]
                internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??1CppParserOptions@CppParser@CppSharp@@QAE@XZ")]
                internal static extern void dtor_0(global::System.IntPtr instance, int delete);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getArguments@CppParserOptions@CppParser@CppSharp@@QAEPBDI@Z")]
                internal static extern global::System.IntPtr GetArguments_0(global::System.IntPtr instance, uint i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?addArguments@CppParserOptions@CppParser@CppSharp@@QAEXPBD@Z")]
                internal static extern void AddArguments_0(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string s);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?clearArguments@CppParserOptions@CppParser@CppSharp@@QAEXXZ")]
                internal static extern void ClearArguments_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getSourceFiles@CppParserOptions@CppParser@CppSharp@@QAEPBDI@Z")]
                internal static extern global::System.IntPtr GetSourceFiles_0(global::System.IntPtr instance, uint i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?addSourceFiles@CppParserOptions@CppParser@CppSharp@@QAEXPBD@Z")]
                internal static extern void AddSourceFiles_0(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string s);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?clearSourceFiles@CppParserOptions@CppParser@CppSharp@@QAEXXZ")]
                internal static extern void ClearSourceFiles_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getIncludeDirs@CppParserOptions@CppParser@CppSharp@@QAEPBDI@Z")]
                internal static extern global::System.IntPtr GetIncludeDirs_0(global::System.IntPtr instance, uint i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?addIncludeDirs@CppParserOptions@CppParser@CppSharp@@QAEXPBD@Z")]
                internal static extern void AddIncludeDirs_0(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string s);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?clearIncludeDirs@CppParserOptions@CppParser@CppSharp@@QAEXXZ")]
                internal static extern void ClearIncludeDirs_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getSystemIncludeDirs@CppParserOptions@CppParser@CppSharp@@QAEPBDI@Z")]
                internal static extern global::System.IntPtr GetSystemIncludeDirs_0(global::System.IntPtr instance, uint i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?addSystemIncludeDirs@CppParserOptions@CppParser@CppSharp@@QAEXPBD@Z")]
                internal static extern void AddSystemIncludeDirs_0(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string s);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?clearSystemIncludeDirs@CppParserOptions@CppParser@CppSharp@@QAEXXZ")]
                internal static extern void ClearSystemIncludeDirs_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getDefines@CppParserOptions@CppParser@CppSharp@@QAEPBDI@Z")]
                internal static extern global::System.IntPtr GetDefines_0(global::System.IntPtr instance, uint i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?addDefines@CppParserOptions@CppParser@CppSharp@@QAEXPBD@Z")]
                internal static extern void AddDefines_0(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string s);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?clearDefines@CppParserOptions@CppParser@CppSharp@@QAEXXZ")]
                internal static extern void ClearDefines_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getUndefines@CppParserOptions@CppParser@CppSharp@@QAEPBDI@Z")]
                internal static extern global::System.IntPtr GetUndefines_0(global::System.IntPtr instance, uint i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?addUndefines@CppParserOptions@CppParser@CppSharp@@QAEXPBD@Z")]
                internal static extern void AddUndefines_0(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string s);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?clearUndefines@CppParserOptions@CppParser@CppSharp@@QAEXXZ")]
                internal static extern void ClearUndefines_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getLibraryDirs@CppParserOptions@CppParser@CppSharp@@QAEPBDI@Z")]
                internal static extern global::System.IntPtr GetLibraryDirs_0(global::System.IntPtr instance, uint i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?addLibraryDirs@CppParserOptions@CppParser@CppSharp@@QAEXPBD@Z")]
                internal static extern void AddLibraryDirs_0(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string s);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?clearLibraryDirs@CppParserOptions@CppParser@CppSharp@@QAEXXZ")]
                internal static extern void ClearLibraryDirs_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getLibraryFile@CppParserOptions@CppParser@CppSharp@@QAEPBDXZ")]
                internal static extern global::System.IntPtr LibraryFile_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?setLibraryFile@CppParserOptions@CppParser@CppSharp@@QAEXPBD@Z")]
                internal static extern void SetLibraryFile_0(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string s);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getTargetTriple@CppParserOptions@CppParser@CppSharp@@QAEPBDXZ")]
                internal static extern global::System.IntPtr TargetTriple_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?setTargetTriple@CppParserOptions@CppParser@CppSharp@@QAEXPBD@Z")]
                internal static extern void SetTargetTriple_0(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string s);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getArgumentsCount@CppParserOptions@CppParser@CppSharp@@QAEIXZ")]
                internal static extern uint GetArgumentsCount_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getSourceFilesCount@CppParserOptions@CppParser@CppSharp@@QAEIXZ")]
                internal static extern uint GetSourceFilesCount_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getIncludeDirsCount@CppParserOptions@CppParser@CppSharp@@QAEIXZ")]
                internal static extern uint GetIncludeDirsCount_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getSystemIncludeDirsCount@CppParserOptions@CppParser@CppSharp@@QAEIXZ")]
                internal static extern uint GetSystemIncludeDirsCount_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getDefinesCount@CppParserOptions@CppParser@CppSharp@@QAEIXZ")]
                internal static extern uint GetDefinesCount_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getUndefinesCount@CppParserOptions@CppParser@CppSharp@@QAEIXZ")]
                internal static extern uint GetUndefinesCount_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getLibraryDirsCount@CppParserOptions@CppParser@CppSharp@@QAEIXZ")]
                internal static extern uint GetLibraryDirsCount_0(global::System.IntPtr instance);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, CppParserOptions> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, CppParserOptions>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static CppParserOptions __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new CppParserOptions(native.ToPointer(), skipVTables);
            }

            public static CppParserOptions __CreateInstance(CppParserOptions.__Internal native, bool skipVTables = false)
            {
                return new CppParserOptions(native, skipVTables);
            }

            private static void* __CopyValue(CppParserOptions.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(156);
                global::CppSharp.Parser.CppParserOptions.__Internal.cctor_2(ret, new global::System.IntPtr(&native));
                return ret.ToPointer();
            }

            private CppParserOptions(CppParserOptions.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected CppParserOptions(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public CppParserOptions()
            {
                __Instance = Marshal.AllocHGlobal(156);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                __Internal.ctor_0((__Instance + __PointerAdjustment));
            }

            public CppParserOptions(global::CppSharp.Parser.CppParserOptions _0)
            {
                __Instance = Marshal.AllocHGlobal(156);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(_0, null))
                    throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = _0.__Instance;
                __Internal.cctor_2((__Instance + __PointerAdjustment), __arg0);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                global::CppSharp.Parser.CppParserOptions __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (disposing)
                    __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public string GetArguments(uint i)
            {
                var __ret = __Internal.GetArguments_0((__Instance + __PointerAdjustment), i);
                return Marshal.PtrToStringAnsi(__ret);
            }

            public void AddArguments(string s)
            {
                var __arg0 = s;
                __Internal.AddArguments_0((__Instance + __PointerAdjustment), __arg0);
            }

            public void ClearArguments()
            {
                __Internal.ClearArguments_0((__Instance + __PointerAdjustment));
            }

            public string GetSourceFiles(uint i)
            {
                var __ret = __Internal.GetSourceFiles_0((__Instance + __PointerAdjustment), i);
                return Marshal.PtrToStringAnsi(__ret);
            }

            public void AddSourceFiles(string s)
            {
                var __arg0 = s;
                __Internal.AddSourceFiles_0((__Instance + __PointerAdjustment), __arg0);
            }

            public void ClearSourceFiles()
            {
                __Internal.ClearSourceFiles_0((__Instance + __PointerAdjustment));
            }

            public string GetIncludeDirs(uint i)
            {
                var __ret = __Internal.GetIncludeDirs_0((__Instance + __PointerAdjustment), i);
                return Marshal.PtrToStringAnsi(__ret);
            }

            public void AddIncludeDirs(string s)
            {
                var __arg0 = s;
                __Internal.AddIncludeDirs_0((__Instance + __PointerAdjustment), __arg0);
            }

            public void ClearIncludeDirs()
            {
                __Internal.ClearIncludeDirs_0((__Instance + __PointerAdjustment));
            }

            public string GetSystemIncludeDirs(uint i)
            {
                var __ret = __Internal.GetSystemIncludeDirs_0((__Instance + __PointerAdjustment), i);
                return Marshal.PtrToStringAnsi(__ret);
            }

            public void AddSystemIncludeDirs(string s)
            {
                var __arg0 = s;
                __Internal.AddSystemIncludeDirs_0((__Instance + __PointerAdjustment), __arg0);
            }

            public void ClearSystemIncludeDirs()
            {
                __Internal.ClearSystemIncludeDirs_0((__Instance + __PointerAdjustment));
            }

            public string GetDefines(uint i)
            {
                var __ret = __Internal.GetDefines_0((__Instance + __PointerAdjustment), i);
                return Marshal.PtrToStringAnsi(__ret);
            }

            public void AddDefines(string s)
            {
                var __arg0 = s;
                __Internal.AddDefines_0((__Instance + __PointerAdjustment), __arg0);
            }

            public void ClearDefines()
            {
                __Internal.ClearDefines_0((__Instance + __PointerAdjustment));
            }

            public string GetUndefines(uint i)
            {
                var __ret = __Internal.GetUndefines_0((__Instance + __PointerAdjustment), i);
                return Marshal.PtrToStringAnsi(__ret);
            }

            public void AddUndefines(string s)
            {
                var __arg0 = s;
                __Internal.AddUndefines_0((__Instance + __PointerAdjustment), __arg0);
            }

            public void ClearUndefines()
            {
                __Internal.ClearUndefines_0((__Instance + __PointerAdjustment));
            }

            public string GetLibraryDirs(uint i)
            {
                var __ret = __Internal.GetLibraryDirs_0((__Instance + __PointerAdjustment), i);
                return Marshal.PtrToStringAnsi(__ret);
            }

            public void AddLibraryDirs(string s)
            {
                var __arg0 = s;
                __Internal.AddLibraryDirs_0((__Instance + __PointerAdjustment), __arg0);
            }

            public void ClearLibraryDirs()
            {
                __Internal.ClearLibraryDirs_0((__Instance + __PointerAdjustment));
            }

            public global::CppSharp.Parser.AST.ASTContext ASTContext
            {
                get
                {
                    global::CppSharp.Parser.AST.ASTContext __result0;
                    if (((__Internal*) __Instance)->ASTContext == IntPtr.Zero) __result0 = null;
                    else if (global::CppSharp.Parser.AST.ASTContext.NativeToManagedMap.ContainsKey(((__Internal*) __Instance)->ASTContext))
                        __result0 = (global::CppSharp.Parser.AST.ASTContext) global::CppSharp.Parser.AST.ASTContext.NativeToManagedMap[((__Internal*) __Instance)->ASTContext];
                    else __result0 = global::CppSharp.Parser.AST.ASTContext.__CreateInstance(((__Internal*) __Instance)->ASTContext);
                    return __result0;
                }

                set
                {
                    ((__Internal*) __Instance)->ASTContext = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public int ToolSetToUse
            {
                get
                {
                    return ((__Internal*) __Instance)->ToolSetToUse;
                }

                set
                {
                    ((__Internal*) __Instance)->ToolSetToUse = value;
                }
            }

            public global::CppSharp.Parser.AST.CppAbi Abi
            {
                get
                {
                    return ((__Internal*) __Instance)->Abi;
                }

                set
                {
                    ((__Internal*) __Instance)->Abi = value;
                }
            }

            public bool NoStandardIncludes
            {
                get
                {
                    return ((__Internal*) __Instance)->NoStandardIncludes != 0;
                }

                set
                {
                    ((__Internal*) __Instance)->NoStandardIncludes = (byte) (value ? 1 : 0);
                }
            }

            public bool NoBuiltinIncludes
            {
                get
                {
                    return ((__Internal*) __Instance)->NoBuiltinIncludes != 0;
                }

                set
                {
                    ((__Internal*) __Instance)->NoBuiltinIncludes = (byte) (value ? 1 : 0);
                }
            }

            public bool MicrosoftMode
            {
                get
                {
                    return ((__Internal*) __Instance)->MicrosoftMode != 0;
                }

                set
                {
                    ((__Internal*) __Instance)->MicrosoftMode = (byte) (value ? 1 : 0);
                }
            }

            public bool Verbose
            {
                get
                {
                    return ((__Internal*) __Instance)->Verbose != 0;
                }

                set
                {
                    ((__Internal*) __Instance)->Verbose = (byte) (value ? 1 : 0);
                }
            }

            public global::CppSharp.Parser.LanguageVersion LanguageVersion
            {
                get
                {
                    return ((__Internal*) __Instance)->LanguageVersion;
                }

                set
                {
                    ((__Internal*) __Instance)->LanguageVersion = value;
                }
            }

            public global::CppSharp.Parser.ParserTargetInfo TargetInfo
            {
                get
                {
                    global::CppSharp.Parser.ParserTargetInfo __result0;
                    if (((__Internal*) __Instance)->TargetInfo == IntPtr.Zero) __result0 = null;
                    else if (global::CppSharp.Parser.ParserTargetInfo.NativeToManagedMap.ContainsKey(((__Internal*) __Instance)->TargetInfo))
                        __result0 = (global::CppSharp.Parser.ParserTargetInfo) global::CppSharp.Parser.ParserTargetInfo.NativeToManagedMap[((__Internal*) __Instance)->TargetInfo];
                    else __result0 = global::CppSharp.Parser.ParserTargetInfo.__CreateInstance(((__Internal*) __Instance)->TargetInfo);
                    return __result0;
                }

                set
                {
                    ((__Internal*) __Instance)->TargetInfo = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public string LibraryFile
            {
                get
                {
                    var __ret = __Internal.LibraryFile_0((__Instance + __PointerAdjustment));
                    return Marshal.PtrToStringAnsi(__ret);
                }

                set
                {
                    var __arg0 = value;
                    __Internal.SetLibraryFile_0((__Instance + __PointerAdjustment), __arg0);
                }
            }

            public string TargetTriple
            {
                get
                {
                    var __ret = __Internal.TargetTriple_0((__Instance + __PointerAdjustment));
                    return Marshal.PtrToStringAnsi(__ret);
                }

                set
                {
                    var __arg0 = value;
                    __Internal.SetTargetTriple_0((__Instance + __PointerAdjustment), __arg0);
                }
            }

            public uint ArgumentsCount
            {
                get
                {
                    var __ret = __Internal.GetArgumentsCount_0((__Instance + __PointerAdjustment));
                    return __ret;
                }
            }

            public uint SourceFilesCount
            {
                get
                {
                    var __ret = __Internal.GetSourceFilesCount_0((__Instance + __PointerAdjustment));
                    return __ret;
                }
            }

            public uint IncludeDirsCount
            {
                get
                {
                    var __ret = __Internal.GetIncludeDirsCount_0((__Instance + __PointerAdjustment));
                    return __ret;
                }
            }

            public uint SystemIncludeDirsCount
            {
                get
                {
                    var __ret = __Internal.GetSystemIncludeDirsCount_0((__Instance + __PointerAdjustment));
                    return __ret;
                }
            }

            public uint DefinesCount
            {
                get
                {
                    var __ret = __Internal.GetDefinesCount_0((__Instance + __PointerAdjustment));
                    return __ret;
                }
            }

            public uint UndefinesCount
            {
                get
                {
                    var __ret = __Internal.GetUndefinesCount_0((__Instance + __PointerAdjustment));
                    return __ret;
                }
            }

            public uint LibraryDirsCount
            {
                get
                {
                    var __ret = __Internal.GetLibraryDirsCount_0((__Instance + __PointerAdjustment));
                    return __ret;
                }
            }
        }

        public unsafe partial class ParserDiagnostic : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 60)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                public global::Std.BasicString.__Internal FileName;

                [FieldOffset(24)]
                public global::Std.BasicString.__Internal Message;

                [FieldOffset(48)]
                public global::CppSharp.Parser.ParserDiagnosticLevel Level;

                [FieldOffset(52)]
                public int LineNumber;

                [FieldOffset(56)]
                public int ColumnNumber;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0ParserDiagnostic@CppParser@CppSharp@@QAE@XZ")]
                internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0ParserDiagnostic@CppParser@CppSharp@@QAE@ABU012@@Z")]
                internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??1ParserDiagnostic@CppParser@CppSharp@@QAE@XZ")]
                internal static extern void dtor_0(global::System.IntPtr instance, int delete);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getFileName@ParserDiagnostic@CppParser@CppSharp@@QAEPBDXZ")]
                internal static extern global::System.IntPtr FileName_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?setFileName@ParserDiagnostic@CppParser@CppSharp@@QAEXPBD@Z")]
                internal static extern void SetFileName_0(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string s);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getMessage@ParserDiagnostic@CppParser@CppSharp@@QAEPBDXZ")]
                internal static extern global::System.IntPtr Message_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?setMessage@ParserDiagnostic@CppParser@CppSharp@@QAEXPBD@Z")]
                internal static extern void SetMessage_0(global::System.IntPtr instance, [MarshalAs(UnmanagedType.LPStr)] string s);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, ParserDiagnostic> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, ParserDiagnostic>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static ParserDiagnostic __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new ParserDiagnostic(native.ToPointer(), skipVTables);
            }

            public static ParserDiagnostic __CreateInstance(ParserDiagnostic.__Internal native, bool skipVTables = false)
            {
                return new ParserDiagnostic(native, skipVTables);
            }

            private static void* __CopyValue(ParserDiagnostic.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(60);
                global::CppSharp.Parser.ParserDiagnostic.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                return ret.ToPointer();
            }

            private ParserDiagnostic(ParserDiagnostic.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected ParserDiagnostic(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public ParserDiagnostic()
            {
                __Instance = Marshal.AllocHGlobal(60);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                __Internal.ctor_0((__Instance + __PointerAdjustment));
            }

            public ParserDiagnostic(global::CppSharp.Parser.ParserDiagnostic _0)
            {
                __Instance = Marshal.AllocHGlobal(60);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(_0, null))
                    throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = _0.__Instance;
                __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                global::CppSharp.Parser.ParserDiagnostic __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (disposing)
                    __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public global::CppSharp.Parser.ParserDiagnosticLevel Level
            {
                get
                {
                    return ((__Internal*) __Instance)->Level;
                }

                set
                {
                    ((__Internal*) __Instance)->Level = value;
                }
            }

            public int LineNumber
            {
                get
                {
                    return ((__Internal*) __Instance)->LineNumber;
                }

                set
                {
                    ((__Internal*) __Instance)->LineNumber = value;
                }
            }

            public int ColumnNumber
            {
                get
                {
                    return ((__Internal*) __Instance)->ColumnNumber;
                }

                set
                {
                    ((__Internal*) __Instance)->ColumnNumber = value;
                }
            }

            public string FileName
            {
                get
                {
                    var __ret = __Internal.FileName_0((__Instance + __PointerAdjustment));
                    return Marshal.PtrToStringAnsi(__ret);
                }

                set
                {
                    var __arg0 = value;
                    __Internal.SetFileName_0((__Instance + __PointerAdjustment), __arg0);
                }
            }

            public string Message
            {
                get
                {
                    var __ret = __Internal.Message_0((__Instance + __PointerAdjustment));
                    return Marshal.PtrToStringAnsi(__ret);
                }

                set
                {
                    var __arg0 = value;
                    __Internal.SetMessage_0((__Instance + __PointerAdjustment), __arg0);
                }
            }
        }

        public unsafe partial class ParserResult : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 28)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                public global::CppSharp.Parser.ParserResultKind Kind;

                [FieldOffset(4)]
                internal global::Std.Vector.__Internal Diagnostics;

                [FieldOffset(16)]
                public global::System.IntPtr ASTContext;

                [FieldOffset(20)]
                public global::System.IntPtr Library;

                [FieldOffset(24)]
                public global::System.IntPtr CodeParser;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0ParserResult@CppParser@CppSharp@@QAE@XZ")]
                internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0ParserResult@CppParser@CppSharp@@QAE@ABU012@@Z")]
                internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??1ParserResult@CppParser@CppSharp@@QAE@XZ")]
                internal static extern void dtor_0(global::System.IntPtr instance, int delete);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getDiagnostics@ParserResult@CppParser@CppSharp@@QAE?AUParserDiagnostic@23@I@Z")]
                internal static extern void GetDiagnostics_0(global::System.IntPtr instance, global::System.IntPtr @return, uint i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?addDiagnostics@ParserResult@CppParser@CppSharp@@QAEXAAUParserDiagnostic@23@@Z")]
                internal static extern void AddDiagnostics_0(global::System.IntPtr instance, global::System.IntPtr s);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?clearDiagnostics@ParserResult@CppParser@CppSharp@@QAEXXZ")]
                internal static extern void ClearDiagnostics_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="?getDiagnosticsCount@ParserResult@CppParser@CppSharp@@QAEIXZ")]
                internal static extern uint GetDiagnosticsCount_0(global::System.IntPtr instance);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, ParserResult> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, ParserResult>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static ParserResult __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new ParserResult(native.ToPointer(), skipVTables);
            }

            public static ParserResult __CreateInstance(ParserResult.__Internal native, bool skipVTables = false)
            {
                return new ParserResult(native, skipVTables);
            }

            private static void* __CopyValue(ParserResult.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(28);
                global::CppSharp.Parser.ParserResult.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                return ret.ToPointer();
            }

            private ParserResult(ParserResult.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected ParserResult(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public ParserResult()
            {
                __Instance = Marshal.AllocHGlobal(28);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                __Internal.ctor_0((__Instance + __PointerAdjustment));
            }

            public ParserResult(global::CppSharp.Parser.ParserResult _0)
            {
                __Instance = Marshal.AllocHGlobal(28);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(_0, null))
                    throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = _0.__Instance;
                __Internal.cctor_1((__Instance + __PointerAdjustment), __arg0);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                global::CppSharp.Parser.ParserResult __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (disposing)
                    __Internal.dtor_0((__Instance + __PointerAdjustment), 0);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public global::CppSharp.Parser.ParserDiagnostic GetDiagnostics(uint i)
            {
                var __ret = new global::CppSharp.Parser.ParserDiagnostic.__Internal();
                __Internal.GetDiagnostics_0((__Instance + __PointerAdjustment), new IntPtr(&__ret), i);
                return global::CppSharp.Parser.ParserDiagnostic.__CreateInstance(__ret);
            }

            public void AddDiagnostics(global::CppSharp.Parser.ParserDiagnostic s)
            {
                if (ReferenceEquals(s, null))
                    throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = s.__Instance;
                __Internal.AddDiagnostics_0((__Instance + __PointerAdjustment), __arg0);
            }

            public void ClearDiagnostics()
            {
                __Internal.ClearDiagnostics_0((__Instance + __PointerAdjustment));
            }

            public global::CppSharp.Parser.ParserResultKind Kind
            {
                get
                {
                    return ((__Internal*) __Instance)->Kind;
                }

                set
                {
                    ((__Internal*) __Instance)->Kind = value;
                }
            }

            public global::CppSharp.Parser.AST.ASTContext ASTContext
            {
                get
                {
                    global::CppSharp.Parser.AST.ASTContext __result0;
                    if (((__Internal*) __Instance)->ASTContext == IntPtr.Zero) __result0 = null;
                    else if (global::CppSharp.Parser.AST.ASTContext.NativeToManagedMap.ContainsKey(((__Internal*) __Instance)->ASTContext))
                        __result0 = (global::CppSharp.Parser.AST.ASTContext) global::CppSharp.Parser.AST.ASTContext.NativeToManagedMap[((__Internal*) __Instance)->ASTContext];
                    else __result0 = global::CppSharp.Parser.AST.ASTContext.__CreateInstance(((__Internal*) __Instance)->ASTContext);
                    return __result0;
                }

                set
                {
                    ((__Internal*) __Instance)->ASTContext = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public global::CppSharp.Parser.AST.NativeLibrary Library
            {
                get
                {
                    global::CppSharp.Parser.AST.NativeLibrary __result0;
                    if (((__Internal*) __Instance)->Library == IntPtr.Zero) __result0 = null;
                    else if (global::CppSharp.Parser.AST.NativeLibrary.NativeToManagedMap.ContainsKey(((__Internal*) __Instance)->Library))
                        __result0 = (global::CppSharp.Parser.AST.NativeLibrary) global::CppSharp.Parser.AST.NativeLibrary.NativeToManagedMap[((__Internal*) __Instance)->Library];
                    else __result0 = global::CppSharp.Parser.AST.NativeLibrary.__CreateInstance(((__Internal*) __Instance)->Library);
                    return __result0;
                }

                set
                {
                    ((__Internal*) __Instance)->Library = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public uint DiagnosticsCount
            {
                get
                {
                    var __ret = __Internal.GetDiagnosticsCount_0((__Instance + __PointerAdjustment));
                    return __ret;
                }
            }
        }

        public unsafe partial class ClangParser : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 0)]
            public partial struct __Internal
            {
                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                    EntryPoint="??0ClangParser@CppParser@CppSharp@@QAE@ABV012@@Z")]
                internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?ParseHeader@ClangParser@CppParser@CppSharp@@SAPAUParserResult@23@PAUCppParserOptions@23@@Z")]
                internal static extern global::System.IntPtr ParseHeader_0(global::System.IntPtr Opts);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?ParseLibrary@ClangParser@CppParser@CppSharp@@SAPAUParserResult@23@PAUCppParserOptions@23@@Z")]
                internal static extern global::System.IntPtr ParseLibrary_0(global::System.IntPtr Opts);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="?GetTargetInfo@ClangParser@CppParser@CppSharp@@SAPAUParserTargetInfo@23@PAUCppParserOptions@23@@Z")]
                internal static extern global::System.IntPtr GetTargetInfo_0(global::System.IntPtr Opts);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, ClangParser> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, ClangParser>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static ClangParser __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new ClangParser(native.ToPointer(), skipVTables);
            }

            public static ClangParser __CreateInstance(ClangParser.__Internal native, bool skipVTables = false)
            {
                return new ClangParser(native, skipVTables);
            }

            private static void* __CopyValue(ClangParser.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(0);
                *(ClangParser.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private ClangParser(ClangParser.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected ClangParser(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public ClangParser()
            {
                __Instance = Marshal.AllocHGlobal(0);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            public ClangParser(global::CppSharp.Parser.ClangParser _0)
            {
                __Instance = Marshal.AllocHGlobal(0);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((ClangParser.__Internal*) __Instance) = *((ClangParser.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                global::CppSharp.Parser.ClangParser __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public static global::CppSharp.Parser.ParserResult ParseHeader(global::CppSharp.Parser.CppParserOptions Opts)
            {
                var __arg0 = ReferenceEquals(Opts, null) ? global::System.IntPtr.Zero : Opts.__Instance;
                var __ret = __Internal.ParseHeader_0(__arg0);
                global::CppSharp.Parser.ParserResult __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::CppSharp.Parser.ParserResult.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::CppSharp.Parser.ParserResult) global::CppSharp.Parser.ParserResult.NativeToManagedMap[__ret];
                else __result0 = global::CppSharp.Parser.ParserResult.__CreateInstance(__ret);
                return __result0;
            }

            public static global::CppSharp.Parser.ParserResult ParseLibrary(global::CppSharp.Parser.CppParserOptions Opts)
            {
                var __arg0 = ReferenceEquals(Opts, null) ? global::System.IntPtr.Zero : Opts.__Instance;
                var __ret = __Internal.ParseLibrary_0(__arg0);
                global::CppSharp.Parser.ParserResult __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::CppSharp.Parser.ParserResult.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::CppSharp.Parser.ParserResult) global::CppSharp.Parser.ParserResult.NativeToManagedMap[__ret];
                else __result0 = global::CppSharp.Parser.ParserResult.__CreateInstance(__ret);
                return __result0;
            }

            public static global::CppSharp.Parser.ParserTargetInfo GetTargetInfo(global::CppSharp.Parser.CppParserOptions Opts)
            {
                var __arg0 = ReferenceEquals(Opts, null) ? global::System.IntPtr.Zero : Opts.__Instance;
                var __ret = __Internal.GetTargetInfo_0(__arg0);
                global::CppSharp.Parser.ParserTargetInfo __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::CppSharp.Parser.ParserTargetInfo.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::CppSharp.Parser.ParserTargetInfo) global::CppSharp.Parser.ParserTargetInfo.NativeToManagedMap[__ret];
                else __result0 = global::CppSharp.Parser.ParserTargetInfo.__CreateInstance(__ret);
                return __result0;
            }
        }
    }
}
