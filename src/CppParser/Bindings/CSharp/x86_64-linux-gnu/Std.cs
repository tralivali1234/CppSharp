//----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace Std
{
}

namespace GnuCxx
{
}

namespace Std
{
    namespace ExceptionPtr
    {
        public unsafe partial class ExceptionPtr
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr _M_exception_object;
            }
        }
    }
}

namespace Std
{
    public unsafe partial class Allocator : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public unsafe partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("Std-templates", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNSaIcEC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Std-templates", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNSaIcED2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Allocator> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Allocator>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static Allocator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new Allocator(native.ToPointer(), skipVTables);
        }

        public static Allocator __CreateInstance(Allocator.__Internal native, bool skipVTables = false)
        {
            return new Allocator(native, skipVTables);
        }

        private static void* __CopyValue(Allocator.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(0);
            *(Allocator.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Allocator(Allocator.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Allocator(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public Allocator()
        {
            __Instance = Marshal.AllocHGlobal(0);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            global::Std.Allocator __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }
    }


    public unsafe partial class Rebind
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }
    }
}

namespace Std
{
    namespace VectorBase
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::Std.VectorBase.VectorImpl.__Internal _M_impl;
        }


        public unsafe partial class VectorImpl
        {
            [StructLayout(LayoutKind.Explicit, Size = 0)]
            public partial struct __Internal
            {
            }
        }
    }

    namespace Vector
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::Std.VectorBase.VectorImpl.__Internal _M_impl;
        }
    }
}

namespace Std
{
    public unsafe partial class BitIterator
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr _M_p;

            [FieldOffset(8)]
            public uint _M_offset;
        }
    }
}

namespace Std
{
    namespace Less
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public unsafe partial struct __Internal
        {
        }
    }
}

namespace Std
{
    public enum RbTreeColor : uint
    {
        _S_red = 0,
        _S_black = 1
    }

    namespace RbTree
    {
        [StructLayout(LayoutKind.Explicit, Size = 48)]
        public unsafe partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::Std.RbTree.RbTreeImpl.__Internal _M_impl;
        }


        public unsafe partial class ReuseOrAllocNode
        {
            [StructLayout(LayoutKind.Explicit, Size = 0)]
            public partial struct __Internal
            {
            }

        }

        public unsafe partial class AllocNode
        {
            [StructLayout(LayoutKind.Explicit, Size = 0)]
            public partial struct __Internal
            {
            }

        }

        public unsafe partial class RbTreeImpl
        {
            [StructLayout(LayoutKind.Explicit, Size = 0)]
            public partial struct __Internal
            {
            }
        }
    }

    public unsafe partial class RbTreeNodeBase
    {
        [StructLayout(LayoutKind.Explicit, Size = 32)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            public global::Std.RbTreeColor _M_color;

            [FieldOffset(8)]
            public global::System.IntPtr _M_parent;

            [FieldOffset(16)]
            public global::System.IntPtr _M_left;

            [FieldOffset(24)]
            public global::System.IntPtr _M_right;
        }
    }
}

namespace GnuCxx
{
}

namespace Std
{
    namespace Map
    {
        [StructLayout(LayoutKind.Explicit, Size = 48)]
        public unsafe partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::Std.RbTree.__Internal _M_t;
        }


        public unsafe partial class ValueCompare
        {
            [StructLayout(LayoutKind.Explicit, Size = 0)]
            public partial struct __Internal
            {
            }
        }
    }
}

namespace Std
{
}

namespace Std
{
}

public unsafe partial class MbstateT
{
    [StructLayout(LayoutKind.Explicit, Size = 8)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        public int __count;

        [FieldOffset(4)]
        internal global::MbstateT._.__Internal __value;
    }

    public unsafe partial struct _
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            public uint __wch;

            [FieldOffset(0)]
            public fixed sbyte __wchb[4];

            [FieldOffset(1)]
            public sbyte __dummy___wchb_1;

            [FieldOffset(2)]
            public sbyte __dummy___wchb_2;

            [FieldOffset(3)]
            public sbyte __dummy___wchb_3;
        }
    }
}

public unsafe partial class Timespec
{
    [StructLayout(LayoutKind.Explicit, Size = 16)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        public long tv_sec;

        [FieldOffset(8)]
        public long tv_nsec;
    }
}

public unsafe partial class Timeval
{
    [StructLayout(LayoutKind.Explicit, Size = 16)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        public long tv_sec;

        [FieldOffset(8)]
        public long tv_usec;
    }
}

public unsafe partial class PthreadInternalList
{
    [StructLayout(LayoutKind.Explicit, Size = 16)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        public global::System.IntPtr __prev;

        [FieldOffset(8)]
        public global::System.IntPtr __next;
    }
}

public unsafe partial struct PthreadMutexT
{
    [StructLayout(LayoutKind.Explicit, Size = 40)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::PthreadMutexT.PthreadMutexS.__Internal __data;

        [FieldOffset(0)]
        public fixed sbyte __size[40];

        [FieldOffset(1)]
        public sbyte __dummy___size_1;

        [FieldOffset(2)]
        public sbyte __dummy___size_2;

        [FieldOffset(3)]
        public sbyte __dummy___size_3;

        [FieldOffset(4)]
        public sbyte __dummy___size_4;

        [FieldOffset(5)]
        public sbyte __dummy___size_5;

        [FieldOffset(6)]
        public sbyte __dummy___size_6;

        [FieldOffset(7)]
        public sbyte __dummy___size_7;

        [FieldOffset(8)]
        public sbyte __dummy___size_8;

        [FieldOffset(9)]
        public sbyte __dummy___size_9;

        [FieldOffset(10)]
        public sbyte __dummy___size_10;

        [FieldOffset(11)]
        public sbyte __dummy___size_11;

        [FieldOffset(12)]
        public sbyte __dummy___size_12;

        [FieldOffset(13)]
        public sbyte __dummy___size_13;

        [FieldOffset(14)]
        public sbyte __dummy___size_14;

        [FieldOffset(15)]
        public sbyte __dummy___size_15;

        [FieldOffset(16)]
        public sbyte __dummy___size_16;

        [FieldOffset(17)]
        public sbyte __dummy___size_17;

        [FieldOffset(18)]
        public sbyte __dummy___size_18;

        [FieldOffset(19)]
        public sbyte __dummy___size_19;

        [FieldOffset(20)]
        public sbyte __dummy___size_20;

        [FieldOffset(21)]
        public sbyte __dummy___size_21;

        [FieldOffset(22)]
        public sbyte __dummy___size_22;

        [FieldOffset(23)]
        public sbyte __dummy___size_23;

        [FieldOffset(24)]
        public sbyte __dummy___size_24;

        [FieldOffset(25)]
        public sbyte __dummy___size_25;

        [FieldOffset(26)]
        public sbyte __dummy___size_26;

        [FieldOffset(27)]
        public sbyte __dummy___size_27;

        [FieldOffset(28)]
        public sbyte __dummy___size_28;

        [FieldOffset(29)]
        public sbyte __dummy___size_29;

        [FieldOffset(30)]
        public sbyte __dummy___size_30;

        [FieldOffset(31)]
        public sbyte __dummy___size_31;

        [FieldOffset(32)]
        public sbyte __dummy___size_32;

        [FieldOffset(33)]
        public sbyte __dummy___size_33;

        [FieldOffset(34)]
        public sbyte __dummy___size_34;

        [FieldOffset(35)]
        public sbyte __dummy___size_35;

        [FieldOffset(36)]
        public sbyte __dummy___size_36;

        [FieldOffset(37)]
        public sbyte __dummy___size_37;

        [FieldOffset(38)]
        public sbyte __dummy___size_38;

        [FieldOffset(39)]
        public sbyte __dummy___size_39;

        [FieldOffset(0)]
        public long __align;
    }

    public unsafe partial class PthreadMutexS
    {
        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            public int __lock;

            [FieldOffset(4)]
            public uint __count;

            [FieldOffset(8)]
            public int __owner;

            [FieldOffset(12)]
            public uint __nusers;

            [FieldOffset(16)]
            public int __kind;

            [FieldOffset(20)]
            public short __spins;

            [FieldOffset(22)]
            public short __elision;

            [FieldOffset(24)]
            internal global::PthreadInternalList.__Internal __list;
        }
    }
}

public unsafe partial struct PthreadCondT
{
    [StructLayout(LayoutKind.Explicit, Size = 48)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::PthreadCondT._.__Internal __data;

        [FieldOffset(0)]
        public fixed sbyte __size[48];

        [FieldOffset(1)]
        public sbyte __dummy___size_1;

        [FieldOffset(2)]
        public sbyte __dummy___size_2;

        [FieldOffset(3)]
        public sbyte __dummy___size_3;

        [FieldOffset(4)]
        public sbyte __dummy___size_4;

        [FieldOffset(5)]
        public sbyte __dummy___size_5;

        [FieldOffset(6)]
        public sbyte __dummy___size_6;

        [FieldOffset(7)]
        public sbyte __dummy___size_7;

        [FieldOffset(8)]
        public sbyte __dummy___size_8;

        [FieldOffset(9)]
        public sbyte __dummy___size_9;

        [FieldOffset(10)]
        public sbyte __dummy___size_10;

        [FieldOffset(11)]
        public sbyte __dummy___size_11;

        [FieldOffset(12)]
        public sbyte __dummy___size_12;

        [FieldOffset(13)]
        public sbyte __dummy___size_13;

        [FieldOffset(14)]
        public sbyte __dummy___size_14;

        [FieldOffset(15)]
        public sbyte __dummy___size_15;

        [FieldOffset(16)]
        public sbyte __dummy___size_16;

        [FieldOffset(17)]
        public sbyte __dummy___size_17;

        [FieldOffset(18)]
        public sbyte __dummy___size_18;

        [FieldOffset(19)]
        public sbyte __dummy___size_19;

        [FieldOffset(20)]
        public sbyte __dummy___size_20;

        [FieldOffset(21)]
        public sbyte __dummy___size_21;

        [FieldOffset(22)]
        public sbyte __dummy___size_22;

        [FieldOffset(23)]
        public sbyte __dummy___size_23;

        [FieldOffset(24)]
        public sbyte __dummy___size_24;

        [FieldOffset(25)]
        public sbyte __dummy___size_25;

        [FieldOffset(26)]
        public sbyte __dummy___size_26;

        [FieldOffset(27)]
        public sbyte __dummy___size_27;

        [FieldOffset(28)]
        public sbyte __dummy___size_28;

        [FieldOffset(29)]
        public sbyte __dummy___size_29;

        [FieldOffset(30)]
        public sbyte __dummy___size_30;

        [FieldOffset(31)]
        public sbyte __dummy___size_31;

        [FieldOffset(32)]
        public sbyte __dummy___size_32;

        [FieldOffset(33)]
        public sbyte __dummy___size_33;

        [FieldOffset(34)]
        public sbyte __dummy___size_34;

        [FieldOffset(35)]
        public sbyte __dummy___size_35;

        [FieldOffset(36)]
        public sbyte __dummy___size_36;

        [FieldOffset(37)]
        public sbyte __dummy___size_37;

        [FieldOffset(38)]
        public sbyte __dummy___size_38;

        [FieldOffset(39)]
        public sbyte __dummy___size_39;

        [FieldOffset(40)]
        public sbyte __dummy___size_40;

        [FieldOffset(41)]
        public sbyte __dummy___size_41;

        [FieldOffset(42)]
        public sbyte __dummy___size_42;

        [FieldOffset(43)]
        public sbyte __dummy___size_43;

        [FieldOffset(44)]
        public sbyte __dummy___size_44;

        [FieldOffset(45)]
        public sbyte __dummy___size_45;

        [FieldOffset(46)]
        public sbyte __dummy___size_46;

        [FieldOffset(47)]
        public sbyte __dummy___size_47;

        [FieldOffset(0)]
        public long __align;
    }

    public unsafe partial class _
    {
        [StructLayout(LayoutKind.Explicit, Size = 48)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            public int __lock;

            [FieldOffset(4)]
            public uint __futex;

            [FieldOffset(8)]
            public ulong __total_seq;

            [FieldOffset(16)]
            public ulong __wakeup_seq;

            [FieldOffset(24)]
            public ulong __woken_seq;

            [FieldOffset(32)]
            public global::System.IntPtr __mutex;

            [FieldOffset(40)]
            public uint __nwaiters;

            [FieldOffset(44)]
            public uint __broadcast_seq;
        }
    }
}

public unsafe partial struct PthreadRwlockT
{
    [StructLayout(LayoutKind.Explicit, Size = 56)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::PthreadRwlockT._.__Internal __data;

        [FieldOffset(0)]
        public fixed sbyte __size[56];

        [FieldOffset(1)]
        public sbyte __dummy___size_1;

        [FieldOffset(2)]
        public sbyte __dummy___size_2;

        [FieldOffset(3)]
        public sbyte __dummy___size_3;

        [FieldOffset(4)]
        public sbyte __dummy___size_4;

        [FieldOffset(5)]
        public sbyte __dummy___size_5;

        [FieldOffset(6)]
        public sbyte __dummy___size_6;

        [FieldOffset(7)]
        public sbyte __dummy___size_7;

        [FieldOffset(8)]
        public sbyte __dummy___size_8;

        [FieldOffset(9)]
        public sbyte __dummy___size_9;

        [FieldOffset(10)]
        public sbyte __dummy___size_10;

        [FieldOffset(11)]
        public sbyte __dummy___size_11;

        [FieldOffset(12)]
        public sbyte __dummy___size_12;

        [FieldOffset(13)]
        public sbyte __dummy___size_13;

        [FieldOffset(14)]
        public sbyte __dummy___size_14;

        [FieldOffset(15)]
        public sbyte __dummy___size_15;

        [FieldOffset(16)]
        public sbyte __dummy___size_16;

        [FieldOffset(17)]
        public sbyte __dummy___size_17;

        [FieldOffset(18)]
        public sbyte __dummy___size_18;

        [FieldOffset(19)]
        public sbyte __dummy___size_19;

        [FieldOffset(20)]
        public sbyte __dummy___size_20;

        [FieldOffset(21)]
        public sbyte __dummy___size_21;

        [FieldOffset(22)]
        public sbyte __dummy___size_22;

        [FieldOffset(23)]
        public sbyte __dummy___size_23;

        [FieldOffset(24)]
        public sbyte __dummy___size_24;

        [FieldOffset(25)]
        public sbyte __dummy___size_25;

        [FieldOffset(26)]
        public sbyte __dummy___size_26;

        [FieldOffset(27)]
        public sbyte __dummy___size_27;

        [FieldOffset(28)]
        public sbyte __dummy___size_28;

        [FieldOffset(29)]
        public sbyte __dummy___size_29;

        [FieldOffset(30)]
        public sbyte __dummy___size_30;

        [FieldOffset(31)]
        public sbyte __dummy___size_31;

        [FieldOffset(32)]
        public sbyte __dummy___size_32;

        [FieldOffset(33)]
        public sbyte __dummy___size_33;

        [FieldOffset(34)]
        public sbyte __dummy___size_34;

        [FieldOffset(35)]
        public sbyte __dummy___size_35;

        [FieldOffset(36)]
        public sbyte __dummy___size_36;

        [FieldOffset(37)]
        public sbyte __dummy___size_37;

        [FieldOffset(38)]
        public sbyte __dummy___size_38;

        [FieldOffset(39)]
        public sbyte __dummy___size_39;

        [FieldOffset(40)]
        public sbyte __dummy___size_40;

        [FieldOffset(41)]
        public sbyte __dummy___size_41;

        [FieldOffset(42)]
        public sbyte __dummy___size_42;

        [FieldOffset(43)]
        public sbyte __dummy___size_43;

        [FieldOffset(44)]
        public sbyte __dummy___size_44;

        [FieldOffset(45)]
        public sbyte __dummy___size_45;

        [FieldOffset(46)]
        public sbyte __dummy___size_46;

        [FieldOffset(47)]
        public sbyte __dummy___size_47;

        [FieldOffset(48)]
        public sbyte __dummy___size_48;

        [FieldOffset(49)]
        public sbyte __dummy___size_49;

        [FieldOffset(50)]
        public sbyte __dummy___size_50;

        [FieldOffset(51)]
        public sbyte __dummy___size_51;

        [FieldOffset(52)]
        public sbyte __dummy___size_52;

        [FieldOffset(53)]
        public sbyte __dummy___size_53;

        [FieldOffset(54)]
        public sbyte __dummy___size_54;

        [FieldOffset(55)]
        public sbyte __dummy___size_55;

        [FieldOffset(0)]
        public long __align;
    }

    public unsafe partial class _
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            public int __lock;

            [FieldOffset(4)]
            public uint __nr_readers;

            [FieldOffset(8)]
            public uint __readers_wakeup;

            [FieldOffset(12)]
            public uint __writer_wakeup;

            [FieldOffset(16)]
            public uint __nr_readers_queued;

            [FieldOffset(20)]
            public uint __nr_writers_queued;

            [FieldOffset(24)]
            public int __writer;

            [FieldOffset(28)]
            public int __shared;

            [FieldOffset(32)]
            public sbyte __rwelision;

            [FieldOffset(33)]
            public fixed byte __pad1[7];

            [FieldOffset(34)]
            public byte __dummy___pad1_1;

            [FieldOffset(35)]
            public byte __dummy___pad1_2;

            [FieldOffset(36)]
            public byte __dummy___pad1_3;

            [FieldOffset(37)]
            public byte __dummy___pad1_4;

            [FieldOffset(38)]
            public byte __dummy___pad1_5;

            [FieldOffset(39)]
            public byte __dummy___pad1_6;

            [FieldOffset(40)]
            public ulong __pad2;

            [FieldOffset(48)]
            public uint __flags;
        }
    }
}

namespace Std
{
    public unsafe partial class BasicString : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public unsafe partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.AllocHider.__Internal _M_dataplus;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Std-templates", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNSsD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Std-templates", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNKSs5c_strEv")]
            internal static extern global::System.IntPtr CStr_0(global::System.IntPtr instance);
        }

        public unsafe partial class AllocHider
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr _M_p;
            }
        }

        public unsafe partial class RepBase
        {
            [StructLayout(LayoutKind.Explicit, Size = 24)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                public ulong _M_length;

                [FieldOffset(8)]
                public ulong _M_capacity;

                [FieldOffset(16)]
                public int _M_refcount;
            }
        }

        public unsafe partial class Rep
        {
            [StructLayout(LayoutKind.Explicit, Size = 24)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                public ulong _M_length;

                [FieldOffset(8)]
                public ulong _M_capacity;

                [FieldOffset(16)]
                public int _M_refcount;
            }
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, BasicString> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, BasicString>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static BasicString __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new BasicString(native.ToPointer(), skipVTables);
        }

        public static BasicString __CreateInstance(BasicString.__Internal native, bool skipVTables = false)
        {
            return new BasicString(native, skipVTables);
        }

        private static void* __CopyValue(BasicString.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(8);
            *(BasicString.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private BasicString(BasicString.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected BasicString(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            global::Std.BasicString __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public string CStr()
        {
            var __ret = __Internal.CStr_0((__Instance + __PointerAdjustment));
            return Marshal.PtrToStringAnsi(__ret);
        }
    }


    public unsafe partial class RepBase
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

    }

    public unsafe partial class Rep
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

    }

    public unsafe partial class AllocHider
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }
    }
}

public unsafe partial struct Wait
{
    [StructLayout(LayoutKind.Explicit, Size = 4)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        public int w_status;

        [FieldOffset(0)]
        internal global::Wait._.__Internal __wait_terminated;

        [FieldOffset(0)]
        internal global::Wait.__.__Internal __wait_stopped;
    }

    public unsafe partial class _
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            public uint __w_termsig;

            [FieldOffset(0)]
            public uint __w_coredump;

            [FieldOffset(1)]
            public uint __w_retcode;

            [FieldOffset(2)]
            public uint __;
        }
    }

    public unsafe partial class __
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            public uint __w_stopval;

            [FieldOffset(1)]
            public uint __w_stopsig;

            [FieldOffset(2)]
            public uint __;
        }
    }
}

namespace Std
{
}

namespace Std
{
    public unsafe partial class SsoString
    {
        [StructLayout(LayoutKind.Explicit, Size = 32)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::Std.SsoString._.__Internal _;
        }

        public unsafe partial struct _
        {
            [StructLayout(LayoutKind.Explicit, Size = 32)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::Std.SsoString.Str.__Internal _M_s;

                [FieldOffset(0)]
                public fixed sbyte _M_bytes[32];

                [FieldOffset(1)]
                public sbyte __dummy__M_bytes_1;

                [FieldOffset(2)]
                public sbyte __dummy__M_bytes_2;

                [FieldOffset(3)]
                public sbyte __dummy__M_bytes_3;

                [FieldOffset(4)]
                public sbyte __dummy__M_bytes_4;

                [FieldOffset(5)]
                public sbyte __dummy__M_bytes_5;

                [FieldOffset(6)]
                public sbyte __dummy__M_bytes_6;

                [FieldOffset(7)]
                public sbyte __dummy__M_bytes_7;

                [FieldOffset(8)]
                public sbyte __dummy__M_bytes_8;

                [FieldOffset(9)]
                public sbyte __dummy__M_bytes_9;

                [FieldOffset(10)]
                public sbyte __dummy__M_bytes_10;

                [FieldOffset(11)]
                public sbyte __dummy__M_bytes_11;

                [FieldOffset(12)]
                public sbyte __dummy__M_bytes_12;

                [FieldOffset(13)]
                public sbyte __dummy__M_bytes_13;

                [FieldOffset(14)]
                public sbyte __dummy__M_bytes_14;

                [FieldOffset(15)]
                public sbyte __dummy__M_bytes_15;

                [FieldOffset(16)]
                public sbyte __dummy__M_bytes_16;

                [FieldOffset(17)]
                public sbyte __dummy__M_bytes_17;

                [FieldOffset(18)]
                public sbyte __dummy__M_bytes_18;

                [FieldOffset(19)]
                public sbyte __dummy__M_bytes_19;

                [FieldOffset(20)]
                public sbyte __dummy__M_bytes_20;

                [FieldOffset(21)]
                public sbyte __dummy__M_bytes_21;

                [FieldOffset(22)]
                public sbyte __dummy__M_bytes_22;

                [FieldOffset(23)]
                public sbyte __dummy__M_bytes_23;

                [FieldOffset(24)]
                public sbyte __dummy__M_bytes_24;

                [FieldOffset(25)]
                public sbyte __dummy__M_bytes_25;

                [FieldOffset(26)]
                public sbyte __dummy__M_bytes_26;

                [FieldOffset(27)]
                public sbyte __dummy__M_bytes_27;

                [FieldOffset(28)]
                public sbyte __dummy__M_bytes_28;

                [FieldOffset(29)]
                public sbyte __dummy__M_bytes_29;

                [FieldOffset(30)]
                public sbyte __dummy__M_bytes_30;

                [FieldOffset(31)]
                public sbyte __dummy__M_bytes_31;
            }
        }

        public unsafe partial class Str
        {
            [StructLayout(LayoutKind.Explicit, Size = 32)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr _M_p;

                [FieldOffset(8)]
                public ulong _M_string_length;

                [FieldOffset(16)]
                public fixed sbyte _M_local_buf[16];

                [FieldOffset(17)]
                public sbyte __dummy__M_local_buf_1;

                [FieldOffset(18)]
                public sbyte __dummy__M_local_buf_2;

                [FieldOffset(19)]
                public sbyte __dummy__M_local_buf_3;

                [FieldOffset(20)]
                public sbyte __dummy__M_local_buf_4;

                [FieldOffset(21)]
                public sbyte __dummy__M_local_buf_5;

                [FieldOffset(22)]
                public sbyte __dummy__M_local_buf_6;

                [FieldOffset(23)]
                public sbyte __dummy__M_local_buf_7;

                [FieldOffset(24)]
                public sbyte __dummy__M_local_buf_8;

                [FieldOffset(25)]
                public sbyte __dummy__M_local_buf_9;

                [FieldOffset(26)]
                public sbyte __dummy__M_local_buf_10;

                [FieldOffset(27)]
                public sbyte __dummy__M_local_buf_11;

                [FieldOffset(28)]
                public sbyte __dummy__M_local_buf_12;

                [FieldOffset(29)]
                public sbyte __dummy__M_local_buf_13;

                [FieldOffset(30)]
                public sbyte __dummy__M_local_buf_14;

                [FieldOffset(31)]
                public sbyte __dummy__M_local_buf_15;
            }
        }
    }
}

namespace Std
{
    public unsafe partial class UsesAlloc0
    {
        [StructLayout(LayoutKind.Explicit, Size = 1)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::Std.UsesAlloc0.Sink.__Internal _M_a;
        }

        public unsafe partial class Sink
        {
            [StructLayout(LayoutKind.Explicit, Size = 0)]
            public partial struct __Internal
            {
            }
        }
    }
}

namespace Std
{
}

namespace Std
{
}

namespace Std
{
}
